// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Tests.Acceptance.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RefDataEnvironmentsDetailsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "RefDataEnvironmentsDetails", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "RefDataEnvironmentsDetails.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/RefDataEnvironmentsDetails.feature.ndjson", 13);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(DisplayName="Returns environments for project")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Returns environments for project")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefDataEnvironmentsDetails")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Environments")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Projects")]
        public async global::System.Threading.Tasks.Task ReturnsEnvironmentsForProject()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore",
                    "Environments",
                    "Projects"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Returns environments for project", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 8
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
 await testRunner.GivenAsync("I have created GET request to RefDataEnvironmentsDetails with query \'project\'=\'En" +
                        "dur\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.ThenAsync("The result should be json with project equals \'Endur\' and list of environments wh" +
                        "ose names should contain \'Endur\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(DisplayName="Return detailed information about environment items: db\'s, apps and etc")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Return detailed information about environment items: db\'s, apps and etc")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefDataEnvironmentsDetails")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Environments")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "FO Apps DV 01", "20", "2", "1", null, DisplayName="Return detailed information about environment items: db\'s, apps and etc(280,FO Ap" +
            "ps DV 01,20,2,1)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("307", "Endur DV 01", "7", "2", "2", null, DisplayName="Return detailed information about environment items: db\'s, apps and etc(307,Endur" +
            " DV 01,7,2,2)")]
        public async global::System.Threading.Tasks.Task ReturnDetailedInformationAboutEnvironmentItemsDbsAppsAndEtc(string id, string name, string databases, string servers, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Environments"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("databases", databases);
            argumentsOfScenario.Add("servers", servers);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Return detailed information about environment items: db\'s, apps and etc", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 14
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
 await testRunner.GivenAsync(string.Format("I have Created GET request to RefDataEnvironmentsDetails with query \'id\'=\'{0}\'", id), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
 await testRunner.ThenAsync(string.Format("The result should be json with environment \'{0}\' and contain \'{1}\' and \'{2}\'", name, databases, servers), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(DisplayName="Returns Environment components")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Returns Environment components")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefDataEnvironmentsDetails")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Environments")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Components")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "0", "20", "3", null, DisplayName="Returns Environment components(280,0,20,3)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "1", "2", "4", null, DisplayName="Returns Environment components(280,1,2,4)")]
        public async global::System.Threading.Tasks.Task ReturnsEnvironmentComponents(string id, string type, string count, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Environments",
                    "Components"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("type", type);
            argumentsOfScenario.Add("count", count);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Returns Environment components", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 24
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
 await testRunner.GivenAsync(string.Format("I have created Get request on RefDataEnvironmentsDetails with query \'id\'=\'{0}\' an" +
                            "d \'type\'=\'{1}\'", id, type), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
 await testRunner.ThenAsync(string.Format("the result should be list of \'{0}\' with \'{1}\' elements", type, count), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(DisplayName="Add or remove environment components")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add or remove environment components")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefDataEnvironmentsDetails")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Environments")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Components")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "1", "detach", "database", "5", null, DisplayName="Add or remove environment components(280,1,detach,database,5)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "1", "attach", "database", "6", null, DisplayName="Add or remove environment components(280,1,attach,database,6)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "1", "detach", "server", "7", null, DisplayName="Add or remove environment components(280,1,detach,server,7)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("280", "1", "attach", "server", "8", null, DisplayName="Add or remove environment components(280,1,attach,server,8)")]
        public async global::System.Threading.Tasks.Task AddOrRemoveEnvironmentComponents(string envId, string componentId, string action, string component, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Environments",
                    "Components"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("envId", envId);
            argumentsOfScenario.Add("componentId", componentId);
            argumentsOfScenario.Add("action", action);
            argumentsOfScenario.Add("component", component);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add or remove environment components", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 34
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
 await testRunner.GivenAsync(string.Format("I have created PUT request vith query \'envId\'=\'{0}\' \'componentId\'=\'{1}\' \'action\'=" +
                            "\'{2}\' \'component\'=\'{3}\'", envId, componentId, action, component), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
 await testRunner.ThenAsync("The result should be ApiBoolResult with Result \'true\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(DisplayName="Set parent for environment")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set parent for environment")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefDataEnvironmentsDetails")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Environments")]
        public async global::System.Threading.Tasks.Task SetParentForEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "Environments"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Set parent for environment", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 45
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
 await testRunner.GivenAsync("Environment with name \'Parent1 Env Testing\' created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
 await testRunner.AndAsync("Environment with name \'Child1 Env Testing\' created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
 await testRunner.WhenAsync("I set parent to \'Child1 Env Testing\' environment equals the ID of the environment" +
                        " with name \'Parent1 Env Testing\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
 await testRunner.ThenAsync("The result should be Environment \'Child1 Env Testing\' with Parent", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute(DisplayName="Set parent for child environment")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Set parent for child environment")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RefDataEnvironmentsDetails")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Environments")]
        public async global::System.Threading.Tasks.Task SetParentForChildEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "Environments"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "10";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Set parent for child environment", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 52
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
 await testRunner.GivenAsync("Environment with name \'Parent2 Env Testing\' created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
 await testRunner.AndAsync("Environment with name \'Child2 Env Testing\' created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.AndAsync("Environment with name \'Child3 Env Testing\' created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
 await testRunner.WhenAsync("I set parent to \'Child2 Env Testing\' environment equals the ID of the environment" +
                        " with name \'Parent2 Env Testing\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
 await testRunner.AndAsync("I set parent to \'Child3 Env Testing\' environment equals the ID of the environment" +
                        " with name \'Child2 Env Testing\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
 await testRunner.ThenAsync("The result should not be Environment \'Child3 Env Testing\' with Parent", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
