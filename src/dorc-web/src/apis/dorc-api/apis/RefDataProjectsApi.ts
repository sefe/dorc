// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type { ProjectApiModel } from '../models';

export interface RefDataProjectsByIdValueGetRequest {
  value: number;
}

export interface RefDataProjectsPostRequest {
  projectApiModel?: ProjectApiModel;
}

export interface RefDataProjectsProjectNameGetRequest {
  projectName: string;
}

export interface RefDataProjectsPutRequest {
  projectApiModel?: ProjectApiModel;
}

export interface RefDataProjectsDeleteRequest {
  projectId: number;
}

/**
 * no description
 */
export class RefDataProjectsApi extends BaseAPI {
  /**
   */
  refDataProjectsByIdValueGet({
    value
  }: RefDataProjectsByIdValueGetRequest): Observable<ProjectApiModel>;
  refDataProjectsByIdValueGet(
    { value }: RefDataProjectsByIdValueGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ProjectApiModel>>;
  refDataProjectsByIdValueGet(
    { value }: RefDataProjectsByIdValueGetRequest,
    opts?: OperationOpts
  ): Observable<ProjectApiModel | AjaxResponse<ProjectApiModel>> {
    throwIfNullOrUndefined(value, 'value', 'refDataProjectsByIdValueGet');

    return this.request<ProjectApiModel>(
      {
        url: '/RefDataProjects/ById/{value}'.replace(
          '{value}',
          encodeURI(value)
        ),
        method: 'GET'
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataProjectsGet(): Observable<Array<ProjectApiModel>>;
  refDataProjectsGet(
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<ProjectApiModel>>>;
  refDataProjectsGet(
    opts?: OperationOpts
  ): Observable<Array<ProjectApiModel> | AjaxResponse<Array<ProjectApiModel>>> {
    return this.request<Array<ProjectApiModel>>(
      {
        url: '/RefDataProjects',
        method: 'GET'
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataProjectsPost({
    projectApiModel
  }: RefDataProjectsPostRequest): Observable<ProjectApiModel>;
  refDataProjectsPost(
    { projectApiModel }: RefDataProjectsPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ProjectApiModel>>;
  refDataProjectsPost(
    { projectApiModel }: RefDataProjectsPostRequest,
    opts?: OperationOpts
  ): Observable<ProjectApiModel | AjaxResponse<ProjectApiModel>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<ProjectApiModel>(
      {
        url: '/RefDataProjects',
        method: 'POST',
        headers,
        body: projectApiModel
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataProjectsProjectNameGet({
    projectName
  }: RefDataProjectsProjectNameGetRequest): Observable<ProjectApiModel>;
  refDataProjectsProjectNameGet(
    { projectName }: RefDataProjectsProjectNameGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ProjectApiModel>>;
  refDataProjectsProjectNameGet(
    { projectName }: RefDataProjectsProjectNameGetRequest,
    opts?: OperationOpts
  ): Observable<ProjectApiModel | AjaxResponse<ProjectApiModel>> {
    throwIfNullOrUndefined(
      projectName,
      'projectName',
      'refDataProjectsProjectNameGet'
    );

    return this.request<ProjectApiModel>(
      {
        url: '/RefDataProjects/{projectName}'.replace(
          '{projectName}',
          encodeURI(projectName)
        ),
        method: 'GET'
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataProjectsPut({
    projectApiModel
  }: RefDataProjectsPutRequest): Observable<ProjectApiModel>;
  refDataProjectsPut(
    { projectApiModel }: RefDataProjectsPutRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ProjectApiModel>>;
  refDataProjectsPut(
    { projectApiModel }: RefDataProjectsPutRequest,
    opts?: OperationOpts
  ): Observable<ProjectApiModel | AjaxResponse<ProjectApiModel>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<ProjectApiModel>(
      {
        url: '/RefDataProjects',
        method: 'PUT',
        headers,
        body: projectApiModel
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataProjectsDelete({
    projectId
  }: RefDataProjectsDeleteRequest): Observable<string>;
  refDataProjectsDelete(
    { projectId }: RefDataProjectsDeleteRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<string>>;
  refDataProjectsDelete(
    { projectId }: RefDataProjectsDeleteRequest,
    opts?: OperationOpts
  ): Observable<string | AjaxResponse<string>> {
    throwIfNullOrUndefined(projectId, 'projectId', 'refDataProjectsDelete');

    return this.request<string>(
      {
        url: '/RefDataProjects/{projectId}'.replace(
          '{projectId}',
          encodeURI(projectId)
        ),
        method: 'DELETE'
      },
      opts?.responseOpts
    );
  }
}
