// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type { BundledRequestsApiModel } from '../models';

export interface BundledRequestsDeleteRequest {
  id?: number;
}

export interface BundledRequestsGetRequest {
  projectNames?: Array<string>;
}

export interface BundledRequestsPostRequest {
  bundledRequestsApiModel?: BundledRequestsApiModel;
}

export interface BundledRequestsPutRequest {
  bundledRequestsApiModel?: BundledRequestsApiModel;
}

export interface BundledRequestsRequestsForBundleGetRequest {
  bundleName?: string;
}

/**
 * no description
 */
export class BundledRequestsApi extends BaseAPI {
  /**
   */
  bundledRequestsDelete({ id }: BundledRequestsDeleteRequest): Observable<void>;
  bundledRequestsDelete(
    { id }: BundledRequestsDeleteRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>>;
  bundledRequestsDelete(
    { id }: BundledRequestsDeleteRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>> {
    const query: HttpQuery = {};

    if (id != null) {
      query['id'] = id;
    }

    return this.request<void>(
      {
        url: '/BundledRequests',
        method: 'DELETE',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  bundledRequestsGet({
    projectNames
  }: BundledRequestsGetRequest): Observable<Array<BundledRequestsApiModel>>;
  bundledRequestsGet(
    { projectNames }: BundledRequestsGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<BundledRequestsApiModel>>>;
  bundledRequestsGet(
    { projectNames }: BundledRequestsGetRequest,
    opts?: OperationOpts
  ): Observable<
    | Array<BundledRequestsApiModel>
    | AjaxResponse<Array<BundledRequestsApiModel>>
  > {
    const query: HttpQuery = {};

    if (projectNames != null) {
      query['projectNames'] = projectNames;
    }

    return this.request<Array<BundledRequestsApiModel>>(
      {
        url: '/BundledRequests',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  bundledRequestsPost({
    bundledRequestsApiModel
  }: BundledRequestsPostRequest): Observable<void>;
  bundledRequestsPost(
    { bundledRequestsApiModel }: BundledRequestsPostRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>>;
  bundledRequestsPost(
    { bundledRequestsApiModel }: BundledRequestsPostRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<void>(
      {
        url: '/BundledRequests',
        method: 'POST',
        headers,
        body: bundledRequestsApiModel
      },
      opts?.responseOpts
    );
  }

  /**
   */
  bundledRequestsPut({
    bundledRequestsApiModel
  }: BundledRequestsPutRequest): Observable<void>;
  bundledRequestsPut(
    { bundledRequestsApiModel }: BundledRequestsPutRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>>;
  bundledRequestsPut(
    { bundledRequestsApiModel }: BundledRequestsPutRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<void>(
      {
        url: '/BundledRequests',
        method: 'PUT',
        headers,
        body: bundledRequestsApiModel
      },
      opts?.responseOpts
    );
  }

  /**
   */
  bundledRequestsRequestsForBundleGet({
    bundleName
  }: BundledRequestsRequestsForBundleGetRequest): Observable<
    Array<BundledRequestsApiModel>
  >;
  bundledRequestsRequestsForBundleGet(
    { bundleName }: BundledRequestsRequestsForBundleGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<BundledRequestsApiModel>>>;
  bundledRequestsRequestsForBundleGet(
    { bundleName }: BundledRequestsRequestsForBundleGetRequest,
    opts?: OperationOpts
  ): Observable<
    | Array<BundledRequestsApiModel>
    | AjaxResponse<Array<BundledRequestsApiModel>>
  > {
    const query: HttpQuery = {};

    if (bundleName != null) {
      query['bundleName'] = bundleName;
    }

    return this.request<Array<BundledRequestsApiModel>>(
      {
        url: '/BundledRequests/RequestsForBundle',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }
}
