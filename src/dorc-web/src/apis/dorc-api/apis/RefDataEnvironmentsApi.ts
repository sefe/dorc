// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    EnvironmentApiModel,
} from '../models';

export interface RefDataEnvironmentsDeleteRequest {
    environmentApiModel?: EnvironmentApiModel;
}

export interface RefDataEnvironmentsGetRequest {
    env?: string;
}

export interface RefDataEnvironmentsIsEnvironmentOwnerGetRequest {
    envName?: string;
}

export interface RefDataEnvironmentsIsEnvironmentOwnerOrDelegateGetRequest {
    envName?: string;
}

export interface RefDataEnvironmentsPostRequest {
    environmentApiModel?: EnvironmentApiModel;
}

export interface RefDataEnvironmentsPutRequest {
    environmentApiModel?: EnvironmentApiModel;
}

/**
 * no description
 */
export class RefDataEnvironmentsApi extends BaseAPI {

    /**
     */
    refDataEnvironmentsDelete({ environmentApiModel }: RefDataEnvironmentsDeleteRequest): Observable<boolean>
    refDataEnvironmentsDelete({ environmentApiModel }: RefDataEnvironmentsDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<boolean>>
    refDataEnvironmentsDelete({ environmentApiModel }: RefDataEnvironmentsDeleteRequest, opts?: OperationOpts): Observable<boolean | AjaxResponse<boolean>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<boolean>({
            url: '/RefDataEnvironments',
            method: 'DELETE',
            headers,
            body: environmentApiModel,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataEnvironmentsGet({ env }: RefDataEnvironmentsGetRequest): Observable<Array<EnvironmentApiModel>>
    refDataEnvironmentsGet({ env }: RefDataEnvironmentsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<EnvironmentApiModel>>>
    refDataEnvironmentsGet({ env }: RefDataEnvironmentsGetRequest, opts?: OperationOpts): Observable<Array<EnvironmentApiModel> | AjaxResponse<Array<EnvironmentApiModel>>> {

        const query: HttpQuery = {};

        if (env != null) { query['env'] = env; }

        return this.request<Array<EnvironmentApiModel>>({
            url: '/RefDataEnvironments',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataEnvironmentsGetAllEnvironmentNamesGet(): Observable<Array<string>>
    refDataEnvironmentsGetAllEnvironmentNamesGet(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    refDataEnvironmentsGetAllEnvironmentNamesGet(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        return this.request<Array<string>>({
            url: '/RefDataEnvironments/GetAllEnvironmentNames',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    refDataEnvironmentsIsEnvironmentOwnerGet({ envName }: RefDataEnvironmentsIsEnvironmentOwnerGetRequest): Observable<boolean>
    refDataEnvironmentsIsEnvironmentOwnerGet({ envName }: RefDataEnvironmentsIsEnvironmentOwnerGetRequest, opts?: OperationOpts): Observable<AjaxResponse<boolean>>
    refDataEnvironmentsIsEnvironmentOwnerGet({ envName }: RefDataEnvironmentsIsEnvironmentOwnerGetRequest, opts?: OperationOpts): Observable<boolean | AjaxResponse<boolean>> {

        const query: HttpQuery = {};

        if (envName != null) { query['envName'] = envName; }

        return this.request<boolean>({
            url: '/RefDataEnvironments/IsEnvironmentOwner',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataEnvironmentsIsEnvironmentOwnerOrDelegateGet({ envName }: RefDataEnvironmentsIsEnvironmentOwnerOrDelegateGetRequest): Observable<boolean>
    refDataEnvironmentsIsEnvironmentOwnerOrDelegateGet({ envName }: RefDataEnvironmentsIsEnvironmentOwnerOrDelegateGetRequest, opts?: OperationOpts): Observable<AjaxResponse<boolean>>
    refDataEnvironmentsIsEnvironmentOwnerOrDelegateGet({ envName }: RefDataEnvironmentsIsEnvironmentOwnerOrDelegateGetRequest, opts?: OperationOpts): Observable<boolean | AjaxResponse<boolean>> {

        const query: HttpQuery = {};

        if (envName != null) { query['envName'] = envName; }

        return this.request<boolean>({
            url: '/RefDataEnvironments/IsEnvironmentOwnerOrDelegate',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataEnvironmentsPost({ environmentApiModel }: RefDataEnvironmentsPostRequest): Observable<EnvironmentApiModel>
    refDataEnvironmentsPost({ environmentApiModel }: RefDataEnvironmentsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<EnvironmentApiModel>>
    refDataEnvironmentsPost({ environmentApiModel }: RefDataEnvironmentsPostRequest, opts?: OperationOpts): Observable<EnvironmentApiModel | AjaxResponse<EnvironmentApiModel>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<EnvironmentApiModel>({
            url: '/RefDataEnvironments',
            method: 'POST',
            headers,
            body: environmentApiModel,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataEnvironmentsPut({ environmentApiModel }: RefDataEnvironmentsPutRequest): Observable<EnvironmentApiModel>
    refDataEnvironmentsPut({ environmentApiModel }: RefDataEnvironmentsPutRequest, opts?: OperationOpts): Observable<AjaxResponse<EnvironmentApiModel>>
    refDataEnvironmentsPut({ environmentApiModel }: RefDataEnvironmentsPutRequest, opts?: OperationOpts): Observable<EnvironmentApiModel | AjaxResponse<EnvironmentApiModel>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<EnvironmentApiModel>({
            url: '/RefDataEnvironments',
            method: 'PUT',
            headers,
            body: environmentApiModel,
        }, opts?.responseOpts);
    };

}
