// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
  ApiBoolResult,
  GetServerApiModelListResponseDto,
  PagedDataOperators,
  ServerApiModel,
  ServerOperatingSystemApiModel
} from '../models';

export interface RefDataServersByIdIdGetRequest {
  id: number;
}

export interface RefDataServersByPagePutRequest {
  page?: number;
  limit?: number;
  pagedDataOperators?: PagedDataOperators;
}

export interface RefDataServersDeleteRequest {
  serverId?: number;
}

export interface RefDataServersGetServerOperatingFromTargetGetRequest {
  serverName?: string;
}

export interface RefDataServersPostRequest {
  serverApiModel?: ServerApiModel;
}

export interface RefDataServersPutRequest {
  id?: number;
  serverApiModel?: ServerApiModel;
}

export interface RefDataServersServerGetRequest {
  server: string;
}

/**
 * no description
 */
export class RefDataServersApi extends BaseAPI {
  /**
   */
  refDataServersByIdIdGet({
    id
  }: RefDataServersByIdIdGetRequest): Observable<ServerApiModel>;
  refDataServersByIdIdGet(
    { id }: RefDataServersByIdIdGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ServerApiModel>>;
  refDataServersByIdIdGet(
    { id }: RefDataServersByIdIdGetRequest,
    opts?: OperationOpts
  ): Observable<ServerApiModel | AjaxResponse<ServerApiModel>> {
    throwIfNullOrUndefined(id, 'id', 'refDataServersByIdIdGet');

    return this.request<ServerApiModel>(
      {
        url: '/RefDataServers/ById/{id}'.replace('{id}', encodeURI(id)),
        method: 'GET'
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersByPagePut({
    page,
    limit,
    pagedDataOperators
  }: RefDataServersByPagePutRequest): Observable<GetServerApiModelListResponseDto>;
  refDataServersByPagePut(
    { page, limit, pagedDataOperators }: RefDataServersByPagePutRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<GetServerApiModelListResponseDto>>;
  refDataServersByPagePut(
    { page, limit, pagedDataOperators }: RefDataServersByPagePutRequest,
    opts?: OperationOpts
  ): Observable<
    | GetServerApiModelListResponseDto
    | AjaxResponse<GetServerApiModelListResponseDto>
  > {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    const query: HttpQuery = {};

    if (page != null) {
      query['page'] = page;
    }
    if (limit != null) {
      query['limit'] = limit;
    }

    return this.request<GetServerApiModelListResponseDto>(
      {
        url: '/RefDataServers/ByPage',
        method: 'PUT',
        headers,
        query,
        body: pagedDataOperators
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersDelete({
    serverId
  }: RefDataServersDeleteRequest): Observable<ApiBoolResult>;
  refDataServersDelete(
    { serverId }: RefDataServersDeleteRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ApiBoolResult>>;
  refDataServersDelete(
    { serverId }: RefDataServersDeleteRequest,
    opts?: OperationOpts
  ): Observable<ApiBoolResult | AjaxResponse<ApiBoolResult>> {
    const query: HttpQuery = {};

    if (serverId != null) {
      query['serverId'] = serverId;
    }

    return this.request<ApiBoolResult>(
      {
        url: '/RefDataServers',
        method: 'DELETE',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersGetAllGet(): Observable<Array<ServerApiModel>>;
  refDataServersGetAllGet(
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<ServerApiModel>>>;
  refDataServersGetAllGet(
    opts?: OperationOpts
  ): Observable<Array<ServerApiModel> | AjaxResponse<Array<ServerApiModel>>> {
    return this.request<Array<ServerApiModel>>(
      {
        url: '/RefDataServers/GetAll',
        method: 'GET'
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersGetServerOperatingFromTargetGet({
    serverName
  }: RefDataServersGetServerOperatingFromTargetGetRequest): Observable<ServerOperatingSystemApiModel>;
  refDataServersGetServerOperatingFromTargetGet(
    { serverName }: RefDataServersGetServerOperatingFromTargetGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ServerOperatingSystemApiModel>>;
  refDataServersGetServerOperatingFromTargetGet(
    { serverName }: RefDataServersGetServerOperatingFromTargetGetRequest,
    opts?: OperationOpts
  ): Observable<
    ServerOperatingSystemApiModel | AjaxResponse<ServerOperatingSystemApiModel>
  > {
    const query: HttpQuery = {};

    if (serverName != null) {
      query['serverName'] = serverName;
    }

    return this.request<ServerOperatingSystemApiModel>(
      {
        url: '/RefDataServers/GetServerOperatingFromTarget',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersPost({
    serverApiModel
  }: RefDataServersPostRequest): Observable<ServerApiModel>;
  refDataServersPost(
    { serverApiModel }: RefDataServersPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ServerApiModel>>;
  refDataServersPost(
    { serverApiModel }: RefDataServersPostRequest,
    opts?: OperationOpts
  ): Observable<ServerApiModel | AjaxResponse<ServerApiModel>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<ServerApiModel>(
      {
        url: '/RefDataServers',
        method: 'POST',
        headers,
        body: serverApiModel
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersPut({
    id,
    serverApiModel
  }: RefDataServersPutRequest): Observable<ServerApiModel>;
  refDataServersPut(
    { id, serverApiModel }: RefDataServersPutRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ServerApiModel>>;
  refDataServersPut(
    { id, serverApiModel }: RefDataServersPutRequest,
    opts?: OperationOpts
  ): Observable<ServerApiModel | AjaxResponse<ServerApiModel>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    const query: HttpQuery = {};

    if (id != null) {
      query['id'] = id;
    }

    return this.request<ServerApiModel>(
      {
        url: '/RefDataServers',
        method: 'PUT',
        headers,
        query,
        body: serverApiModel
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataServersServerGet({
    server
  }: RefDataServersServerGetRequest): Observable<ServerApiModel>;
  refDataServersServerGet(
    { server }: RefDataServersServerGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<ServerApiModel>>;
  refDataServersServerGet(
    { server }: RefDataServersServerGetRequest,
    opts?: OperationOpts
  ): Observable<ServerApiModel | AjaxResponse<ServerApiModel>> {
    throwIfNullOrUndefined(server, 'server', 'refDataServersServerGet');

    return this.request<ServerApiModel>(
      {
        url: '/RefDataServers/{server}'.replace('{server}', encodeURI(server)),
        method: 'GET'
      },
      opts?.responseOpts
    );
  }
}
