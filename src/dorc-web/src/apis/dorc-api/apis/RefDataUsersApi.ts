// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
  AccountGranularity,
  UserAccountType,
  UserApiModel
} from '../models';

export interface RefDataUsersByEnvironmentIdGetRequest {
  environmentId?: number;
  userAccountType?: UserAccountType;
}

export interface RefDataUsersByGranularityGetRequest {
  granularity?: AccountGranularity;
}

export interface RefDataUsersByNameGetRequest {
  userName?: string;
}

export interface RefDataUsersPostRequest {
  userApiModel?: UserApiModel;
}

/**
 * no description
 */
export class RefDataUsersApi extends BaseAPI {
  /**
   */
  refDataUsersByEnvironmentIdGet({
    environmentId,
    userAccountType
  }: RefDataUsersByEnvironmentIdGetRequest): Observable<Array<UserApiModel>>;
  refDataUsersByEnvironmentIdGet(
    { environmentId, userAccountType }: RefDataUsersByEnvironmentIdGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<UserApiModel>>>;
  refDataUsersByEnvironmentIdGet(
    { environmentId, userAccountType }: RefDataUsersByEnvironmentIdGetRequest,
    opts?: OperationOpts
  ): Observable<Array<UserApiModel> | AjaxResponse<Array<UserApiModel>>> {
    const query: HttpQuery = {};

    if (environmentId != null) {
      query['environmentId'] = environmentId;
    }
    if (userAccountType != null) {
      query['userAccountType'] = userAccountType;
    }

    return this.request<Array<UserApiModel>>(
      {
        url: '/RefDataUsers/ByEnvironmentId',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataUsersByGranularityGet({
    granularity
  }: RefDataUsersByGranularityGetRequest): Observable<Array<UserApiModel>>;
  refDataUsersByGranularityGet(
    { granularity }: RefDataUsersByGranularityGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<UserApiModel>>>;
  refDataUsersByGranularityGet(
    { granularity }: RefDataUsersByGranularityGetRequest,
    opts?: OperationOpts
  ): Observable<Array<UserApiModel> | AjaxResponse<Array<UserApiModel>>> {
    const query: HttpQuery = {};

    if (granularity != null) {
      query['granularity'] = granularity;
    }

    return this.request<Array<UserApiModel>>(
      {
        url: '/RefDataUsers/ByGranularity',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataUsersByNameGet({
    userName
  }: RefDataUsersByNameGetRequest): Observable<UserApiModel>;
  refDataUsersByNameGet(
    { userName }: RefDataUsersByNameGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserApiModel>>;
  refDataUsersByNameGet(
    { userName }: RefDataUsersByNameGetRequest,
    opts?: OperationOpts
  ): Observable<UserApiModel | AjaxResponse<UserApiModel>> {
    const query: HttpQuery = {};

    if (userName != null) {
      query['userName'] = userName;
    }

    return this.request<UserApiModel>(
      {
        url: '/RefDataUsers/ByName',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataUsersGet(): Observable<Array<UserApiModel>>;
  refDataUsersGet(
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<UserApiModel>>>;
  refDataUsersGet(
    opts?: OperationOpts
  ): Observable<Array<UserApiModel> | AjaxResponse<Array<UserApiModel>>> {
    return this.request<Array<UserApiModel>>(
      {
        url: '/RefDataUsers',
        method: 'GET'
      },
      opts?.responseOpts
    );
  }

  /**
   */
  refDataUsersPost({
    userApiModel
  }: RefDataUsersPostRequest): Observable<UserApiModel>;
  refDataUsersPost(
    { userApiModel }: RefDataUsersPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserApiModel>>;
  refDataUsersPost(
    { userApiModel }: RefDataUsersPostRequest,
    opts?: OperationOpts
  ): Observable<UserApiModel | AjaxResponse<UserApiModel>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<UserApiModel>(
      {
        url: '/RefDataUsers',
        method: 'POST',
        headers,
        body: userApiModel
      },
      opts?.responseOpts
    );
  }
}
