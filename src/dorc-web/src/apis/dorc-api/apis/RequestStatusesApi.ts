// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DeploymentRequestApiModel,
    GetRequestStatusesListResponseDto,
    PagedDataOperators,
} from '../models';

export interface RequestStatusesGetRequest {
    requestId?: number;
}

export interface RequestStatusesLogGetRequest {
    requestId?: number;
}

export interface RequestStatusesPatchRequest {
    requestId?: number;
    deploymentResultId?: number;
    body?: string;
}

export interface RequestStatusesPutRequest {
    page?: number;
    limit?: number;
    pagedDataOperators?: PagedDataOperators;
}

export interface RequestStatusesRawLogPostRequest {
    requestId?: number;
    uncLogPath?: string;
}

/**
 * no description
 */
export class RequestStatusesApi extends BaseAPI {

    /**
     */
    requestStatusesGet({ requestId }: RequestStatusesGetRequest): Observable<DeploymentRequestApiModel>
    requestStatusesGet({ requestId }: RequestStatusesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<DeploymentRequestApiModel>>
    requestStatusesGet({ requestId }: RequestStatusesGetRequest, opts?: OperationOpts): Observable<DeploymentRequestApiModel | AjaxResponse<DeploymentRequestApiModel>> {

        const query: HttpQuery = {};

        if (requestId != null) { query['requestId'] = requestId; }

        return this.request<DeploymentRequestApiModel>({
            url: '/RequestStatuses',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestStatusesLogGet({ requestId }: RequestStatusesLogGetRequest): Observable<string>
    requestStatusesLogGet({ requestId }: RequestStatusesLogGetRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    requestStatusesLogGet({ requestId }: RequestStatusesLogGetRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {

        const query: HttpQuery = {};

        if (requestId != null) { query['requestId'] = requestId; }

        return this.request<string>({
            url: '/RequestStatuses/Log',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestStatusesPatch({ requestId, deploymentResultId, body }: RequestStatusesPatchRequest): Observable<void>
    requestStatusesPatch({ requestId, deploymentResultId, body }: RequestStatusesPatchRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    requestStatusesPatch({ requestId, deploymentResultId, body }: RequestStatusesPatchRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = {};

        if (requestId != null) { query['requestId'] = requestId; }
        if (deploymentResultId != null) { query['deploymentResultId'] = deploymentResultId; }

        return this.request<void>({
            url: '/RequestStatuses',
            method: 'PATCH',
            headers,
            query,
            body: body as any,
        }, opts?.responseOpts);
    };

    /**
     */
    requestStatusesPut({ page, limit, pagedDataOperators }: RequestStatusesPutRequest): Observable<GetRequestStatusesListResponseDto>
    requestStatusesPut({ page, limit, pagedDataOperators }: RequestStatusesPutRequest, opts?: OperationOpts): Observable<AjaxResponse<GetRequestStatusesListResponseDto>>
    requestStatusesPut({ page, limit, pagedDataOperators }: RequestStatusesPutRequest, opts?: OperationOpts): Observable<GetRequestStatusesListResponseDto | AjaxResponse<GetRequestStatusesListResponseDto>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetRequestStatusesListResponseDto>({
            url: '/RequestStatuses',
            method: 'PUT',
            headers,
            query,
            body: pagedDataOperators,
        }, opts?.responseOpts);
    };

    /**
     */
    requestStatusesRawLogPost({ requestId, uncLogPath }: RequestStatusesRawLogPostRequest): Observable<void>
    requestStatusesRawLogPost({ requestId, uncLogPath }: RequestStatusesRawLogPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    requestStatusesRawLogPost({ requestId, uncLogPath }: RequestStatusesRawLogPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (requestId != null) { query['requestId'] = requestId; }
        if (uncLogPath != null) { query['uncLogPath'] = uncLogPath; }

        return this.request<void>({
            url: '/RequestStatuses/RawLog',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

}
