// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    EnvironmentApiModelTemplateApiModel,
} from '../models';

export interface RefDataProjectEnvironmentMappingsDeleteRequest {
    project?: string;
    environment?: string;
}

export interface RefDataProjectEnvironmentMappingsGetRequest {
    project?: string;
    includeRead?: boolean;
}

export interface RefDataProjectEnvironmentMappingsPostRequest {
    project?: string;
    environment?: string;
}

/**
 * no description
 */
export class RefDataProjectEnvironmentMappingsApi extends BaseAPI {

    /**
     */
    refDataProjectEnvironmentMappingsDelete({ project, environment }: RefDataProjectEnvironmentMappingsDeleteRequest): Observable<void>
    refDataProjectEnvironmentMappingsDelete({ project, environment }: RefDataProjectEnvironmentMappingsDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    refDataProjectEnvironmentMappingsDelete({ project, environment }: RefDataProjectEnvironmentMappingsDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (project != null) { query['project'] = project; }
        if (environment != null) { query['environment'] = environment; }

        return this.request<void>({
            url: '/RefDataProjectEnvironmentMappings',
            method: 'DELETE',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataProjectEnvironmentMappingsGet({ project, includeRead }: RefDataProjectEnvironmentMappingsGetRequest): Observable<EnvironmentApiModelTemplateApiModel>
    refDataProjectEnvironmentMappingsGet({ project, includeRead }: RefDataProjectEnvironmentMappingsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<EnvironmentApiModelTemplateApiModel>>
    refDataProjectEnvironmentMappingsGet({ project, includeRead }: RefDataProjectEnvironmentMappingsGetRequest, opts?: OperationOpts): Observable<EnvironmentApiModelTemplateApiModel | AjaxResponse<EnvironmentApiModelTemplateApiModel>> {

        const query: HttpQuery = {};

        if (project != null) { query['project'] = project; }
        if (includeRead != null) { query['includeRead'] = includeRead; }

        return this.request<EnvironmentApiModelTemplateApiModel>({
            url: '/RefDataProjectEnvironmentMappings',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    refDataProjectEnvironmentMappingsPost({ project, environment }: RefDataProjectEnvironmentMappingsPostRequest): Observable<void>
    refDataProjectEnvironmentMappingsPost({ project, environment }: RefDataProjectEnvironmentMappingsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    refDataProjectEnvironmentMappingsPost({ project, environment }: RefDataProjectEnvironmentMappingsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (project != null) { query['project'] = project; }
        if (environment != null) { query['environment'] = environment; }

        return this.request<void>({
            url: '/RefDataProjectEnvironmentMappings',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

}
