// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
  PropertyValueDto,
  PropertyValueScopeOptionApiModel,
  Response
} from '../models';

export interface ApiPropertyValuesDeleteRequest {
  propertyValueDto?: Array<PropertyValueDto>;
}

export interface ApiPropertyValuesGetRequest {
  propertyName?: string;
  environmentName?: string;
}

export interface ApiPropertyValuesPostRequest {
  propertyValueDto?: Array<PropertyValueDto>;
}

export interface ApiPropertyValuesPutRequest {
  propertyValueDto?: Array<PropertyValueDto>;
}

export interface ApiPropertyValuesScopeOptionsGetRequest {
  propertyValueScope?: string;
}

export interface PropertyValuesDeleteRequest {
  propertyValueDto?: Array<PropertyValueDto>;
}

export interface PropertyValuesGetRequest {
  propertyName?: string;
  environmentName?: string;
}

export interface PropertyValuesPostRequest {
  propertyValueDto?: Array<PropertyValueDto>;
}

export interface PropertyValuesPutRequest {
  propertyValueDto?: Array<PropertyValueDto>;
}

export interface PropertyValuesScopeOptionsGetRequest {
  propertyValueScope?: string;
}

/**
 * no description
 */
export class PropertyValuesApi extends BaseAPI {
  /**
   */
  apiPropertyValuesDelete({
    propertyValueDto
  }: ApiPropertyValuesDeleteRequest): Observable<Array<Response>>;
  apiPropertyValuesDelete(
    { propertyValueDto }: ApiPropertyValuesDeleteRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Response>>>;
  apiPropertyValuesDelete(
    { propertyValueDto }: ApiPropertyValuesDeleteRequest,
    opts?: OperationOpts
  ): Observable<Array<Response> | AjaxResponse<Array<Response>>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<Array<Response>>(
      {
        url: '/api/PropertyValues',
        method: 'DELETE',
        headers,
        body: propertyValueDto
      },
      opts?.responseOpts
    );
  }

  /**
   */
  apiPropertyValuesGet({
    propertyName,
    environmentName
  }: ApiPropertyValuesGetRequest): Observable<Array<PropertyValueDto>>;
  apiPropertyValuesGet(
    { propertyName, environmentName }: ApiPropertyValuesGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<PropertyValueDto>>>;
  apiPropertyValuesGet(
    { propertyName, environmentName }: ApiPropertyValuesGetRequest,
    opts?: OperationOpts
  ): Observable<
    Array<PropertyValueDto> | AjaxResponse<Array<PropertyValueDto>>
  > {
    const query: HttpQuery = {};

    if (propertyName != null) {
      query['propertyName'] = propertyName;
    }
    if (environmentName != null) {
      query['environmentName'] = environmentName;
    }

    return this.request<Array<PropertyValueDto>>(
      {
        url: '/api/PropertyValues',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  apiPropertyValuesPost({
    propertyValueDto
  }: ApiPropertyValuesPostRequest): Observable<Array<Response>>;
  apiPropertyValuesPost(
    { propertyValueDto }: ApiPropertyValuesPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Response>>>;
  apiPropertyValuesPost(
    { propertyValueDto }: ApiPropertyValuesPostRequest,
    opts?: OperationOpts
  ): Observable<Array<Response> | AjaxResponse<Array<Response>>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<Array<Response>>(
      {
        url: '/api/PropertyValues',
        method: 'POST',
        headers,
        body: propertyValueDto
      },
      opts?.responseOpts
    );
  }

  /**
   */
  apiPropertyValuesPut({
    propertyValueDto
  }: ApiPropertyValuesPutRequest): Observable<Array<Response>>;
  apiPropertyValuesPut(
    { propertyValueDto }: ApiPropertyValuesPutRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Response>>>;
  apiPropertyValuesPut(
    { propertyValueDto }: ApiPropertyValuesPutRequest,
    opts?: OperationOpts
  ): Observable<Array<Response> | AjaxResponse<Array<Response>>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<Array<Response>>(
      {
        url: '/api/PropertyValues',
        method: 'PUT',
        headers,
        body: propertyValueDto
      },
      opts?.responseOpts
    );
  }

  /**
   */
  apiPropertyValuesScopeOptionsGet({
    propertyValueScope
  }: ApiPropertyValuesScopeOptionsGetRequest): Observable<
    Array<PropertyValueScopeOptionApiModel>
  >;
  apiPropertyValuesScopeOptionsGet(
    { propertyValueScope }: ApiPropertyValuesScopeOptionsGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<PropertyValueScopeOptionApiModel>>>;
  apiPropertyValuesScopeOptionsGet(
    { propertyValueScope }: ApiPropertyValuesScopeOptionsGetRequest,
    opts?: OperationOpts
  ): Observable<
    | Array<PropertyValueScopeOptionApiModel>
    | AjaxResponse<Array<PropertyValueScopeOptionApiModel>>
  > {
    const query: HttpQuery = {};

    if (propertyValueScope != null) {
      query['propertyValueScope'] = propertyValueScope;
    }

    return this.request<Array<PropertyValueScopeOptionApiModel>>(
      {
        url: '/api/PropertyValues/ScopeOptions',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  propertyValuesDelete({
    propertyValueDto
  }: PropertyValuesDeleteRequest): Observable<Array<Response>>;
  propertyValuesDelete(
    { propertyValueDto }: PropertyValuesDeleteRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Response>>>;
  propertyValuesDelete(
    { propertyValueDto }: PropertyValuesDeleteRequest,
    opts?: OperationOpts
  ): Observable<Array<Response> | AjaxResponse<Array<Response>>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<Array<Response>>(
      {
        url: '/PropertyValues',
        method: 'DELETE',
        headers,
        body: propertyValueDto
      },
      opts?.responseOpts
    );
  }

  /**
   */
  propertyValuesGet({
    propertyName,
    environmentName
  }: PropertyValuesGetRequest): Observable<Array<PropertyValueDto>>;
  propertyValuesGet(
    { propertyName, environmentName }: PropertyValuesGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<PropertyValueDto>>>;
  propertyValuesGet(
    { propertyName, environmentName }: PropertyValuesGetRequest,
    opts?: OperationOpts
  ): Observable<
    Array<PropertyValueDto> | AjaxResponse<Array<PropertyValueDto>>
  > {
    const query: HttpQuery = {};

    if (propertyName != null) {
      query['propertyName'] = propertyName;
    }
    if (environmentName != null) {
      query['environmentName'] = environmentName;
    }

    return this.request<Array<PropertyValueDto>>(
      {
        url: '/PropertyValues',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  propertyValuesPost({
    propertyValueDto
  }: PropertyValuesPostRequest): Observable<Array<Response>>;
  propertyValuesPost(
    { propertyValueDto }: PropertyValuesPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Response>>>;
  propertyValuesPost(
    { propertyValueDto }: PropertyValuesPostRequest,
    opts?: OperationOpts
  ): Observable<Array<Response> | AjaxResponse<Array<Response>>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<Array<Response>>(
      {
        url: '/PropertyValues',
        method: 'POST',
        headers,
        body: propertyValueDto
      },
      opts?.responseOpts
    );
  }

  /**
   */
  propertyValuesPut({
    propertyValueDto
  }: PropertyValuesPutRequest): Observable<Array<Response>>;
  propertyValuesPut(
    { propertyValueDto }: PropertyValuesPutRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Response>>>;
  propertyValuesPut(
    { propertyValueDto }: PropertyValuesPutRequest,
    opts?: OperationOpts
  ): Observable<Array<Response> | AjaxResponse<Array<Response>>> {
    const headers: HttpHeaders = {
      'Content-Type': 'application/json'
    };

    return this.request<Array<Response>>(
      {
        url: '/PropertyValues',
        method: 'PUT',
        headers,
        body: propertyValueDto
      },
      opts?.responseOpts
    );
  }

  /**
   */
  propertyValuesScopeOptionsGet({
    propertyValueScope
  }: PropertyValuesScopeOptionsGetRequest): Observable<
    Array<PropertyValueScopeOptionApiModel>
  >;
  propertyValuesScopeOptionsGet(
    { propertyValueScope }: PropertyValuesScopeOptionsGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<PropertyValueScopeOptionApiModel>>>;
  propertyValuesScopeOptionsGet(
    { propertyValueScope }: PropertyValuesScopeOptionsGetRequest,
    opts?: OperationOpts
  ): Observable<
    | Array<PropertyValueScopeOptionApiModel>
    | AjaxResponse<Array<PropertyValueScopeOptionApiModel>>
  > {
    const query: HttpQuery = {};

    if (propertyValueScope != null) {
      query['propertyValueScope'] = propertyValueScope;
    }

    return this.request<Array<PropertyValueScopeOptionApiModel>>(
      {
        url: '/PropertyValues/ScopeOptions',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }
}
