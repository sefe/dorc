// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type { UserApiModel } from '../models';

export interface DelegatedUsersDeleteRequest {
  userId?: number;
  envName?: string;
}

export interface DelegatedUsersGetUnallocatedUsersGetRequest {
  envName?: string;
}

export interface DelegatedUsersPostRequest {
  userId?: number;
  envName?: string;
}

/**
 * no description
 */
export class DelegatedUsersApi extends BaseAPI {
  /**
   */
  delegatedUsersDelete({
    userId,
    envName
  }: DelegatedUsersDeleteRequest): Observable<boolean>;
  delegatedUsersDelete(
    { userId, envName }: DelegatedUsersDeleteRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<boolean>>;
  delegatedUsersDelete(
    { userId, envName }: DelegatedUsersDeleteRequest,
    opts?: OperationOpts
  ): Observable<boolean | AjaxResponse<boolean>> {
    const query: HttpQuery = {};

    if (userId != null) {
      query['userId'] = userId;
    }
    if (envName != null) {
      query['envName'] = envName;
    }

    return this.request<boolean>(
      {
        url: '/DelegatedUsers',
        method: 'DELETE',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  delegatedUsersGetUnallocatedUsersGet({
    envName
  }: DelegatedUsersGetUnallocatedUsersGetRequest): Observable<
    Array<UserApiModel>
  >;
  delegatedUsersGetUnallocatedUsersGet(
    { envName }: DelegatedUsersGetUnallocatedUsersGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<UserApiModel>>>;
  delegatedUsersGetUnallocatedUsersGet(
    { envName }: DelegatedUsersGetUnallocatedUsersGetRequest,
    opts?: OperationOpts
  ): Observable<Array<UserApiModel> | AjaxResponse<Array<UserApiModel>>> {
    const query: HttpQuery = {};

    if (envName != null) {
      query['envName'] = envName;
    }

    return this.request<Array<UserApiModel>>(
      {
        url: '/DelegatedUsers/GetUnallocatedUsers',
        method: 'GET',
        query
      },
      opts?.responseOpts
    );
  }

  /**
   */
  delegatedUsersPost({
    userId,
    envName
  }: DelegatedUsersPostRequest): Observable<UserApiModel>;
  delegatedUsersPost(
    { userId, envName }: DelegatedUsersPostRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<UserApiModel>>;
  delegatedUsersPost(
    { userId, envName }: DelegatedUsersPostRequest,
    opts?: OperationOpts
  ): Observable<UserApiModel | AjaxResponse<UserApiModel>> {
    const query: HttpQuery = {};

    if (userId != null) {
      query['userId'] = userId;
    }
    if (envName != null) {
      query['envName'] = envName;
    }

    return this.request<UserApiModel>(
      {
        url: '/DelegatedUsers',
        method: 'POST',
        query
      },
      opts?.responseOpts
    );
  }
}
