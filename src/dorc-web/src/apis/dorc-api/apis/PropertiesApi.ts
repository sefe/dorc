// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    PropertyApiModel,
    Response,
} from '../models';

export interface ApiPropertiesDeleteRequest {
    requestBody?: Array<string>;
}

export interface ApiPropertiesIdidGetRequest {
    id: string;
}

export interface ApiPropertiesPostRequest {
    propertyApiModel?: Array<PropertyApiModel>;
}

export interface ApiPropertiesPutRequest {
    requestBody?: { [key: string]: PropertyApiModel; };
}

export interface PropertiesDeleteRequest {
    requestBody?: Array<string>;
}

export interface PropertiesIdidGetRequest {
    id: string;
}

export interface PropertiesPostRequest {
    propertyApiModel?: Array<PropertyApiModel>;
}

export interface PropertiesPutRequest {
    requestBody?: { [key: string]: PropertyApiModel; };
}

/**
 * no description
 */
export class PropertiesApi extends BaseAPI {

    /**
     */
    apiPropertiesDelete({ requestBody }: ApiPropertiesDeleteRequest): Observable<Array<Response>>
    apiPropertiesDelete({ requestBody }: ApiPropertiesDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Response>>>
    apiPropertiesDelete({ requestBody }: ApiPropertiesDeleteRequest, opts?: OperationOpts): Observable<Array<Response> | AjaxResponse<Array<Response>>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Response>>({
            url: '/api/Properties',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     */
    apiPropertiesGet(): Observable<Array<PropertyApiModel>>
    apiPropertiesGet(opts?: OperationOpts): Observable<AjaxResponse<Array<PropertyApiModel>>>
    apiPropertiesGet(opts?: OperationOpts): Observable<Array<PropertyApiModel> | AjaxResponse<Array<PropertyApiModel>>> {
        return this.request<Array<PropertyApiModel>>({
            url: '/api/Properties',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    apiPropertiesIdidGet({ id }: ApiPropertiesIdidGetRequest): Observable<PropertyApiModel>
    apiPropertiesIdidGet({ id }: ApiPropertiesIdidGetRequest, opts?: OperationOpts): Observable<AjaxResponse<PropertyApiModel>>
    apiPropertiesIdidGet({ id }: ApiPropertiesIdidGetRequest, opts?: OperationOpts): Observable<PropertyApiModel | AjaxResponse<PropertyApiModel>> {
        throwIfNullOrUndefined(id, 'id', 'apiPropertiesIdidGet');

        return this.request<PropertyApiModel>({
            url: '/api/Properties/id={id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    apiPropertiesPost({ propertyApiModel }: ApiPropertiesPostRequest): Observable<Array<Response>>
    apiPropertiesPost({ propertyApiModel }: ApiPropertiesPostRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Response>>>
    apiPropertiesPost({ propertyApiModel }: ApiPropertiesPostRequest, opts?: OperationOpts): Observable<Array<Response> | AjaxResponse<Array<Response>>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Response>>({
            url: '/api/Properties',
            method: 'POST',
            headers,
            body: propertyApiModel,
        }, opts?.responseOpts);
    };

    /**
     */
    apiPropertiesPut({ requestBody }: ApiPropertiesPutRequest): Observable<Array<Response>>
    apiPropertiesPut({ requestBody }: ApiPropertiesPutRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Response>>>
    apiPropertiesPut({ requestBody }: ApiPropertiesPutRequest, opts?: OperationOpts): Observable<Array<Response> | AjaxResponse<Array<Response>>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Response>>({
            url: '/api/Properties',
            method: 'PUT',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     */
    propertiesDelete({ requestBody }: PropertiesDeleteRequest): Observable<Array<Response>>
    propertiesDelete({ requestBody }: PropertiesDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Response>>>
    propertiesDelete({ requestBody }: PropertiesDeleteRequest, opts?: OperationOpts): Observable<Array<Response> | AjaxResponse<Array<Response>>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Response>>({
            url: '/Properties',
            method: 'DELETE',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

    /**
     */
    propertiesGet(): Observable<Array<PropertyApiModel>>
    propertiesGet(opts?: OperationOpts): Observable<AjaxResponse<Array<PropertyApiModel>>>
    propertiesGet(opts?: OperationOpts): Observable<Array<PropertyApiModel> | AjaxResponse<Array<PropertyApiModel>>> {
        return this.request<Array<PropertyApiModel>>({
            url: '/Properties',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    propertiesIdidGet({ id }: PropertiesIdidGetRequest): Observable<PropertyApiModel>
    propertiesIdidGet({ id }: PropertiesIdidGetRequest, opts?: OperationOpts): Observable<AjaxResponse<PropertyApiModel>>
    propertiesIdidGet({ id }: PropertiesIdidGetRequest, opts?: OperationOpts): Observable<PropertyApiModel | AjaxResponse<PropertyApiModel>> {
        throwIfNullOrUndefined(id, 'id', 'propertiesIdidGet');

        return this.request<PropertyApiModel>({
            url: '/Properties/id={id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    propertiesPost({ propertyApiModel }: PropertiesPostRequest): Observable<Array<Response>>
    propertiesPost({ propertyApiModel }: PropertiesPostRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Response>>>
    propertiesPost({ propertyApiModel }: PropertiesPostRequest, opts?: OperationOpts): Observable<Array<Response> | AjaxResponse<Array<Response>>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Response>>({
            url: '/Properties',
            method: 'POST',
            headers,
            body: propertyApiModel,
        }, opts?.responseOpts);
    };

    /**
     */
    propertiesPut({ requestBody }: PropertiesPutRequest): Observable<Array<Response>>
    propertiesPut({ requestBody }: PropertiesPutRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Response>>>
    propertiesPut({ requestBody }: PropertiesPutRequest, opts?: OperationOpts): Observable<Array<Response> | AjaxResponse<Array<Response>>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Response>>({
            url: '/Properties',
            method: 'PUT',
            headers,
            body: requestBody,
        }, opts?.responseOpts);
    };

}
