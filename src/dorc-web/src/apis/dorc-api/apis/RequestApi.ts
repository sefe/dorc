// tslint:disable
/**
 * Dorc.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DeployArtefactDto,
    DeployComponentDto,
    RequestDto,
    RequestStatusDto,
} from '../models';

export interface RequestBuildDefinitionsGetRequest {
    projectId?: number;
}

export interface RequestBuildsGetRequest {
    projectId?: number;
    environment?: string;
    buildDefinitionName?: string;
}

export interface RequestCancelPutRequest {
    requestId?: number;
}

export interface RequestComponentsGetRequest {
    projectId?: number;
    parentId?: number;
}

export interface RequestGetRequest {
    id?: number;
}

export interface RequestPostRequest {
    requestDto?: RequestDto;
}

export interface RequestRestartPostRequest {
    requestId?: number;
}

/**
 * no description
 */
export class RequestApi extends BaseAPI {

    /**
     */
    requestBuildDefinitionsGet({ projectId }: RequestBuildDefinitionsGetRequest): Observable<Array<DeployArtefactDto>>
    requestBuildDefinitionsGet({ projectId }: RequestBuildDefinitionsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DeployArtefactDto>>>
    requestBuildDefinitionsGet({ projectId }: RequestBuildDefinitionsGetRequest, opts?: OperationOpts): Observable<Array<DeployArtefactDto> | AjaxResponse<Array<DeployArtefactDto>>> {

        const query: HttpQuery = {};

        if (projectId != null) { query['projectId'] = projectId; }

        return this.request<Array<DeployArtefactDto>>({
            url: '/Request/BuildDefinitions',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestBuildsGet({ projectId, environment, buildDefinitionName }: RequestBuildsGetRequest): Observable<Array<DeployArtefactDto>>
    requestBuildsGet({ projectId, environment, buildDefinitionName }: RequestBuildsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DeployArtefactDto>>>
    requestBuildsGet({ projectId, environment, buildDefinitionName }: RequestBuildsGetRequest, opts?: OperationOpts): Observable<Array<DeployArtefactDto> | AjaxResponse<Array<DeployArtefactDto>>> {

        const query: HttpQuery = {};

        if (projectId != null) { query['projectId'] = projectId; }
        if (environment != null) { query['environment'] = environment; }
        if (buildDefinitionName != null) { query['buildDefinitionName'] = buildDefinitionName; }

        return this.request<Array<DeployArtefactDto>>({
            url: '/Request/Builds',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestCancelPut({ requestId }: RequestCancelPutRequest): Observable<RequestStatusDto>
    requestCancelPut({ requestId }: RequestCancelPutRequest, opts?: OperationOpts): Observable<AjaxResponse<RequestStatusDto>>
    requestCancelPut({ requestId }: RequestCancelPutRequest, opts?: OperationOpts): Observable<RequestStatusDto | AjaxResponse<RequestStatusDto>> {

        const query: HttpQuery = {};

        if (requestId != null) { query['requestId'] = requestId; }

        return this.request<RequestStatusDto>({
            url: '/Request/cancel',
            method: 'PUT',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestComponentsGet({ projectId, parentId }: RequestComponentsGetRequest): Observable<Array<DeployComponentDto>>
    requestComponentsGet({ projectId, parentId }: RequestComponentsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DeployComponentDto>>>
    requestComponentsGet({ projectId, parentId }: RequestComponentsGetRequest, opts?: OperationOpts): Observable<Array<DeployComponentDto> | AjaxResponse<Array<DeployComponentDto>>> {

        const query: HttpQuery = {};

        if (projectId != null) { query['projectId'] = projectId; }
        if (parentId != null) { query['parentId'] = parentId; }

        return this.request<Array<DeployComponentDto>>({
            url: '/Request/Components',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestGet({ id }: RequestGetRequest): Observable<RequestStatusDto>
    requestGet({ id }: RequestGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RequestStatusDto>>
    requestGet({ id }: RequestGetRequest, opts?: OperationOpts): Observable<RequestStatusDto | AjaxResponse<RequestStatusDto>> {

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }

        return this.request<RequestStatusDto>({
            url: '/Request',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    requestPost({ requestDto }: RequestPostRequest): Observable<RequestStatusDto>
    requestPost({ requestDto }: RequestPostRequest, opts?: OperationOpts): Observable<AjaxResponse<RequestStatusDto>>
    requestPost({ requestDto }: RequestPostRequest, opts?: OperationOpts): Observable<RequestStatusDto | AjaxResponse<RequestStatusDto>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RequestStatusDto>({
            url: '/Request',
            method: 'POST',
            headers,
            body: requestDto,
        }, opts?.responseOpts);
    };

    /**
     */
    requestRestartPost({ requestId }: RequestRestartPostRequest): Observable<RequestStatusDto>
    requestRestartPost({ requestId }: RequestRestartPostRequest, opts?: OperationOpts): Observable<AjaxResponse<RequestStatusDto>>
    requestRestartPost({ requestId }: RequestRestartPostRequest, opts?: OperationOpts): Observable<RequestStatusDto | AjaxResponse<RequestStatusDto>> {

        const query: HttpQuery = {};

        if (requestId != null) { query['requestId'] = requestId; }

        return this.request<RequestStatusDto>({
            url: '/Request/restart',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

}
