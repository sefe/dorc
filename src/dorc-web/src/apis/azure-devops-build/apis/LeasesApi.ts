// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';
import type {
  NewRetentionLease,
  RetentionLease,
  RetentionLeaseUpdate
} from '../models';

export interface LeasesAddRequest {
  organization: string;
  project: string;
  apiVersion: string;
  body: Array<NewRetentionLease>;
}

export interface LeasesDeleteRequest {
  organization: string;
  project: string;
  ids: string;
  apiVersion: string;
}

export interface LeasesGetRequest {
  organization: string;
  project: string;
  leaseId: number;
  apiVersion: string;
}

export interface LeasesGetRetentionLeasesByMinimalRetentionLeasesRequest {
  organization: string;
  project: string;
  leasesToFetch: string;
  apiVersion: string;
}

export interface LeasesUpdateRequest {
  organization: string;
  project: string;
  leaseId: number;
  apiVersion: string;
  body: RetentionLeaseUpdate;
}

/**
 * no description
 */
export class LeasesApi extends BaseAPI {
  /**
   * Adds new leases for pipeline runs.
   */
  leasesAdd({
    organization,
    project,
    apiVersion,
    body
  }: LeasesAddRequest): Observable<Array<RetentionLease>>;
  leasesAdd(
    { organization, project, apiVersion, body }: LeasesAddRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<RetentionLease>>>;
  leasesAdd(
    { organization, project, apiVersion, body }: LeasesAddRequest,
    opts?: OperationOpts
  ): Observable<Array<RetentionLease> | AjaxResponse<Array<RetentionLease>>> {
    throwIfNullOrUndefined(organization, 'organization', 'leasesAdd');
    throwIfNullOrUndefined(project, 'project', 'leasesAdd');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'leasesAdd');
    throwIfNullOrUndefined(body, 'body', 'leasesAdd');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<Array<RetentionLease>>(
      {
        url: '/{organization}/{project}/_apis/build/retention/leases'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project)),
        method: 'POST',
        headers,
        query,
        body: body
      },
      opts?.responseOpts
    );
  }

  /**
   * Removes specific retention leases.
   */
  leasesDelete({
    organization,
    project,
    ids,
    apiVersion
  }: LeasesDeleteRequest): Observable<void>;
  leasesDelete(
    { organization, project, ids, apiVersion }: LeasesDeleteRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>>;
  leasesDelete(
    { organization, project, ids, apiVersion }: LeasesDeleteRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>> {
    throwIfNullOrUndefined(organization, 'organization', 'leasesDelete');
    throwIfNullOrUndefined(project, 'project', 'leasesDelete');
    throwIfNullOrUndefined(ids, 'ids', 'leasesDelete');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'leasesDelete');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      ids: ids,
      'api-version': apiVersion
    };

    return this.request<void>(
      {
        url: '/{organization}/{project}/_apis/build/retention/leases'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project)),
        method: 'DELETE',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Returns the details of the retention lease given a lease id.
   */
  leasesGet({
    organization,
    project,
    leaseId,
    apiVersion
  }: LeasesGetRequest): Observable<RetentionLease>;
  leasesGet(
    { organization, project, leaseId, apiVersion }: LeasesGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<RetentionLease>>;
  leasesGet(
    { organization, project, leaseId, apiVersion }: LeasesGetRequest,
    opts?: OperationOpts
  ): Observable<RetentionLease | AjaxResponse<RetentionLease>> {
    throwIfNullOrUndefined(organization, 'organization', 'leasesGet');
    throwIfNullOrUndefined(project, 'project', 'leasesGet');
    throwIfNullOrUndefined(leaseId, 'leaseId', 'leasesGet');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'leasesGet');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<RetentionLease>(
      {
        url: '/{organization}/{project}/_apis/build/retention/leases/{leaseId}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{leaseId}', encodeURI(leaseId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Returns any leases matching the specified MinimalRetentionLeases
   */
  leasesGetRetentionLeasesByMinimalRetentionLeases({
    organization,
    project,
    leasesToFetch,
    apiVersion
  }: LeasesGetRetentionLeasesByMinimalRetentionLeasesRequest): Observable<
    Array<RetentionLease>
  >;
  leasesGetRetentionLeasesByMinimalRetentionLeases(
    {
      organization,
      project,
      leasesToFetch,
      apiVersion
    }: LeasesGetRetentionLeasesByMinimalRetentionLeasesRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<RetentionLease>>>;
  leasesGetRetentionLeasesByMinimalRetentionLeases(
    {
      organization,
      project,
      leasesToFetch,
      apiVersion
    }: LeasesGetRetentionLeasesByMinimalRetentionLeasesRequest,
    opts?: OperationOpts
  ): Observable<Array<RetentionLease> | AjaxResponse<Array<RetentionLease>>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'leasesGetRetentionLeasesByMinimalRetentionLeases'
    );
    throwIfNullOrUndefined(
      project,
      'project',
      'leasesGetRetentionLeasesByMinimalRetentionLeases'
    );
    throwIfNullOrUndefined(
      leasesToFetch,
      'leasesToFetch',
      'leasesGetRetentionLeasesByMinimalRetentionLeases'
    );
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'leasesGetRetentionLeasesByMinimalRetentionLeases'
    );

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      leasesToFetch: leasesToFetch,
      'api-version': apiVersion
    };

    return this.request<Array<RetentionLease>>(
      {
        url: '/{organization}/{project}/_apis/build/retention/leases'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Updates the duration or pipeline protection status of a retention lease.
   */
  leasesUpdate({
    organization,
    project,
    leaseId,
    apiVersion,
    body
  }: LeasesUpdateRequest): Observable<RetentionLease>;
  leasesUpdate(
    { organization, project, leaseId, apiVersion, body }: LeasesUpdateRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<RetentionLease>>;
  leasesUpdate(
    { organization, project, leaseId, apiVersion, body }: LeasesUpdateRequest,
    opts?: OperationOpts
  ): Observable<RetentionLease | AjaxResponse<RetentionLease>> {
    throwIfNullOrUndefined(organization, 'organization', 'leasesUpdate');
    throwIfNullOrUndefined(project, 'project', 'leasesUpdate');
    throwIfNullOrUndefined(leaseId, 'leaseId', 'leasesUpdate');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'leasesUpdate');
    throwIfNullOrUndefined(body, 'body', 'leasesUpdate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<RetentionLease>(
      {
        url: '/{organization}/{project}/_apis/build/retention/leases/{leaseId}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{leaseId}', encodeURI(leaseId)),
        method: 'PATCH',
        headers,
        query,
        body: body
      },
      opts?.responseOpts
    );
  }
}
