// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';

export interface BadgeGetRequest {
  organization: string;
  project: string;
  definitionId: number;
  apiVersion: string;
  branchName?: string;
}

export interface BadgeGetBuildBadgeDataRequest {
  organization: string;
  project: string;
  repoType: string;
  apiVersion: string;
  repoId?: string;
  branchName?: string;
}

/**
 * no description
 */
export class BadgeApi extends BaseAPI {
  /**
   * This endpoint is deprecated. Please see the Build Status REST endpoint.
   */
  badgeGet({
    organization,
    project,
    definitionId,
    apiVersion,
    branchName
  }: BadgeGetRequest): Observable<string>;
  badgeGet(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      branchName
    }: BadgeGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<string>>;
  badgeGet(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      branchName
    }: BadgeGetRequest,
    opts?: OperationOpts
  ): Observable<string | AjaxResponse<string>> {
    throwIfNullOrUndefined(organization, 'organization', 'badgeGet');
    throwIfNullOrUndefined(project, 'project', 'badgeGet');
    throwIfNullOrUndefined(definitionId, 'definitionId', 'badgeGet');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'badgeGet');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    if (branchName != null) {
      query['branchName'] = branchName;
    }

    return this.request<string>(
      {
        url: '/{organization}/_apis/public/build/definitions/{project}/{definitionId}/badge'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{definitionId}', encodeURI(definitionId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets a badge that indicates the status of the most recent build for the specified branch.
   */
  badgeGetBuildBadgeData({
    organization,
    project,
    repoType,
    apiVersion,
    repoId,
    branchName
  }: BadgeGetBuildBadgeDataRequest): Observable<string>;
  badgeGetBuildBadgeData(
    {
      organization,
      project,
      repoType,
      apiVersion,
      repoId,
      branchName
    }: BadgeGetBuildBadgeDataRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<string>>;
  badgeGetBuildBadgeData(
    {
      organization,
      project,
      repoType,
      apiVersion,
      repoId,
      branchName
    }: BadgeGetBuildBadgeDataRequest,
    opts?: OperationOpts
  ): Observable<string | AjaxResponse<string>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'badgeGetBuildBadgeData'
    );
    throwIfNullOrUndefined(project, 'project', 'badgeGetBuildBadgeData');
    throwIfNullOrUndefined(repoType, 'repoType', 'badgeGetBuildBadgeData');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'badgeGetBuildBadgeData');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    if (repoId != null) {
      query['repoId'] = repoId;
    }
    if (branchName != null) {
      query['branchName'] = branchName;
    }

    return this.request<string>(
      {
        url: '/{organization}/{project}/_apis/build/repos/{repoType}/badge'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{repoType}', encodeURI(repoType)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }
}
