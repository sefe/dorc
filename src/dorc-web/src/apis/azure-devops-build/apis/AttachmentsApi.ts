// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';
import type { Attachment } from '../models';

export interface AttachmentsGetRequest {
  organization: string;
  project: string;
  buildId: number;
  timelineId: string;
  recordId: string;
  type: string;
  name: string;
  apiVersion: string;
}

export interface AttachmentsListRequest {
  organization: string;
  project: string;
  buildId: number;
  type: string;
  apiVersion: string;
}

/**
 * no description
 */
export class AttachmentsApi extends BaseAPI {
  /**
   * Gets a specific attachment.
   */
  attachmentsGet({
    organization,
    project,
    buildId,
    timelineId,
    recordId,
    type,
    name,
    apiVersion
  }: AttachmentsGetRequest): Observable<string>;
  attachmentsGet(
    {
      organization,
      project,
      buildId,
      timelineId,
      recordId,
      type,
      name,
      apiVersion
    }: AttachmentsGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<string>>;
  attachmentsGet(
    {
      organization,
      project,
      buildId,
      timelineId,
      recordId,
      type,
      name,
      apiVersion
    }: AttachmentsGetRequest,
    opts?: OperationOpts
  ): Observable<string | AjaxResponse<string>> {
    throwIfNullOrUndefined(organization, 'organization', 'attachmentsGet');
    throwIfNullOrUndefined(project, 'project', 'attachmentsGet');
    throwIfNullOrUndefined(buildId, 'buildId', 'attachmentsGet');
    throwIfNullOrUndefined(timelineId, 'timelineId', 'attachmentsGet');
    throwIfNullOrUndefined(recordId, 'recordId', 'attachmentsGet');
    throwIfNullOrUndefined(type, 'type', 'attachmentsGet');
    throwIfNullOrUndefined(name, 'name', 'attachmentsGet');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'attachmentsGet');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<string>(
      {
        url: '/{organization}/{project}/_apis/build/builds/{buildId}/{timelineId}/{recordId}/attachments/{type}/{name}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{buildId}', encodeURI(buildId))
          .replace('{timelineId}', encodeURI(timelineId))
          .replace('{recordId}', encodeURI(recordId))
          .replace('{type}', encodeURI(type))
          .replace('{name}', encodeURI(name)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets the list of attachments of a specific type that are associated with a build.
   */
  attachmentsList({
    organization,
    project,
    buildId,
    type,
    apiVersion
  }: AttachmentsListRequest): Observable<Array<Attachment>>;
  attachmentsList(
    {
      organization,
      project,
      buildId,
      type,
      apiVersion
    }: AttachmentsListRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<Attachment>>>;
  attachmentsList(
    {
      organization,
      project,
      buildId,
      type,
      apiVersion
    }: AttachmentsListRequest,
    opts?: OperationOpts
  ): Observable<Array<Attachment> | AjaxResponse<Array<Attachment>>> {
    throwIfNullOrUndefined(organization, 'organization', 'attachmentsList');
    throwIfNullOrUndefined(project, 'project', 'attachmentsList');
    throwIfNullOrUndefined(buildId, 'buildId', 'attachmentsList');
    throwIfNullOrUndefined(type, 'type', 'attachmentsList');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'attachmentsList');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<Array<Attachment>>(
      {
        url: '/{organization}/{project}/_apis/build/builds/{buildId}/attachments/{type}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{buildId}', encodeURI(buildId))
          .replace('{type}', encodeURI(type)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }
}
