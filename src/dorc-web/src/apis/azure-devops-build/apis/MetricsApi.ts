// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';
import type { BuildMetric } from '../models';

export interface MetricsGetDefinitionMetricsRequest {
  organization: string;
  project: string;
  definitionId: number;
  apiVersion: string;
  minMetricsTime?: string;
}

export interface MetricsGetProjectMetricsRequest {
  organization: string;
  project: string;
  metricAggregationType: string;
  apiVersion: string;
  minMetricsTime?: string;
}

/**
 * no description
 */
export class MetricsApi extends BaseAPI {
  /**
   * Gets build metrics for a definition.
   */
  metricsGetDefinitionMetrics({
    organization,
    project,
    definitionId,
    apiVersion,
    minMetricsTime
  }: MetricsGetDefinitionMetricsRequest): Observable<Array<BuildMetric>>;
  metricsGetDefinitionMetrics(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      minMetricsTime
    }: MetricsGetDefinitionMetricsRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<BuildMetric>>>;
  metricsGetDefinitionMetrics(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      minMetricsTime
    }: MetricsGetDefinitionMetricsRequest,
    opts?: OperationOpts
  ): Observable<Array<BuildMetric> | AjaxResponse<Array<BuildMetric>>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'metricsGetDefinitionMetrics'
    );
    throwIfNullOrUndefined(project, 'project', 'metricsGetDefinitionMetrics');
    throwIfNullOrUndefined(
      definitionId,
      'definitionId',
      'metricsGetDefinitionMetrics'
    );
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'metricsGetDefinitionMetrics'
    );

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    if (minMetricsTime != null) {
      query['minMetricsTime'] = (minMetricsTime as any).toISOString();
    }

    return this.request<Array<BuildMetric>>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/{definitionId}/metrics'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{definitionId}', encodeURI(definitionId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets build metrics for a project.
   */
  metricsGetProjectMetrics({
    organization,
    project,
    metricAggregationType,
    apiVersion,
    minMetricsTime
  }: MetricsGetProjectMetricsRequest): Observable<Array<BuildMetric>>;
  metricsGetProjectMetrics(
    {
      organization,
      project,
      metricAggregationType,
      apiVersion,
      minMetricsTime
    }: MetricsGetProjectMetricsRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<BuildMetric>>>;
  metricsGetProjectMetrics(
    {
      organization,
      project,
      metricAggregationType,
      apiVersion,
      minMetricsTime
    }: MetricsGetProjectMetricsRequest,
    opts?: OperationOpts
  ): Observable<Array<BuildMetric> | AjaxResponse<Array<BuildMetric>>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'metricsGetProjectMetrics'
    );
    throwIfNullOrUndefined(project, 'project', 'metricsGetProjectMetrics');
    throwIfNullOrUndefined(
      metricAggregationType,
      'metricAggregationType',
      'metricsGetProjectMetrics'
    );
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'metricsGetProjectMetrics'
    );

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    if (minMetricsTime != null) {
      query['minMetricsTime'] = (minMetricsTime as any).toISOString();
    }

    return this.request<Array<BuildMetric>>(
      {
        url: '/{organization}/{project}/_apis/build/metrics/{metricAggregationType}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{metricAggregationType}', encodeURI(metricAggregationType)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }
}
