// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';
import type { BuildDefinitionTemplate } from '../models';

export interface TemplatesDeleteRequest {
  organization: string;
  project: string;
  templateId: string;
  apiVersion: string;
}

export interface TemplatesGetRequest {
  organization: string;
  project: string;
  templateId: string;
  apiVersion: string;
}

export interface TemplatesListRequest {
  organization: string;
  project: string;
  apiVersion: string;
}

export interface TemplatesSaveTemplateRequest {
  organization: string;
  project: string;
  templateId: string;
  apiVersion: string;
  body: BuildDefinitionTemplate;
}

/**
 * no description
 */
export class TemplatesApi extends BaseAPI {
  /**
   * Deletes a build definition template.
   */
  templatesDelete({
    organization,
    project,
    templateId,
    apiVersion
  }: TemplatesDeleteRequest): Observable<void>;
  templatesDelete(
    { organization, project, templateId, apiVersion }: TemplatesDeleteRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>>;
  templatesDelete(
    { organization, project, templateId, apiVersion }: TemplatesDeleteRequest,
    opts?: OperationOpts
  ): Observable<void | AjaxResponse<void>> {
    throwIfNullOrUndefined(organization, 'organization', 'templatesDelete');
    throwIfNullOrUndefined(project, 'project', 'templatesDelete');
    throwIfNullOrUndefined(templateId, 'templateId', 'templatesDelete');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'templatesDelete');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<void>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/templates/{templateId}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{templateId}', encodeURI(templateId)),
        method: 'DELETE',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets a specific build definition template.
   */
  templatesGet({
    organization,
    project,
    templateId,
    apiVersion
  }: TemplatesGetRequest): Observable<BuildDefinitionTemplate>;
  templatesGet(
    { organization, project, templateId, apiVersion }: TemplatesGetRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<BuildDefinitionTemplate>>;
  templatesGet(
    { organization, project, templateId, apiVersion }: TemplatesGetRequest,
    opts?: OperationOpts
  ): Observable<
    BuildDefinitionTemplate | AjaxResponse<BuildDefinitionTemplate>
  > {
    throwIfNullOrUndefined(organization, 'organization', 'templatesGet');
    throwIfNullOrUndefined(project, 'project', 'templatesGet');
    throwIfNullOrUndefined(templateId, 'templateId', 'templatesGet');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'templatesGet');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<BuildDefinitionTemplate>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/templates/{templateId}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{templateId}', encodeURI(templateId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets all definition templates.
   */
  templatesList({
    organization,
    project,
    apiVersion
  }: TemplatesListRequest): Observable<Array<BuildDefinitionTemplate>>;
  templatesList(
    { organization, project, apiVersion }: TemplatesListRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<BuildDefinitionTemplate>>>;
  templatesList(
    { organization, project, apiVersion }: TemplatesListRequest,
    opts?: OperationOpts
  ): Observable<
    | Array<BuildDefinitionTemplate>
    | AjaxResponse<Array<BuildDefinitionTemplate>>
  > {
    throwIfNullOrUndefined(organization, 'organization', 'templatesList');
    throwIfNullOrUndefined(project, 'project', 'templatesList');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'templatesList');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<Array<BuildDefinitionTemplate>>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/templates'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Updates an existing build definition template.
   */
  templatesSaveTemplate({
    organization,
    project,
    templateId,
    apiVersion,
    body
  }: TemplatesSaveTemplateRequest): Observable<BuildDefinitionTemplate>;
  templatesSaveTemplate(
    {
      organization,
      project,
      templateId,
      apiVersion,
      body
    }: TemplatesSaveTemplateRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<BuildDefinitionTemplate>>;
  templatesSaveTemplate(
    {
      organization,
      project,
      templateId,
      apiVersion,
      body
    }: TemplatesSaveTemplateRequest,
    opts?: OperationOpts
  ): Observable<
    BuildDefinitionTemplate | AjaxResponse<BuildDefinitionTemplate>
  > {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'templatesSaveTemplate'
    );
    throwIfNullOrUndefined(project, 'project', 'templatesSaveTemplate');
    throwIfNullOrUndefined(templateId, 'templateId', 'templatesSaveTemplate');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'templatesSaveTemplate');
    throwIfNullOrUndefined(body, 'body', 'templatesSaveTemplate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<BuildDefinitionTemplate>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/templates/{templateId}'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{templateId}', encodeURI(templateId)),
        method: 'PUT',
        headers,
        query,
        body: body
      },
      opts?.responseOpts
    );
  }
}
