// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';
import type { JsonPatchDocument, PropertiesCollection } from '../models';

export interface PropertiesGetBuildPropertiesRequest {
  organization: string;
  project: string;
  buildId: number;
  apiVersion: string;
  filter?: string;
}

export interface PropertiesGetDefinitionPropertiesRequest {
  organization: string;
  project: string;
  definitionId: number;
  apiVersion: string;
  filter?: string;
}

export interface PropertiesUpdateBuildPropertiesRequest {
  organization: string;
  project: string;
  buildId: number;
  apiVersion: string;
  body: JsonPatchDocument | null;
}

export interface PropertiesUpdateDefinitionPropertiesRequest {
  organization: string;
  project: string;
  definitionId: number;
  apiVersion: string;
  body: JsonPatchDocument | null;
}

/**
 * no description
 */
export class PropertiesApi extends BaseAPI {
  /**
   * Gets properties for a build.
   */
  propertiesGetBuildProperties({
    organization,
    project,
    buildId,
    apiVersion,
    filter
  }: PropertiesGetBuildPropertiesRequest): Observable<PropertiesCollection>;
  propertiesGetBuildProperties(
    {
      organization,
      project,
      buildId,
      apiVersion,
      filter
    }: PropertiesGetBuildPropertiesRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<PropertiesCollection>>;
  propertiesGetBuildProperties(
    {
      organization,
      project,
      buildId,
      apiVersion,
      filter
    }: PropertiesGetBuildPropertiesRequest,
    opts?: OperationOpts
  ): Observable<PropertiesCollection | AjaxResponse<PropertiesCollection>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'propertiesGetBuildProperties'
    );
    throwIfNullOrUndefined(project, 'project', 'propertiesGetBuildProperties');
    throwIfNullOrUndefined(buildId, 'buildId', 'propertiesGetBuildProperties');
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'propertiesGetBuildProperties'
    );

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    if (filter != null) {
      query['filter'] = filter;
    }

    return this.request<PropertiesCollection>(
      {
        url: '/{organization}/{project}/_apis/build/builds/{buildId}/properties'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{buildId}', encodeURI(buildId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets properties for a definition.
   */
  propertiesGetDefinitionProperties({
    organization,
    project,
    definitionId,
    apiVersion,
    filter
  }: PropertiesGetDefinitionPropertiesRequest): Observable<PropertiesCollection>;
  propertiesGetDefinitionProperties(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      filter
    }: PropertiesGetDefinitionPropertiesRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<PropertiesCollection>>;
  propertiesGetDefinitionProperties(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      filter
    }: PropertiesGetDefinitionPropertiesRequest,
    opts?: OperationOpts
  ): Observable<PropertiesCollection | AjaxResponse<PropertiesCollection>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'propertiesGetDefinitionProperties'
    );
    throwIfNullOrUndefined(
      project,
      'project',
      'propertiesGetDefinitionProperties'
    );
    throwIfNullOrUndefined(
      definitionId,
      'definitionId',
      'propertiesGetDefinitionProperties'
    );
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'propertiesGetDefinitionProperties'
    );

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    if (filter != null) {
      query['filter'] = filter;
    }

    return this.request<PropertiesCollection>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/{definitionId}/properties'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{definitionId}', encodeURI(definitionId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }

  /**
   * Updates properties for a build.
   */
  propertiesUpdateBuildProperties({
    organization,
    project,
    buildId,
    apiVersion,
    body
  }: PropertiesUpdateBuildPropertiesRequest): Observable<PropertiesCollection>;
  propertiesUpdateBuildProperties(
    {
      organization,
      project,
      buildId,
      apiVersion,
      body
    }: PropertiesUpdateBuildPropertiesRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<PropertiesCollection>>;
  propertiesUpdateBuildProperties(
    {
      organization,
      project,
      buildId,
      apiVersion,
      body
    }: PropertiesUpdateBuildPropertiesRequest,
    opts?: OperationOpts
  ): Observable<PropertiesCollection | AjaxResponse<PropertiesCollection>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'propertiesUpdateBuildProperties'
    );
    throwIfNullOrUndefined(
      project,
      'project',
      'propertiesUpdateBuildProperties'
    );
    throwIfNullOrUndefined(
      buildId,
      'buildId',
      'propertiesUpdateBuildProperties'
    );
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'propertiesUpdateBuildProperties'
    );
    throwIfNullOrUndefined(body, 'body', 'propertiesUpdateBuildProperties');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json-patch+json',
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<PropertiesCollection>(
      {
        url: '/{organization}/{project}/_apis/build/builds/{buildId}/properties'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{buildId}', encodeURI(buildId)),
        method: 'PATCH',
        headers,
        query,
        body: body
      },
      opts?.responseOpts
    );
  }

  /**
   * Updates properties for a definition.
   */
  propertiesUpdateDefinitionProperties({
    organization,
    project,
    definitionId,
    apiVersion,
    body
  }: PropertiesUpdateDefinitionPropertiesRequest): Observable<PropertiesCollection>;
  propertiesUpdateDefinitionProperties(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      body
    }: PropertiesUpdateDefinitionPropertiesRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<PropertiesCollection>>;
  propertiesUpdateDefinitionProperties(
    {
      organization,
      project,
      definitionId,
      apiVersion,
      body
    }: PropertiesUpdateDefinitionPropertiesRequest,
    opts?: OperationOpts
  ): Observable<PropertiesCollection | AjaxResponse<PropertiesCollection>> {
    throwIfNullOrUndefined(
      organization,
      'organization',
      'propertiesUpdateDefinitionProperties'
    );
    throwIfNullOrUndefined(
      project,
      'project',
      'propertiesUpdateDefinitionProperties'
    );
    throwIfNullOrUndefined(
      definitionId,
      'definitionId',
      'propertiesUpdateDefinitionProperties'
    );
    throwIfNullOrUndefined(
      apiVersion,
      'apiVersion',
      'propertiesUpdateDefinitionProperties'
    );
    throwIfNullOrUndefined(
      body,
      'body',
      'propertiesUpdateDefinitionProperties'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json-patch+json',
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<PropertiesCollection>(
      {
        url: '/{organization}/{project}/_apis/build/definitions/{definitionId}/properties'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{definitionId}', encodeURI(definitionId)),
        method: 'PATCH',
        headers,
        query,
        body: body
      },
      opts?.responseOpts
    );
  }
}
