// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import type { HttpHeaders, HttpQuery, OperationOpts } from '../runtime';
import { BaseAPI, encodeURI, throwIfNullOrUndefined } from '../runtime';
import type { BuildArtifact } from '../models';

export interface ArtifactsCreateRequest {
  organization: string;
  project: string;
  buildId: number;
  apiVersion: string;
  body: BuildArtifact;
}

export interface ArtifactsListRequest {
  organization: string;
  project: string;
  buildId: number;
  apiVersion: string;
}

/**
 * no description
 */
export class ArtifactsApi extends BaseAPI {
  /**
   * Associates an artifact with a build.
   */
  artifactsCreate({
    organization,
    project,
    buildId,
    apiVersion,
    body
  }: ArtifactsCreateRequest): Observable<BuildArtifact>;
  artifactsCreate(
    {
      organization,
      project,
      buildId,
      apiVersion,
      body
    }: ArtifactsCreateRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<BuildArtifact>>;
  artifactsCreate(
    {
      organization,
      project,
      buildId,
      apiVersion,
      body
    }: ArtifactsCreateRequest,
    opts?: OperationOpts
  ): Observable<BuildArtifact | AjaxResponse<BuildArtifact>> {
    throwIfNullOrUndefined(organization, 'organization', 'artifactsCreate');
    throwIfNullOrUndefined(project, 'project', 'artifactsCreate');
    throwIfNullOrUndefined(buildId, 'buildId', 'artifactsCreate');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'artifactsCreate');
    throwIfNullOrUndefined(body, 'body', 'artifactsCreate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', [
                    'vso.build_execute'
                  ])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<BuildArtifact>(
      {
        url: '/{organization}/{project}/_apis/build/builds/{buildId}/artifacts'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{buildId}', encodeURI(buildId)),
        method: 'POST',
        headers,
        query,
        body: body
      },
      opts?.responseOpts
    );
  }

  /**
   * Gets all artifacts for a build.
   */
  artifactsList({
    organization,
    project,
    buildId,
    apiVersion
  }: ArtifactsListRequest): Observable<Array<BuildArtifact>>;
  artifactsList(
    { organization, project, buildId, apiVersion }: ArtifactsListRequest,
    opts?: OperationOpts
  ): Observable<AjaxResponse<Array<BuildArtifact>>>;
  artifactsList(
    { organization, project, buildId, apiVersion }: ArtifactsListRequest,
    opts?: OperationOpts
  ): Observable<Array<BuildArtifact> | AjaxResponse<Array<BuildArtifact>>> {
    throwIfNullOrUndefined(organization, 'organization', 'artifactsList');
    throwIfNullOrUndefined(project, 'project', 'artifactsList');
    throwIfNullOrUndefined(buildId, 'buildId', 'artifactsList');
    throwIfNullOrUndefined(apiVersion, 'apiVersion', 'artifactsList');

    const headers: HttpHeaders = {
      // oauth required
      ...(this.configuration.accessToken != null
        ? {
            Authorization:
              typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken('oauth2', ['vso.build'])
                : this.configuration.accessToken
          }
        : undefined)
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      'api-version': apiVersion
    };

    return this.request<Array<BuildArtifact>>(
      {
        url: '/{organization}/{project}/_apis/build/builds/{buildId}/artifacts'
          .replace('{organization}', encodeURI(organization))
          .replace('{project}', encodeURI(project))
          .replace('{buildId}', encodeURI(buildId)),
        method: 'GET',
        headers,
        query
      },
      opts?.responseOpts
    );
  }
}
