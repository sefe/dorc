// tslint:disable
/**
 * Build
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  AgentPoolQueue,
  AgentSpecification,
  BuildController,
  BuildLogReference,
  BuildRepository,
  BuildRequestValidationResult,
  DefinitionReference,
  Demand,
  IdentityRef,
  PropertiesCollection,
  ReferenceLinks,
  TaskOrchestrationPlanReference,
  TeamProjectReference
} from './index';

/**
 * Data representation of a build.
 * @export
 * @interface Build
 */
export interface Build {
  /**
   * @type {ReferenceLinks}
   * @memberof Build
   */
  _links?: ReferenceLinks;
  /**
   * @type {AgentSpecification}
   * @memberof Build
   */
  agentSpecification?: AgentSpecification;
  /**
   * The build number/name of the build.
   * @type {string}
   * @memberof Build
   */
  buildNumber?: string;
  /**
   * The build number revision.
   * @type {number}
   * @memberof Build
   */
  buildNumberRevision?: number;
  /**
   * @type {BuildController}
   * @memberof Build
   */
  controller?: BuildController;
  /**
   * @type {DefinitionReference}
   * @memberof Build
   */
  definition?: DefinitionReference;
  /**
   * Indicates whether the build has been deleted.
   * @type {boolean}
   * @memberof Build
   */
  deleted?: boolean;
  /**
   * @type {IdentityRef}
   * @memberof Build
   */
  deletedBy?: IdentityRef;
  /**
   * The date the build was deleted.
   * @type {string}
   * @memberof Build
   */
  deletedDate?: string;
  /**
   * The description of how the build was deleted.
   * @type {string}
   * @memberof Build
   */
  deletedReason?: string;
  /**
   * A list of demands that represents the agent capabilities required by this build.
   * @type {Array<Demand>}
   * @memberof Build
   */
  demands?: Array<Demand>;
  /**
   * The time that the build was completed.
   * @type {string}
   * @memberof Build
   */
  finishTime?: string;
  /**
   * The ID of the build.
   * @type {number}
   * @memberof Build
   */
  id?: number;
  /**
   * @type {IdentityRef}
   * @memberof Build
   */
  lastChangedBy?: IdentityRef;
  /**
   * The date the build was last changed.
   * @type {string}
   * @memberof Build
   */
  lastChangedDate?: string;
  /**
   * @type {BuildLogReference}
   * @memberof Build
   */
  logs?: BuildLogReference;
  /**
   * @type {TaskOrchestrationPlanReference}
   * @memberof Build
   */
  orchestrationPlan?: TaskOrchestrationPlanReference;
  /**
   * The parameters for the build.
   * @type {string}
   * @memberof Build
   */
  parameters?: string;
  /**
   * Orchestration plans associated with the build (build, cleanup)
   * @type {Array<TaskOrchestrationPlanReference>}
   * @memberof Build
   */
  plans?: Array<TaskOrchestrationPlanReference>;
  /**
   * The build\'s priority.
   * @type {string}
   * @memberof Build
   */
  priority?: BuildPriorityEnum;
  /**
   * @type {TeamProjectReference}
   * @memberof Build
   */
  project?: TeamProjectReference;
  /**
   * @type {PropertiesCollection}
   * @memberof Build
   */
  properties?: PropertiesCollection;
  /**
   * The quality of the xaml build (good, bad, etc.)
   * @type {string}
   * @memberof Build
   */
  quality?: string;
  /**
   * @type {AgentPoolQueue}
   * @memberof Build
   */
  queue?: AgentPoolQueue;
  /**
   * Additional options for queueing the build.
   * @type {string}
   * @memberof Build
   */
  queueOptions?: BuildQueueOptionsEnum;
  /**
   * The current position of the build in the queue.
   * @type {number}
   * @memberof Build
   */
  queuePosition?: number;
  /**
   * The time that the build was queued.
   * @type {string}
   * @memberof Build
   */
  queueTime?: string;
  /**
   * The reason that the build was created.
   * @type {string}
   * @memberof Build
   */
  reason?: BuildReasonEnum;
  /**
   * @type {BuildRepository}
   * @memberof Build
   */
  repository?: BuildRepository;
  /**
   * @type {IdentityRef}
   * @memberof Build
   */
  requestedBy?: IdentityRef;
  /**
   * @type {IdentityRef}
   * @memberof Build
   */
  requestedFor?: IdentityRef;
  /**
   * The build result.
   * @type {string}
   * @memberof Build
   */
  result?: BuildResultEnum;
  /**
   * Indicates whether the build is retained by a release.
   * @type {boolean}
   * @memberof Build
   */
  retainedByRelease?: boolean;
  /**
   * The source branch.
   * @type {string}
   * @memberof Build
   */
  sourceBranch?: string;
  /**
   * The source version.
   * @type {string}
   * @memberof Build
   */
  sourceVersion?: string;
  /**
   * The time that the build was started.
   * @type {string}
   * @memberof Build
   */
  startTime?: string;
  /**
   * The status of the build.
   * @type {string}
   * @memberof Build
   */
  status?: BuildStatusEnum;
  /**
   * @type {Array<string>}
   * @memberof Build
   */
  tags?: Array<string>;
  /**
   * Parameters to template expression evaluation
   * @type {{ [key: string]: string; }}
   * @memberof Build
   */
  templateParameters?: { [key: string]: string };
  /**
   * @type {Build}
   * @memberof Build
   */
  triggeredByBuild?: Build;
  /**
   * Sourceprovider-specific information about what triggered the build
   * @type {{ [key: string]: string; }}
   * @memberof Build
   */
  triggerInfo?: { [key: string]: string };
  /**
   * The URI of the build.
   * @type {string}
   * @memberof Build
   */
  uri?: string;
  /**
   * The REST URL of the build.
   * @type {string}
   * @memberof Build
   */
  url?: string;
  /**
   * @type {Array<BuildRequestValidationResult>}
   * @memberof Build
   */
  validationResults?: Array<BuildRequestValidationResult>;
}

/**
 * @export
 * @enum {string}
 */
export enum BuildPriorityEnum {
  Low = 'low',
  BelowNormal = 'belowNormal',
  Normal = 'normal',
  AboveNormal = 'aboveNormal',
  High = 'high'
}
/**
 * @export
 * @enum {string}
 */
export enum BuildQueueOptionsEnum {
  None = 'none',
  DoNotRun = 'doNotRun'
}
/**
 * @export
 * @enum {string}
 */
export enum BuildReasonEnum {
  None = 'none',
  Manual = 'manual',
  IndividualCi = 'individualCI',
  BatchedCi = 'batchedCI',
  Schedule = 'schedule',
  ScheduleForced = 'scheduleForced',
  UserCreated = 'userCreated',
  ValidateShelveset = 'validateShelveset',
  CheckInShelveset = 'checkInShelveset',
  PullRequest = 'pullRequest',
  BuildCompletion = 'buildCompletion',
  ResourceTrigger = 'resourceTrigger',
  Triggered = 'triggered',
  All = 'all'
}
/**
 * @export
 * @enum {string}
 */
export enum BuildResultEnum {
  None = 'none',
  Succeeded = 'succeeded',
  PartiallySucceeded = 'partiallySucceeded',
  Failed = 'failed',
  Canceled = 'canceled'
}
/**
 * @export
 * @enum {string}
 */
export enum BuildStatusEnum {
  None = 'none',
  InProgress = 'inProgress',
  Completed = 'completed',
  Cancelling = 'cancelling',
  Postponed = 'postponed',
  NotStarted = 'notStarted',
  All = 'all'
}
