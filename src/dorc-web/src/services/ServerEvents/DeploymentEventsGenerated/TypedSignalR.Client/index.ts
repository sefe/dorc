/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { HubConnection, IStreamResult, Subject } from '@microsoft/signalr';
import type { IDeploymentsEventsClient } from './Dorc.Core.Interfaces';
import type { DeploymentRequestEventData, DeploymentResultEventData } from '../Dorc.Core.Events';


// components

export type Disposable = {
    dispose(): void;
}

export type HubProxyFactory<T> = {
    createHubProxy(connection: HubConnection): T;
}

export type ReceiverRegister<T> = {
    register(connection: HubConnection, receiver: T): Disposable;
}

type ReceiverMethod = {
    methodName: string,
    method: (...args: any[]) => void
}

class ReceiverMethodSubscription implements Disposable {

    public constructor(
        private connection: HubConnection,
        private receiverMethod: ReceiverMethod[]) {
    }

    public readonly dispose = () => {
        for (const it of this.receiverMethod) {
            this.connection.off(it.methodName, it.method);
        }
    }
}

// API

export type HubProxyFactoryProvider = {
}

export const getHubProxyFactory = ((hubType: string) => {
}) as HubProxyFactoryProvider;

export type ReceiverRegisterProvider = {
    (receiverType: "IDeploymentsEventsClient"): ReceiverRegister<IDeploymentsEventsClient>;
}

export const getReceiverRegister = ((receiverType: string) => {
    if(receiverType === "IDeploymentsEventsClient") {
        return IDeploymentsEventsClient_Binder.Instance;
    }
}) as ReceiverRegisterProvider;

// HubProxy


// Receiver

class IDeploymentsEventsClient_Binder implements ReceiverRegister<IDeploymentsEventsClient> {

    public static Instance = new IDeploymentsEventsClient_Binder();

    private constructor() {
    }

    public readonly register = (connection: HubConnection, receiver: IDeploymentsEventsClient): Disposable => {

        const __onDeploymentRequestStatusChanged = (...args: [DeploymentRequestEventData]) => receiver.onDeploymentRequestStatusChanged(...args);
        const __onDeploymentRequestStarted = (...args: [DeploymentRequestEventData]) => receiver.onDeploymentRequestStarted(...args);
        const __onDeploymentResultStatusChanged = (...args: [DeploymentResultEventData]) => receiver.onDeploymentResultStatusChanged(...args);

        connection.on("OnDeploymentRequestStatusChanged", __onDeploymentRequestStatusChanged);
        connection.on("OnDeploymentRequestStarted", __onDeploymentRequestStarted);
        connection.on("OnDeploymentResultStatusChanged", __onDeploymentResultStatusChanged);

        const methodList: ReceiverMethod[] = [
            { methodName: "OnDeploymentRequestStatusChanged", method: __onDeploymentRequestStatusChanged },
            { methodName: "OnDeploymentRequestStarted", method: __onDeploymentRequestStarted },
            { methodName: "OnDeploymentResultStatusChanged", method: __onDeploymentResultStatusChanged }
        ]

        return new ReceiverMethodSubscription(connection, methodList);
    }
}

