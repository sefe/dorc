/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Xunit;
using Org.OpenAPITools.Api;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TagsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TagsApiTests : IDisposable
    {
        private TagsApi instance;

        public TagsApiTests()
        {
            instance = new TagsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TagsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TagsApi
            //Assert.IsType<TagsApi>(instance);
        }

        /// <summary>
        /// Test TagsAddBuildTag
        /// </summary>
        [Fact]
        public void TagsAddBuildTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string tag = null;
            //string apiVersion = null;
            //var response = instance.TagsAddBuildTag(organization, project, buildId, tag, apiVersion);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsAddBuildTags
        /// </summary>
        [Fact]
        public void TagsAddBuildTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //List<string> body = null;
            //var response = instance.TagsAddBuildTags(organization, project, buildId, apiVersion, body);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsAddDefinitionTag
        /// </summary>
        [Fact]
        public void TagsAddDefinitionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string tag = null;
            //string apiVersion = null;
            //var response = instance.TagsAddDefinitionTag(organization, project, definitionId, tag, apiVersion);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsAddDefinitionTags
        /// </summary>
        [Fact]
        public void TagsAddDefinitionTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string apiVersion = null;
            //List<string> body = null;
            //var response = instance.TagsAddDefinitionTags(organization, project, definitionId, apiVersion, body);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsDeleteBuildTag
        /// </summary>
        [Fact]
        public void TagsDeleteBuildTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string tag = null;
            //string apiVersion = null;
            //var response = instance.TagsDeleteBuildTag(organization, project, buildId, tag, apiVersion);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsDeleteDefinitionTag
        /// </summary>
        [Fact]
        public void TagsDeleteDefinitionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string tag = null;
            //string apiVersion = null;
            //var response = instance.TagsDeleteDefinitionTag(organization, project, definitionId, tag, apiVersion);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsDeleteTag
        /// </summary>
        [Fact]
        public void TagsDeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string tag = null;
            //string apiVersion = null;
            //var response = instance.TagsDeleteTag(organization, project, tag, apiVersion);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsGetBuildTags
        /// </summary>
        [Fact]
        public void TagsGetBuildTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //var response = instance.TagsGetBuildTags(organization, project, buildId, apiVersion);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsGetDefinitionTags
        /// </summary>
        [Fact]
        public void TagsGetDefinitionTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string apiVersion = null;
            //int? revision = null;
            //var response = instance.TagsGetDefinitionTags(organization, project, definitionId, apiVersion, revision);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test TagsGetTags
        /// </summary>
        [Fact]
        public void TagsGetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //var response = instance.TagsGetTags(organization, project, apiVersion);
            //Assert.IsType<List<string>>(response);
        }
    }
}
