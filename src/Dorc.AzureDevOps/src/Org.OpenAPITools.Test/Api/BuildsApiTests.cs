/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Xunit;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing BuildsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BuildsApiTests : IDisposable
    {
        private BuildsApi instance;

        public BuildsApiTests()
        {
            instance = new BuildsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BuildsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BuildsApi
            //Assert.IsType<BuildsApi>(instance);
        }

        /// <summary>
        /// Test BuildsDelete
        /// </summary>
        [Fact]
        public void BuildsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //instance.BuildsDelete(organization, project, buildId, apiVersion);
        }

        /// <summary>
        /// Test BuildsGet
        /// </summary>
        [Fact]
        public void BuildsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //string? propertyFilters = null;
            //var response = instance.BuildsGet(organization, project, buildId, apiVersion, propertyFilters);
            //Assert.IsType<Build>(response);
        }

        /// <summary>
        /// Test BuildsGetBuildChanges
        /// </summary>
        [Fact]
        public void BuildsGetBuildChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //string? continuationToken = null;
            //int? top = null;
            //bool? includeSourceChange = null;
            //var response = instance.BuildsGetBuildChanges(organization, project, buildId, apiVersion, continuationToken, top, includeSourceChange);
            //Assert.IsType<List<Change>>(response);
        }

        /// <summary>
        /// Test BuildsGetBuildLog
        /// </summary>
        [Fact]
        public void BuildsGetBuildLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //int logId = null;
            //string apiVersion = null;
            //long? startLine = null;
            //long? endLine = null;
            //var response = instance.BuildsGetBuildLog(organization, project, buildId, logId, apiVersion, startLine, endLine);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test BuildsGetBuildLogs
        /// </summary>
        [Fact]
        public void BuildsGetBuildLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //var response = instance.BuildsGetBuildLogs(organization, project, buildId, apiVersion);
            //Assert.IsType<List<BuildLog>>(response);
        }

        /// <summary>
        /// Test BuildsGetBuildWorkItemsRefs
        /// </summary>
        [Fact]
        public void BuildsGetBuildWorkItemsRefsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //int? top = null;
            //var response = instance.BuildsGetBuildWorkItemsRefs(organization, project, buildId, apiVersion, top);
            //Assert.IsType<List<ResourceRef>>(response);
        }

        /// <summary>
        /// Test BuildsGetBuildWorkItemsRefsFromCommits
        /// </summary>
        [Fact]
        public void BuildsGetBuildWorkItemsRefsFromCommitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //List<string> body = null;
            //int? top = null;
            //var response = instance.BuildsGetBuildWorkItemsRefsFromCommits(organization, project, buildId, apiVersion, body, top);
            //Assert.IsType<List<ResourceRef>>(response);
        }

        /// <summary>
        /// Test BuildsGetChangesBetweenBuilds
        /// </summary>
        [Fact]
        public void BuildsGetChangesBetweenBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //int? fromBuildId = null;
            //int? toBuildId = null;
            //int? top = null;
            //var response = instance.BuildsGetChangesBetweenBuilds(organization, project, apiVersion, fromBuildId, toBuildId, top);
            //Assert.IsType<List<Change>>(response);
        }

        /// <summary>
        /// Test BuildsGetWorkItemsBetweenBuilds
        /// </summary>
        [Fact]
        public void BuildsGetWorkItemsBetweenBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int fromBuildId = null;
            //int toBuildId = null;
            //string apiVersion = null;
            //int? top = null;
            //var response = instance.BuildsGetWorkItemsBetweenBuilds(organization, project, fromBuildId, toBuildId, apiVersion, top);
            //Assert.IsType<List<ResourceRef>>(response);
        }

        /// <summary>
        /// Test BuildsList
        /// </summary>
        [Fact]
        public void BuildsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //string? definitions = null;
            //string? queues = null;
            //string? buildNumber = null;
            //DateTime? minTime = null;
            //DateTime? maxTime = null;
            //string? requestedFor = null;
            //string? reasonFilter = null;
            //string? statusFilter = null;
            //string? resultFilter = null;
            //string? tagFilters = null;
            //string? properties = null;
            //int? top = null;
            //string? continuationToken = null;
            //int? maxBuildsPerDefinition = null;
            //string? deletedFilter = null;
            //string? queryOrder = null;
            //string? branchName = null;
            //string? buildIds = null;
            //string? repositoryId = null;
            //string? repositoryType = null;
            //var response = instance.BuildsList(organization, project, apiVersion, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType);
            //Assert.IsType<List<Build>>(response);
        }

        /// <summary>
        /// Test BuildsQueue
        /// </summary>
        [Fact]
        public void BuildsQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //Build body = null;
            //bool? ignoreWarnings = null;
            //string? checkInTicket = null;
            //int? sourceBuildId = null;
            //int? definitionId = null;
            //var response = instance.BuildsQueue(organization, project, apiVersion, body, ignoreWarnings, checkInTicket, sourceBuildId, definitionId);
            //Assert.IsType<Build>(response);
        }

        /// <summary>
        /// Test BuildsUpdateBuild
        /// </summary>
        [Fact]
        public void BuildsUpdateBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int buildId = null;
            //string apiVersion = null;
            //Build body = null;
            //bool? retry = null;
            //var response = instance.BuildsUpdateBuild(organization, project, buildId, apiVersion, body, retry);
            //Assert.IsType<Build>(response);
        }

        /// <summary>
        /// Test BuildsUpdateBuilds
        /// </summary>
        [Fact]
        public void BuildsUpdateBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //List<Build> body = null;
            //var response = instance.BuildsUpdateBuilds(organization, project, apiVersion, body);
            //Assert.IsType<List<Build>>(response);
        }
    }
}
