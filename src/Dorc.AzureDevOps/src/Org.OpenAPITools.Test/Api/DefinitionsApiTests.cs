/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Xunit;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefinitionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefinitionsApiTests : IDisposable
    {
        private DefinitionsApi instance;

        public DefinitionsApiTests()
        {
            instance = new DefinitionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefinitionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefinitionsApi
            //Assert.IsType<DefinitionsApi>(instance);
        }

        /// <summary>
        /// Test DefinitionsCreate
        /// </summary>
        [Fact]
        public void DefinitionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //BuildDefinition body = null;
            //int? definitionToCloneId = null;
            //int? definitionToCloneRevision = null;
            //var response = instance.DefinitionsCreate(organization, project, apiVersion, body, definitionToCloneId, definitionToCloneRevision);
            //Assert.IsType<BuildDefinition>(response);
        }

        /// <summary>
        /// Test DefinitionsDelete
        /// </summary>
        [Fact]
        public void DefinitionsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string apiVersion = null;
            //instance.DefinitionsDelete(organization, project, definitionId, apiVersion);
        }

        /// <summary>
        /// Test DefinitionsGet
        /// </summary>
        [Fact]
        public void DefinitionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string apiVersion = null;
            //int? revision = null;
            //DateTime? minMetricsTime = null;
            //string? propertyFilters = null;
            //bool? includeLatestBuilds = null;
            //var response = instance.DefinitionsGet(organization, project, definitionId, apiVersion, revision, minMetricsTime, propertyFilters, includeLatestBuilds);
            //Assert.IsType<BuildDefinition>(response);
        }

        /// <summary>
        /// Test DefinitionsGetDefinitionRevisions
        /// </summary>
        [Fact]
        public void DefinitionsGetDefinitionRevisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string apiVersion = null;
            //var response = instance.DefinitionsGetDefinitionRevisions(organization, project, definitionId, apiVersion);
            //Assert.IsType<List<BuildDefinitionRevision>>(response);
        }

        /// <summary>
        /// Test DefinitionsList
        /// </summary>
        [Fact]
        public void DefinitionsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //string apiVersion = null;
            //string? name = null;
            //string? repositoryId = null;
            //string? repositoryType = null;
            //string? queryOrder = null;
            //int? top = null;
            //string? continuationToken = null;
            //DateTime? minMetricsTime = null;
            //string? definitionIds = null;
            //string? path = null;
            //DateTime? builtAfter = null;
            //DateTime? notBuiltAfter = null;
            //bool? includeAllProperties = null;
            //bool? includeLatestBuilds = null;
            //Guid? taskIdFilter = null;
            //int? processType = null;
            //string? yamlFilename = null;
            //var response = instance.DefinitionsList(organization, project, apiVersion, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename);
            //Assert.IsType<List<BuildDefinitionReference>>(response);
        }

        /// <summary>
        /// Test DefinitionsRestoreDefinition
        /// </summary>
        [Fact]
        public void DefinitionsRestoreDefinitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //bool deleted = null;
            //string apiVersion = null;
            //var response = instance.DefinitionsRestoreDefinition(organization, project, definitionId, deleted, apiVersion);
            //Assert.IsType<BuildDefinition>(response);
        }

        /// <summary>
        /// Test DefinitionsUpdate
        /// </summary>
        [Fact]
        public void DefinitionsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string project = null;
            //int definitionId = null;
            //string apiVersion = null;
            //BuildDefinition body = null;
            //int? secretsSourceDefinitionId = null;
            //int? secretsSourceDefinitionRevision = null;
            //var response = instance.DefinitionsUpdate(organization, project, definitionId, apiVersion, body, secretsSourceDefinitionId, secretsSourceDefinitionRevision);
            //Assert.IsType<BuildDefinition>(response);
        }
    }
}
