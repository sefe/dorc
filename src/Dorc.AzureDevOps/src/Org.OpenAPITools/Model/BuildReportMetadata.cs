/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents information about a build report.
    /// </summary>
    [DataContract(Name = "BuildReportMetadata")]
    public partial class BuildReportMetadata : IEquatable<BuildReportMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildReportMetadata" /> class.
        /// </summary>
        /// <param name="buildId">The Id of the build..</param>
        /// <param name="content">The content of the report..</param>
        /// <param name="type">The type of the report..</param>
        public BuildReportMetadata(int buildId = default(int), string content = default(string), string type = default(string))
        {
            this.BuildId = buildId;
            this.Content = content;
            this.Type = type;
        }

        /// <summary>
        /// The Id of the build.
        /// </summary>
        /// <value>The Id of the build.</value>
        [DataMember(Name = "buildId", EmitDefaultValue = false)]
        public int BuildId { get; set; }

        /// <summary>
        /// The content of the report.
        /// </summary>
        /// <value>The content of the report.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// The type of the report.
        /// </summary>
        /// <value>The type of the report.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildReportMetadata {\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildReportMetadata);
        }

        /// <summary>
        /// Returns true if BuildReportMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildReportMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildReportMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuildId == input.BuildId ||
                    this.BuildId.Equals(input.BuildId)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BuildId.GetHashCode();
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
