/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents system-wide build settings.
    /// </summary>
    [DataContract(Name = "BuildSettings")]
    public partial class BuildSettings : IEquatable<BuildSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildSettings" /> class.
        /// </summary>
        /// <param name="daysToKeepDeletedBuildsBeforeDestroy">The number of days to keep records of deleted builds..</param>
        /// <param name="defaultRetentionPolicy">defaultRetentionPolicy.</param>
        /// <param name="maximumRetentionPolicy">maximumRetentionPolicy.</param>
        public BuildSettings(int daysToKeepDeletedBuildsBeforeDestroy = default(int), RetentionPolicy defaultRetentionPolicy = default(RetentionPolicy), RetentionPolicy maximumRetentionPolicy = default(RetentionPolicy))
        {
            this.DaysToKeepDeletedBuildsBeforeDestroy = daysToKeepDeletedBuildsBeforeDestroy;
            this.DefaultRetentionPolicy = defaultRetentionPolicy;
            this.MaximumRetentionPolicy = maximumRetentionPolicy;
        }

        /// <summary>
        /// The number of days to keep records of deleted builds.
        /// </summary>
        /// <value>The number of days to keep records of deleted builds.</value>
        [DataMember(Name = "daysToKeepDeletedBuildsBeforeDestroy", EmitDefaultValue = false)]
        public int DaysToKeepDeletedBuildsBeforeDestroy { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRetentionPolicy
        /// </summary>
        [DataMember(Name = "defaultRetentionPolicy", EmitDefaultValue = false)]
        public RetentionPolicy DefaultRetentionPolicy { get; set; }

        /// <summary>
        /// Gets or Sets MaximumRetentionPolicy
        /// </summary>
        [DataMember(Name = "maximumRetentionPolicy", EmitDefaultValue = false)]
        public RetentionPolicy MaximumRetentionPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildSettings {\n");
            sb.Append("  DaysToKeepDeletedBuildsBeforeDestroy: ").Append(DaysToKeepDeletedBuildsBeforeDestroy).Append("\n");
            sb.Append("  DefaultRetentionPolicy: ").Append(DefaultRetentionPolicy).Append("\n");
            sb.Append("  MaximumRetentionPolicy: ").Append(MaximumRetentionPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildSettings);
        }

        /// <summary>
        /// Returns true if BuildSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DaysToKeepDeletedBuildsBeforeDestroy == input.DaysToKeepDeletedBuildsBeforeDestroy ||
                    this.DaysToKeepDeletedBuildsBeforeDestroy.Equals(input.DaysToKeepDeletedBuildsBeforeDestroy)
                ) && 
                (
                    this.DefaultRetentionPolicy == input.DefaultRetentionPolicy ||
                    (this.DefaultRetentionPolicy != null &&
                    this.DefaultRetentionPolicy.Equals(input.DefaultRetentionPolicy))
                ) && 
                (
                    this.MaximumRetentionPolicy == input.MaximumRetentionPolicy ||
                    (this.MaximumRetentionPolicy != null &&
                    this.MaximumRetentionPolicy.Equals(input.MaximumRetentionPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DaysToKeepDeletedBuildsBeforeDestroy.GetHashCode();
                if (this.DefaultRetentionPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultRetentionPolicy.GetHashCode();
                }
                if (this.MaximumRetentionPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumRetentionPolicy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
