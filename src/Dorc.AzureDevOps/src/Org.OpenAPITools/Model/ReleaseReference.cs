/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Reference to a release.
    /// </summary>
    [DataContract(Name = "ReleaseReference")]
    public partial class ReleaseReference : IEquatable<ReleaseReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseReference" /> class.
        /// </summary>
        /// <param name="attempt">Number of Release Attempt..</param>
        /// <param name="creationDate">Release Creation Date..</param>
        /// <param name="definitionId">Release definition ID..</param>
        /// <param name="environmentCreationDate">Environment creation Date..</param>
        /// <param name="environmentDefinitionId">Release environment definition ID..</param>
        /// <param name="environmentDefinitionName">Release environment definition name..</param>
        /// <param name="environmentId">Release environment ID..</param>
        /// <param name="environmentName">Release environment name..</param>
        /// <param name="id">Release ID..</param>
        /// <param name="name">Release name..</param>
        public ReleaseReference(int attempt = default(int), DateTime creationDate = default(DateTime), int definitionId = default(int), DateTime environmentCreationDate = default(DateTime), int environmentDefinitionId = default(int), string environmentDefinitionName = default(string), int environmentId = default(int), string environmentName = default(string), int id = default(int), string name = default(string))
        {
            this.Attempt = attempt;
            this.CreationDate = creationDate;
            this.DefinitionId = definitionId;
            this.EnvironmentCreationDate = environmentCreationDate;
            this.EnvironmentDefinitionId = environmentDefinitionId;
            this.EnvironmentDefinitionName = environmentDefinitionName;
            this.EnvironmentId = environmentId;
            this.EnvironmentName = environmentName;
            this.Id = id;
            this.Name = name;
        }

        /// <summary>
        /// Number of Release Attempt.
        /// </summary>
        /// <value>Number of Release Attempt.</value>
        [DataMember(Name = "attempt", EmitDefaultValue = false)]
        public int Attempt { get; set; }

        /// <summary>
        /// Release Creation Date.
        /// </summary>
        /// <value>Release Creation Date.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Release definition ID.
        /// </summary>
        /// <value>Release definition ID.</value>
        [DataMember(Name = "definitionId", EmitDefaultValue = false)]
        public int DefinitionId { get; set; }

        /// <summary>
        /// Environment creation Date.
        /// </summary>
        /// <value>Environment creation Date.</value>
        [DataMember(Name = "environmentCreationDate", EmitDefaultValue = false)]
        public DateTime EnvironmentCreationDate { get; set; }

        /// <summary>
        /// Release environment definition ID.
        /// </summary>
        /// <value>Release environment definition ID.</value>
        [DataMember(Name = "environmentDefinitionId", EmitDefaultValue = false)]
        public int EnvironmentDefinitionId { get; set; }

        /// <summary>
        /// Release environment definition name.
        /// </summary>
        /// <value>Release environment definition name.</value>
        [DataMember(Name = "environmentDefinitionName", EmitDefaultValue = false)]
        public string EnvironmentDefinitionName { get; set; }

        /// <summary>
        /// Release environment ID.
        /// </summary>
        /// <value>Release environment ID.</value>
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public int EnvironmentId { get; set; }

        /// <summary>
        /// Release environment name.
        /// </summary>
        /// <value>Release environment name.</value>
        [DataMember(Name = "environmentName", EmitDefaultValue = false)]
        public string EnvironmentName { get; set; }

        /// <summary>
        /// Release ID.
        /// </summary>
        /// <value>Release ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Release name.
        /// </summary>
        /// <value>Release name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReleaseReference {\n");
            sb.Append("  Attempt: ").Append(Attempt).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DefinitionId: ").Append(DefinitionId).Append("\n");
            sb.Append("  EnvironmentCreationDate: ").Append(EnvironmentCreationDate).Append("\n");
            sb.Append("  EnvironmentDefinitionId: ").Append(EnvironmentDefinitionId).Append("\n");
            sb.Append("  EnvironmentDefinitionName: ").Append(EnvironmentDefinitionName).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  EnvironmentName: ").Append(EnvironmentName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseReference);
        }

        /// <summary>
        /// Returns true if ReleaseReference instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attempt == input.Attempt ||
                    this.Attempt.Equals(input.Attempt)
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.DefinitionId == input.DefinitionId ||
                    this.DefinitionId.Equals(input.DefinitionId)
                ) && 
                (
                    this.EnvironmentCreationDate == input.EnvironmentCreationDate ||
                    (this.EnvironmentCreationDate != null &&
                    this.EnvironmentCreationDate.Equals(input.EnvironmentCreationDate))
                ) && 
                (
                    this.EnvironmentDefinitionId == input.EnvironmentDefinitionId ||
                    this.EnvironmentDefinitionId.Equals(input.EnvironmentDefinitionId)
                ) && 
                (
                    this.EnvironmentDefinitionName == input.EnvironmentDefinitionName ||
                    (this.EnvironmentDefinitionName != null &&
                    this.EnvironmentDefinitionName.Equals(input.EnvironmentDefinitionName))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    this.EnvironmentId.Equals(input.EnvironmentId)
                ) && 
                (
                    this.EnvironmentName == input.EnvironmentName ||
                    (this.EnvironmentName != null &&
                    this.EnvironmentName.Equals(input.EnvironmentName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Attempt.GetHashCode();
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefinitionId.GetHashCode();
                if (this.EnvironmentCreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.EnvironmentCreationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnvironmentDefinitionId.GetHashCode();
                if (this.EnvironmentDefinitionName != null)
                {
                    hashCode = (hashCode * 59) + this.EnvironmentDefinitionName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnvironmentId.GetHashCode();
                if (this.EnvironmentName != null)
                {
                    hashCode = (hashCode * 59) + this.EnvironmentName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
