/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AggregatedResultsDifference
    /// </summary>
    [DataContract(Name = "AggregatedResultsDifference")]
    public partial class AggregatedResultsDifference : IEquatable<AggregatedResultsDifference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedResultsDifference" /> class.
        /// </summary>
        /// <param name="increaseInDuration">increaseInDuration.</param>
        /// <param name="increaseInFailures">increaseInFailures.</param>
        /// <param name="increaseInNonImpactedTests">increaseInNonImpactedTests.</param>
        /// <param name="increaseInOtherTests">increaseInOtherTests.</param>
        /// <param name="increaseInPassedTests">increaseInPassedTests.</param>
        /// <param name="increaseInTotalTests">increaseInTotalTests.</param>
        public AggregatedResultsDifference(string increaseInDuration = default(string), int increaseInFailures = default(int), int increaseInNonImpactedTests = default(int), int increaseInOtherTests = default(int), int increaseInPassedTests = default(int), int increaseInTotalTests = default(int))
        {
            this.IncreaseInDuration = increaseInDuration;
            this.IncreaseInFailures = increaseInFailures;
            this.IncreaseInNonImpactedTests = increaseInNonImpactedTests;
            this.IncreaseInOtherTests = increaseInOtherTests;
            this.IncreaseInPassedTests = increaseInPassedTests;
            this.IncreaseInTotalTests = increaseInTotalTests;
        }

        /// <summary>
        /// Gets or Sets IncreaseInDuration
        /// </summary>
        [DataMember(Name = "increaseInDuration", EmitDefaultValue = false)]
        public string IncreaseInDuration { get; set; }

        /// <summary>
        /// Gets or Sets IncreaseInFailures
        /// </summary>
        [DataMember(Name = "increaseInFailures", EmitDefaultValue = false)]
        public int IncreaseInFailures { get; set; }

        /// <summary>
        /// Gets or Sets IncreaseInNonImpactedTests
        /// </summary>
        [DataMember(Name = "increaseInNonImpactedTests", EmitDefaultValue = false)]
        public int IncreaseInNonImpactedTests { get; set; }

        /// <summary>
        /// Gets or Sets IncreaseInOtherTests
        /// </summary>
        [DataMember(Name = "increaseInOtherTests", EmitDefaultValue = false)]
        public int IncreaseInOtherTests { get; set; }

        /// <summary>
        /// Gets or Sets IncreaseInPassedTests
        /// </summary>
        [DataMember(Name = "increaseInPassedTests", EmitDefaultValue = false)]
        public int IncreaseInPassedTests { get; set; }

        /// <summary>
        /// Gets or Sets IncreaseInTotalTests
        /// </summary>
        [DataMember(Name = "increaseInTotalTests", EmitDefaultValue = false)]
        public int IncreaseInTotalTests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedResultsDifference {\n");
            sb.Append("  IncreaseInDuration: ").Append(IncreaseInDuration).Append("\n");
            sb.Append("  IncreaseInFailures: ").Append(IncreaseInFailures).Append("\n");
            sb.Append("  IncreaseInNonImpactedTests: ").Append(IncreaseInNonImpactedTests).Append("\n");
            sb.Append("  IncreaseInOtherTests: ").Append(IncreaseInOtherTests).Append("\n");
            sb.Append("  IncreaseInPassedTests: ").Append(IncreaseInPassedTests).Append("\n");
            sb.Append("  IncreaseInTotalTests: ").Append(IncreaseInTotalTests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedResultsDifference);
        }

        /// <summary>
        /// Returns true if AggregatedResultsDifference instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedResultsDifference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedResultsDifference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncreaseInDuration == input.IncreaseInDuration ||
                    (this.IncreaseInDuration != null &&
                    this.IncreaseInDuration.Equals(input.IncreaseInDuration))
                ) && 
                (
                    this.IncreaseInFailures == input.IncreaseInFailures ||
                    this.IncreaseInFailures.Equals(input.IncreaseInFailures)
                ) && 
                (
                    this.IncreaseInNonImpactedTests == input.IncreaseInNonImpactedTests ||
                    this.IncreaseInNonImpactedTests.Equals(input.IncreaseInNonImpactedTests)
                ) && 
                (
                    this.IncreaseInOtherTests == input.IncreaseInOtherTests ||
                    this.IncreaseInOtherTests.Equals(input.IncreaseInOtherTests)
                ) && 
                (
                    this.IncreaseInPassedTests == input.IncreaseInPassedTests ||
                    this.IncreaseInPassedTests.Equals(input.IncreaseInPassedTests)
                ) && 
                (
                    this.IncreaseInTotalTests == input.IncreaseInTotalTests ||
                    this.IncreaseInTotalTests.Equals(input.IncreaseInTotalTests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncreaseInDuration != null)
                {
                    hashCode = (hashCode * 59) + this.IncreaseInDuration.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncreaseInFailures.GetHashCode();
                hashCode = (hashCode * 59) + this.IncreaseInNonImpactedTests.GetHashCode();
                hashCode = (hashCode * 59) + this.IncreaseInOtherTests.GetHashCode();
                hashCode = (hashCode * 59) + this.IncreaseInPassedTests.GetHashCode();
                hashCode = (hashCode * 59) + this.IncreaseInTotalTests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
