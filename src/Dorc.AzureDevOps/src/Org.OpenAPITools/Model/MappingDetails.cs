/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an entry in a workspace mapping.
    /// </summary>
    [DataContract(Name = "MappingDetails")]
    public partial class MappingDetails : IEquatable<MappingDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingDetails" /> class.
        /// </summary>
        /// <param name="localPath">The local path..</param>
        /// <param name="mappingType">The mapping type..</param>
        /// <param name="serverPath">The server path..</param>
        public MappingDetails(string localPath = default(string), string mappingType = default(string), string serverPath = default(string))
        {
            this.LocalPath = localPath;
            this.MappingType = mappingType;
            this.ServerPath = serverPath;
        }

        /// <summary>
        /// The local path.
        /// </summary>
        /// <value>The local path.</value>
        [DataMember(Name = "localPath", EmitDefaultValue = false)]
        public string LocalPath { get; set; }

        /// <summary>
        /// The mapping type.
        /// </summary>
        /// <value>The mapping type.</value>
        [DataMember(Name = "mappingType", EmitDefaultValue = false)]
        public string MappingType { get; set; }

        /// <summary>
        /// The server path.
        /// </summary>
        /// <value>The server path.</value>
        [DataMember(Name = "serverPath", EmitDefaultValue = false)]
        public string ServerPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappingDetails {\n");
            sb.Append("  LocalPath: ").Append(LocalPath).Append("\n");
            sb.Append("  MappingType: ").Append(MappingType).Append("\n");
            sb.Append("  ServerPath: ").Append(ServerPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappingDetails);
        }

        /// <summary>
        /// Returns true if MappingDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MappingDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappingDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocalPath == input.LocalPath ||
                    (this.LocalPath != null &&
                    this.LocalPath.Equals(input.LocalPath))
                ) && 
                (
                    this.MappingType == input.MappingType ||
                    (this.MappingType != null &&
                    this.MappingType.Equals(input.MappingType))
                ) && 
                (
                    this.ServerPath == input.ServerPath ||
                    (this.ServerPath != null &&
                    this.ServerPath.Equals(input.ServerPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocalPath != null)
                {
                    hashCode = (hashCode * 59) + this.LocalPath.GetHashCode();
                }
                if (this.MappingType != null)
                {
                    hashCode = (hashCode * 59) + this.MappingType.GetHashCode();
                }
                if (this.ServerPath != null)
                {
                    hashCode = (hashCode * 59) + this.ServerPath.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
