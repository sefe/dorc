/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents binding of data source for the service endpoint request.
    /// </summary>
    [DataContract(Name = "DataSourceBindingBase")]
    public partial class DataSourceBindingBase : IEquatable<DataSourceBindingBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSourceBindingBase" /> class.
        /// </summary>
        /// <param name="callbackContextTemplate">Pagination format supported by this data source(ContinuationToken/SkipTop)..</param>
        /// <param name="callbackRequiredTemplate">Subsequent calls needed?.</param>
        /// <param name="dataSourceName">Gets or sets the name of the data source..</param>
        /// <param name="endpointId">Gets or sets the endpoint Id..</param>
        /// <param name="endpointUrl">Gets or sets the url of the service endpoint..</param>
        /// <param name="headers">Gets or sets the authorization headers..</param>
        /// <param name="initialContextTemplate">Defines the initial value of the query params.</param>
        /// <param name="parameters">Gets or sets the parameters for the data source..</param>
        /// <param name="requestContent">Gets or sets http request body.</param>
        /// <param name="requestVerb">Gets or sets http request verb.</param>
        /// <param name="resultSelector">Gets or sets the result selector..</param>
        /// <param name="resultTemplate">Gets or sets the result template..</param>
        /// <param name="target">Gets or sets the target of the data source..</param>
        public DataSourceBindingBase(string callbackContextTemplate = default(string), string callbackRequiredTemplate = default(string), string dataSourceName = default(string), string endpointId = default(string), string endpointUrl = default(string), List<AuthorizationHeader> headers = default(List<AuthorizationHeader>), string initialContextTemplate = default(string), Dictionary<string, string> parameters = default(Dictionary<string, string>), string requestContent = default(string), string requestVerb = default(string), string resultSelector = default(string), string resultTemplate = default(string), string target = default(string))
        {
            this.CallbackContextTemplate = callbackContextTemplate;
            this.CallbackRequiredTemplate = callbackRequiredTemplate;
            this.DataSourceName = dataSourceName;
            this.EndpointId = endpointId;
            this.EndpointUrl = endpointUrl;
            this.Headers = headers;
            this.InitialContextTemplate = initialContextTemplate;
            this.Parameters = parameters;
            this.RequestContent = requestContent;
            this.RequestVerb = requestVerb;
            this.ResultSelector = resultSelector;
            this.ResultTemplate = resultTemplate;
            this.Target = target;
        }

        /// <summary>
        /// Pagination format supported by this data source(ContinuationToken/SkipTop).
        /// </summary>
        /// <value>Pagination format supported by this data source(ContinuationToken/SkipTop).</value>
        [DataMember(Name = "callbackContextTemplate", EmitDefaultValue = false)]
        public string CallbackContextTemplate { get; set; }

        /// <summary>
        /// Subsequent calls needed?
        /// </summary>
        /// <value>Subsequent calls needed?</value>
        [DataMember(Name = "callbackRequiredTemplate", EmitDefaultValue = false)]
        public string CallbackRequiredTemplate { get; set; }

        /// <summary>
        /// Gets or sets the name of the data source.
        /// </summary>
        /// <value>Gets or sets the name of the data source.</value>
        [DataMember(Name = "dataSourceName", EmitDefaultValue = false)]
        public string DataSourceName { get; set; }

        /// <summary>
        /// Gets or sets the endpoint Id.
        /// </summary>
        /// <value>Gets or sets the endpoint Id.</value>
        [DataMember(Name = "endpointId", EmitDefaultValue = false)]
        public string EndpointId { get; set; }

        /// <summary>
        /// Gets or sets the url of the service endpoint.
        /// </summary>
        /// <value>Gets or sets the url of the service endpoint.</value>
        [DataMember(Name = "endpointUrl", EmitDefaultValue = false)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Gets or sets the authorization headers.
        /// </summary>
        /// <value>Gets or sets the authorization headers.</value>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public List<AuthorizationHeader> Headers { get; set; }

        /// <summary>
        /// Defines the initial value of the query params
        /// </summary>
        /// <value>Defines the initial value of the query params</value>
        [DataMember(Name = "initialContextTemplate", EmitDefaultValue = false)]
        public string InitialContextTemplate { get; set; }

        /// <summary>
        /// Gets or sets the parameters for the data source.
        /// </summary>
        /// <value>Gets or sets the parameters for the data source.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or sets http request body
        /// </summary>
        /// <value>Gets or sets http request body</value>
        [DataMember(Name = "requestContent", EmitDefaultValue = false)]
        public string RequestContent { get; set; }

        /// <summary>
        /// Gets or sets http request verb
        /// </summary>
        /// <value>Gets or sets http request verb</value>
        [DataMember(Name = "requestVerb", EmitDefaultValue = false)]
        public string RequestVerb { get; set; }

        /// <summary>
        /// Gets or sets the result selector.
        /// </summary>
        /// <value>Gets or sets the result selector.</value>
        [DataMember(Name = "resultSelector", EmitDefaultValue = false)]
        public string ResultSelector { get; set; }

        /// <summary>
        /// Gets or sets the result template.
        /// </summary>
        /// <value>Gets or sets the result template.</value>
        [DataMember(Name = "resultTemplate", EmitDefaultValue = false)]
        public string ResultTemplate { get; set; }

        /// <summary>
        /// Gets or sets the target of the data source.
        /// </summary>
        /// <value>Gets or sets the target of the data source.</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataSourceBindingBase {\n");
            sb.Append("  CallbackContextTemplate: ").Append(CallbackContextTemplate).Append("\n");
            sb.Append("  CallbackRequiredTemplate: ").Append(CallbackRequiredTemplate).Append("\n");
            sb.Append("  DataSourceName: ").Append(DataSourceName).Append("\n");
            sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  InitialContextTemplate: ").Append(InitialContextTemplate).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  RequestContent: ").Append(RequestContent).Append("\n");
            sb.Append("  RequestVerb: ").Append(RequestVerb).Append("\n");
            sb.Append("  ResultSelector: ").Append(ResultSelector).Append("\n");
            sb.Append("  ResultTemplate: ").Append(ResultTemplate).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSourceBindingBase);
        }

        /// <summary>
        /// Returns true if DataSourceBindingBase instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSourceBindingBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSourceBindingBase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallbackContextTemplate == input.CallbackContextTemplate ||
                    (this.CallbackContextTemplate != null &&
                    this.CallbackContextTemplate.Equals(input.CallbackContextTemplate))
                ) && 
                (
                    this.CallbackRequiredTemplate == input.CallbackRequiredTemplate ||
                    (this.CallbackRequiredTemplate != null &&
                    this.CallbackRequiredTemplate.Equals(input.CallbackRequiredTemplate))
                ) && 
                (
                    this.DataSourceName == input.DataSourceName ||
                    (this.DataSourceName != null &&
                    this.DataSourceName.Equals(input.DataSourceName))
                ) && 
                (
                    this.EndpointId == input.EndpointId ||
                    (this.EndpointId != null &&
                    this.EndpointId.Equals(input.EndpointId))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.InitialContextTemplate == input.InitialContextTemplate ||
                    (this.InitialContextTemplate != null &&
                    this.InitialContextTemplate.Equals(input.InitialContextTemplate))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.RequestContent == input.RequestContent ||
                    (this.RequestContent != null &&
                    this.RequestContent.Equals(input.RequestContent))
                ) && 
                (
                    this.RequestVerb == input.RequestVerb ||
                    (this.RequestVerb != null &&
                    this.RequestVerb.Equals(input.RequestVerb))
                ) && 
                (
                    this.ResultSelector == input.ResultSelector ||
                    (this.ResultSelector != null &&
                    this.ResultSelector.Equals(input.ResultSelector))
                ) && 
                (
                    this.ResultTemplate == input.ResultTemplate ||
                    (this.ResultTemplate != null &&
                    this.ResultTemplate.Equals(input.ResultTemplate))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackContextTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackContextTemplate.GetHashCode();
                }
                if (this.CallbackRequiredTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackRequiredTemplate.GetHashCode();
                }
                if (this.DataSourceName != null)
                {
                    hashCode = (hashCode * 59) + this.DataSourceName.GetHashCode();
                }
                if (this.EndpointId != null)
                {
                    hashCode = (hashCode * 59) + this.EndpointId.GetHashCode();
                }
                if (this.EndpointUrl != null)
                {
                    hashCode = (hashCode * 59) + this.EndpointUrl.GetHashCode();
                }
                if (this.Headers != null)
                {
                    hashCode = (hashCode * 59) + this.Headers.GetHashCode();
                }
                if (this.InitialContextTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.InitialContextTemplate.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.RequestContent != null)
                {
                    hashCode = (hashCode * 59) + this.RequestContent.GetHashCode();
                }
                if (this.RequestVerb != null)
                {
                    hashCode = (hashCode * 59) + this.RequestVerb.GetHashCode();
                }
                if (this.ResultSelector != null)
                {
                    hashCode = (hashCode * 59) + this.ResultSelector.GetHashCode();
                }
                if (this.ResultTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.ResultTemplate.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
