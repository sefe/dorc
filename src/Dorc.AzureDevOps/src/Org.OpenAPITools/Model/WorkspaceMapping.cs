/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Mapping for a workspace
    /// </summary>
    [DataContract(Name = "WorkspaceMapping")]
    public partial class WorkspaceMapping : IEquatable<WorkspaceMapping>, IValidatableObject
    {
        /// <summary>
        /// type of workspace mapping
        /// </summary>
        /// <value>type of workspace mapping</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MappingTypeEnum
        {
            /// <summary>
            /// Enum Map for value: map
            /// </summary>
            [EnumMember(Value = "map")]
            Map = 1,

            /// <summary>
            /// Enum Cloak for value: cloak
            /// </summary>
            [EnumMember(Value = "cloak")]
            Cloak = 2

        }


        /// <summary>
        /// type of workspace mapping
        /// </summary>
        /// <value>type of workspace mapping</value>
        [DataMember(Name = "mappingType", EmitDefaultValue = false)]
        public MappingTypeEnum? MappingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceMapping" /> class.
        /// </summary>
        /// <param name="definitionUri">Uri of the associated definition.</param>
        /// <param name="depth">Depth of this mapping.</param>
        /// <param name="localItem">local location of the definition.</param>
        /// <param name="mappingType">type of workspace mapping.</param>
        /// <param name="serverItem">Server location of the definition.</param>
        /// <param name="workspaceId">Id of the workspace.</param>
        public WorkspaceMapping(string definitionUri = default(string), int depth = default(int), string localItem = default(string), MappingTypeEnum? mappingType = default(MappingTypeEnum?), string serverItem = default(string), int workspaceId = default(int))
        {
            this.DefinitionUri = definitionUri;
            this.Depth = depth;
            this.LocalItem = localItem;
            this.MappingType = mappingType;
            this.ServerItem = serverItem;
            this.WorkspaceId = workspaceId;
        }

        /// <summary>
        /// Uri of the associated definition
        /// </summary>
        /// <value>Uri of the associated definition</value>
        [DataMember(Name = "definitionUri", EmitDefaultValue = false)]
        public string DefinitionUri { get; set; }

        /// <summary>
        /// Depth of this mapping
        /// </summary>
        /// <value>Depth of this mapping</value>
        [DataMember(Name = "depth", EmitDefaultValue = false)]
        public int Depth { get; set; }

        /// <summary>
        /// local location of the definition
        /// </summary>
        /// <value>local location of the definition</value>
        [DataMember(Name = "localItem", EmitDefaultValue = false)]
        public string LocalItem { get; set; }

        /// <summary>
        /// Server location of the definition
        /// </summary>
        /// <value>Server location of the definition</value>
        [DataMember(Name = "serverItem", EmitDefaultValue = false)]
        public string ServerItem { get; set; }

        /// <summary>
        /// Id of the workspace
        /// </summary>
        /// <value>Id of the workspace</value>
        [DataMember(Name = "workspaceId", EmitDefaultValue = false)]
        public int WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkspaceMapping {\n");
            sb.Append("  DefinitionUri: ").Append(DefinitionUri).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  LocalItem: ").Append(LocalItem).Append("\n");
            sb.Append("  MappingType: ").Append(MappingType).Append("\n");
            sb.Append("  ServerItem: ").Append(ServerItem).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkspaceMapping);
        }

        /// <summary>
        /// Returns true if WorkspaceMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkspaceMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefinitionUri == input.DefinitionUri ||
                    (this.DefinitionUri != null &&
                    this.DefinitionUri.Equals(input.DefinitionUri))
                ) && 
                (
                    this.Depth == input.Depth ||
                    this.Depth.Equals(input.Depth)
                ) && 
                (
                    this.LocalItem == input.LocalItem ||
                    (this.LocalItem != null &&
                    this.LocalItem.Equals(input.LocalItem))
                ) && 
                (
                    this.MappingType == input.MappingType ||
                    this.MappingType.Equals(input.MappingType)
                ) && 
                (
                    this.ServerItem == input.ServerItem ||
                    (this.ServerItem != null &&
                    this.ServerItem.Equals(input.ServerItem))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    this.WorkspaceId.Equals(input.WorkspaceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefinitionUri != null)
                {
                    hashCode = (hashCode * 59) + this.DefinitionUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Depth.GetHashCode();
                if (this.LocalItem != null)
                {
                    hashCode = (hashCode * 59) + this.LocalItem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MappingType.GetHashCode();
                if (this.ServerItem != null)
                {
                    hashCode = (hashCode * 59) + this.ServerItem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
