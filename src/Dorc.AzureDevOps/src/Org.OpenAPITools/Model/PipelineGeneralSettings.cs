/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains pipeline general settings.
    /// </summary>
    [DataContract(Name = "PipelineGeneralSettings")]
    public partial class PipelineGeneralSettings : IEquatable<PipelineGeneralSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineGeneralSettings" /> class.
        /// </summary>
        /// <param name="enforceJobAuthScope">If enabled, scope of access for all pipelines reduces to the current project..</param>
        /// <param name="enforceReferencedRepoScopedToken">Restricts the scope of access for all pipelines to only repositories explicitly referenced by the pipeline..</param>
        /// <param name="enforceSettableVar">If enabled, only those variables that are explicitly marked as \&quot;Settable at queue time\&quot; can be set at queue time..</param>
        /// <param name="publishPipelineMetadata">Allows pipelines to record metadata..</param>
        /// <param name="statusBadgesArePrivate">Anonymous users can access the status badge API for all pipelines unless this option is enabled..</param>
        public PipelineGeneralSettings(bool enforceJobAuthScope = default(bool), bool enforceReferencedRepoScopedToken = default(bool), bool enforceSettableVar = default(bool), bool publishPipelineMetadata = default(bool), bool statusBadgesArePrivate = default(bool))
        {
            this.EnforceJobAuthScope = enforceJobAuthScope;
            this.EnforceReferencedRepoScopedToken = enforceReferencedRepoScopedToken;
            this.EnforceSettableVar = enforceSettableVar;
            this.PublishPipelineMetadata = publishPipelineMetadata;
            this.StatusBadgesArePrivate = statusBadgesArePrivate;
        }

        /// <summary>
        /// If enabled, scope of access for all pipelines reduces to the current project.
        /// </summary>
        /// <value>If enabled, scope of access for all pipelines reduces to the current project.</value>
        [DataMember(Name = "enforceJobAuthScope", EmitDefaultValue = true)]
        public bool EnforceJobAuthScope { get; set; }

        /// <summary>
        /// Restricts the scope of access for all pipelines to only repositories explicitly referenced by the pipeline.
        /// </summary>
        /// <value>Restricts the scope of access for all pipelines to only repositories explicitly referenced by the pipeline.</value>
        [DataMember(Name = "enforceReferencedRepoScopedToken", EmitDefaultValue = true)]
        public bool EnforceReferencedRepoScopedToken { get; set; }

        /// <summary>
        /// If enabled, only those variables that are explicitly marked as \&quot;Settable at queue time\&quot; can be set at queue time.
        /// </summary>
        /// <value>If enabled, only those variables that are explicitly marked as \&quot;Settable at queue time\&quot; can be set at queue time.</value>
        [DataMember(Name = "enforceSettableVar", EmitDefaultValue = true)]
        public bool EnforceSettableVar { get; set; }

        /// <summary>
        /// Allows pipelines to record metadata.
        /// </summary>
        /// <value>Allows pipelines to record metadata.</value>
        [DataMember(Name = "publishPipelineMetadata", EmitDefaultValue = true)]
        public bool PublishPipelineMetadata { get; set; }

        /// <summary>
        /// Anonymous users can access the status badge API for all pipelines unless this option is enabled.
        /// </summary>
        /// <value>Anonymous users can access the status badge API for all pipelines unless this option is enabled.</value>
        [DataMember(Name = "statusBadgesArePrivate", EmitDefaultValue = true)]
        public bool StatusBadgesArePrivate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineGeneralSettings {\n");
            sb.Append("  EnforceJobAuthScope: ").Append(EnforceJobAuthScope).Append("\n");
            sb.Append("  EnforceReferencedRepoScopedToken: ").Append(EnforceReferencedRepoScopedToken).Append("\n");
            sb.Append("  EnforceSettableVar: ").Append(EnforceSettableVar).Append("\n");
            sb.Append("  PublishPipelineMetadata: ").Append(PublishPipelineMetadata).Append("\n");
            sb.Append("  StatusBadgesArePrivate: ").Append(StatusBadgesArePrivate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipelineGeneralSettings);
        }

        /// <summary>
        /// Returns true if PipelineGeneralSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PipelineGeneralSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelineGeneralSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnforceJobAuthScope == input.EnforceJobAuthScope ||
                    this.EnforceJobAuthScope.Equals(input.EnforceJobAuthScope)
                ) && 
                (
                    this.EnforceReferencedRepoScopedToken == input.EnforceReferencedRepoScopedToken ||
                    this.EnforceReferencedRepoScopedToken.Equals(input.EnforceReferencedRepoScopedToken)
                ) && 
                (
                    this.EnforceSettableVar == input.EnforceSettableVar ||
                    this.EnforceSettableVar.Equals(input.EnforceSettableVar)
                ) && 
                (
                    this.PublishPipelineMetadata == input.PublishPipelineMetadata ||
                    this.PublishPipelineMetadata.Equals(input.PublishPipelineMetadata)
                ) && 
                (
                    this.StatusBadgesArePrivate == input.StatusBadgesArePrivate ||
                    this.StatusBadgesArePrivate.Equals(input.StatusBadgesArePrivate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EnforceJobAuthScope.GetHashCode();
                hashCode = (hashCode * 59) + this.EnforceReferencedRepoScopedToken.GetHashCode();
                hashCode = (hashCode * 59) + this.EnforceSettableVar.GetHashCode();
                hashCode = (hashCode * 59) + this.PublishPipelineMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.StatusBadgesArePrivate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
