/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AggregatedResultsByOutcome
    /// </summary>
    [DataContract(Name = "AggregatedResultsByOutcome")]
    public partial class AggregatedResultsByOutcome : IEquatable<AggregatedResultsByOutcome>, IValidatableObject
    {
        /// <summary>
        /// Defines Outcome
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutcomeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: unspecified
            /// </summary>
            [EnumMember(Value = "unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 2,

            /// <summary>
            /// Enum Passed for value: passed
            /// </summary>
            [EnumMember(Value = "passed")]
            Passed = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4,

            /// <summary>
            /// Enum Inconclusive for value: inconclusive
            /// </summary>
            [EnumMember(Value = "inconclusive")]
            Inconclusive = 5,

            /// <summary>
            /// Enum Timeout for value: timeout
            /// </summary>
            [EnumMember(Value = "timeout")]
            Timeout = 6,

            /// <summary>
            /// Enum Aborted for value: aborted
            /// </summary>
            [EnumMember(Value = "aborted")]
            Aborted = 7,

            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            [EnumMember(Value = "blocked")]
            Blocked = 8,

            /// <summary>
            /// Enum NotExecuted for value: notExecuted
            /// </summary>
            [EnumMember(Value = "notExecuted")]
            NotExecuted = 9,

            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 10,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 11,

            /// <summary>
            /// Enum NotApplicable for value: notApplicable
            /// </summary>
            [EnumMember(Value = "notApplicable")]
            NotApplicable = 12,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 13,

            /// <summary>
            /// Enum InProgress for value: inProgress
            /// </summary>
            [EnumMember(Value = "inProgress")]
            InProgress = 14,

            /// <summary>
            /// Enum NotImpacted for value: notImpacted
            /// </summary>
            [EnumMember(Value = "notImpacted")]
            NotImpacted = 15

        }


        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", EmitDefaultValue = false)]
        public OutcomeEnum? Outcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedResultsByOutcome" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="duration">duration.</param>
        /// <param name="groupByField">groupByField.</param>
        /// <param name="groupByValue">groupByValue.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="rerunResultCount">rerunResultCount.</param>
        public AggregatedResultsByOutcome(int count = default(int), string duration = default(string), string groupByField = default(string), Object groupByValue = default(Object), OutcomeEnum? outcome = default(OutcomeEnum?), int rerunResultCount = default(int))
        {
            this.Count = count;
            this.Duration = duration;
            this.GroupByField = groupByField;
            this.GroupByValue = groupByValue;
            this.Outcome = outcome;
            this.RerunResultCount = rerunResultCount;
        }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets GroupByField
        /// </summary>
        [DataMember(Name = "groupByField", EmitDefaultValue = false)]
        public string GroupByField { get; set; }

        /// <summary>
        /// Gets or Sets GroupByValue
        /// </summary>
        [DataMember(Name = "groupByValue", EmitDefaultValue = false)]
        public Object GroupByValue { get; set; }

        /// <summary>
        /// Gets or Sets RerunResultCount
        /// </summary>
        [DataMember(Name = "rerunResultCount", EmitDefaultValue = false)]
        public int RerunResultCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedResultsByOutcome {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  GroupByField: ").Append(GroupByField).Append("\n");
            sb.Append("  GroupByValue: ").Append(GroupByValue).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  RerunResultCount: ").Append(RerunResultCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedResultsByOutcome);
        }

        /// <summary>
        /// Returns true if AggregatedResultsByOutcome instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedResultsByOutcome to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedResultsByOutcome input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.GroupByField == input.GroupByField ||
                    (this.GroupByField != null &&
                    this.GroupByField.Equals(input.GroupByField))
                ) && 
                (
                    this.GroupByValue == input.GroupByValue ||
                    (this.GroupByValue != null &&
                    this.GroupByValue.Equals(input.GroupByValue))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    this.Outcome.Equals(input.Outcome)
                ) && 
                (
                    this.RerunResultCount == input.RerunResultCount ||
                    this.RerunResultCount.Equals(input.RerunResultCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.GroupByField != null)
                {
                    hashCode = (hashCode * 59) + this.GroupByField.GetHashCode();
                }
                if (this.GroupByValue != null)
                {
                    hashCode = (hashCode * 59) + this.GroupByValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                hashCode = (hashCode * 59) + this.RerunResultCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
