/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SupportedTrigger
    /// </summary>
    [DataContract(Name = "SupportedTrigger")]
    public partial class SupportedTrigger : IEquatable<SupportedTrigger>, IValidatableObject
    {
        /// <summary>
        /// The type of trigger.
        /// </summary>
        /// <value>The type of trigger.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum ContinuousIntegration for value: continuousIntegration
            /// </summary>
            [EnumMember(Value = "continuousIntegration")]
            ContinuousIntegration = 2,

            /// <summary>
            /// Enum BatchedContinuousIntegration for value: batchedContinuousIntegration
            /// </summary>
            [EnumMember(Value = "batchedContinuousIntegration")]
            BatchedContinuousIntegration = 3,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 4,

            /// <summary>
            /// Enum GatedCheckIn for value: gatedCheckIn
            /// </summary>
            [EnumMember(Value = "gatedCheckIn")]
            GatedCheckIn = 5,

            /// <summary>
            /// Enum BatchedGatedCheckIn for value: batchedGatedCheckIn
            /// </summary>
            [EnumMember(Value = "batchedGatedCheckIn")]
            BatchedGatedCheckIn = 6,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 7,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 8,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 9

        }


        /// <summary>
        /// The type of trigger.
        /// </summary>
        /// <value>The type of trigger.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedTrigger" /> class.
        /// </summary>
        /// <param name="defaultPollingInterval">The default interval to wait between polls (only relevant when NotificationType is Polling)..</param>
        /// <param name="notificationType">How the trigger is notified of changes..</param>
        /// <param name="supportedCapabilities">The capabilities supported by this trigger..</param>
        /// <param name="type">The type of trigger..</param>
        public SupportedTrigger(int defaultPollingInterval = default(int), string notificationType = default(string), Dictionary<string, Object> supportedCapabilities = default(Dictionary<string, Object>), TypeEnum? type = default(TypeEnum?))
        {
            this.DefaultPollingInterval = defaultPollingInterval;
            this.NotificationType = notificationType;
            this.SupportedCapabilities = supportedCapabilities;
            this.Type = type;
        }

        /// <summary>
        /// The default interval to wait between polls (only relevant when NotificationType is Polling).
        /// </summary>
        /// <value>The default interval to wait between polls (only relevant when NotificationType is Polling).</value>
        [DataMember(Name = "defaultPollingInterval", EmitDefaultValue = false)]
        public int DefaultPollingInterval { get; set; }

        /// <summary>
        /// How the trigger is notified of changes.
        /// </summary>
        /// <value>How the trigger is notified of changes.</value>
        [DataMember(Name = "notificationType", EmitDefaultValue = false)]
        public string NotificationType { get; set; }

        /// <summary>
        /// The capabilities supported by this trigger.
        /// </summary>
        /// <value>The capabilities supported by this trigger.</value>
        [DataMember(Name = "supportedCapabilities", EmitDefaultValue = false)]
        public Dictionary<string, Object> SupportedCapabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedTrigger {\n");
            sb.Append("  DefaultPollingInterval: ").Append(DefaultPollingInterval).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  SupportedCapabilities: ").Append(SupportedCapabilities).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedTrigger);
        }

        /// <summary>
        /// Returns true if SupportedTrigger instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedTrigger input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefaultPollingInterval == input.DefaultPollingInterval ||
                    this.DefaultPollingInterval.Equals(input.DefaultPollingInterval)
                ) && 
                (
                    this.NotificationType == input.NotificationType ||
                    (this.NotificationType != null &&
                    this.NotificationType.Equals(input.NotificationType))
                ) && 
                (
                    this.SupportedCapabilities == input.SupportedCapabilities ||
                    this.SupportedCapabilities != null &&
                    input.SupportedCapabilities != null &&
                    this.SupportedCapabilities.SequenceEqual(input.SupportedCapabilities)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DefaultPollingInterval.GetHashCode();
                if (this.NotificationType != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationType.GetHashCode();
                }
                if (this.SupportedCapabilities != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedCapabilities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
