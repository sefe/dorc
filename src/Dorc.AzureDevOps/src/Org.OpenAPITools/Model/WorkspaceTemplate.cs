/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WorkspaceTemplate
    /// </summary>
    [DataContract(Name = "WorkspaceTemplate")]
    public partial class WorkspaceTemplate : IEquatable<WorkspaceTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceTemplate" /> class.
        /// </summary>
        /// <param name="definitionUri">Uri of the associated definition.</param>
        /// <param name="lastModifiedBy">The identity that last modified this template.</param>
        /// <param name="lastModifiedDate">The last time this template was modified.</param>
        /// <param name="mappings">List of workspace mappings.</param>
        /// <param name="workspaceId">Id of the workspace for this template.</param>
        public WorkspaceTemplate(string definitionUri = default(string), string lastModifiedBy = default(string), DateTime lastModifiedDate = default(DateTime), List<WorkspaceMapping> mappings = default(List<WorkspaceMapping>), int workspaceId = default(int))
        {
            this.DefinitionUri = definitionUri;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedDate = lastModifiedDate;
            this.Mappings = mappings;
            this.WorkspaceId = workspaceId;
        }

        /// <summary>
        /// Uri of the associated definition
        /// </summary>
        /// <value>Uri of the associated definition</value>
        [DataMember(Name = "definitionUri", EmitDefaultValue = false)]
        public string DefinitionUri { get; set; }

        /// <summary>
        /// The identity that last modified this template
        /// </summary>
        /// <value>The identity that last modified this template</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The last time this template was modified
        /// </summary>
        /// <value>The last time this template was modified</value>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// List of workspace mappings
        /// </summary>
        /// <value>List of workspace mappings</value>
        [DataMember(Name = "mappings", EmitDefaultValue = false)]
        public List<WorkspaceMapping> Mappings { get; set; }

        /// <summary>
        /// Id of the workspace for this template
        /// </summary>
        /// <value>Id of the workspace for this template</value>
        [DataMember(Name = "workspaceId", EmitDefaultValue = false)]
        public int WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkspaceTemplate {\n");
            sb.Append("  DefinitionUri: ").Append(DefinitionUri).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkspaceTemplate);
        }

        /// <summary>
        /// Returns true if WorkspaceTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkspaceTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefinitionUri == input.DefinitionUri ||
                    (this.DefinitionUri != null &&
                    this.DefinitionUri.Equals(input.DefinitionUri))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) && 
                (
                    this.Mappings == input.Mappings ||
                    this.Mappings != null &&
                    input.Mappings != null &&
                    this.Mappings.SequenceEqual(input.Mappings)
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    this.WorkspaceId.Equals(input.WorkspaceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefinitionUri != null)
                {
                    hashCode = (hashCode * 59) + this.DefinitionUri.GetHashCode();
                }
                if (this.LastModifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedBy.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                if (this.Mappings != null)
                {
                    hashCode = (hashCode * 59) + this.Mappings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
