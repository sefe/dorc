/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// XamlBuildDefinition
    /// </summary>
    [DataContract(Name = "XamlBuildDefinition")]
    public partial class XamlBuildDefinition : IEquatable<XamlBuildDefinition>, IValidatableObject
    {
        /// <summary>
        /// The reasons supported by the template
        /// </summary>
        /// <value>The reasons supported by the template</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportedReasonsEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 2,

            /// <summary>
            /// Enum IndividualCI for value: individualCI
            /// </summary>
            [EnumMember(Value = "individualCI")]
            IndividualCI = 3,

            /// <summary>
            /// Enum BatchedCI for value: batchedCI
            /// </summary>
            [EnumMember(Value = "batchedCI")]
            BatchedCI = 4,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 5,

            /// <summary>
            /// Enum ScheduleForced for value: scheduleForced
            /// </summary>
            [EnumMember(Value = "scheduleForced")]
            ScheduleForced = 6,

            /// <summary>
            /// Enum UserCreated for value: userCreated
            /// </summary>
            [EnumMember(Value = "userCreated")]
            UserCreated = 7,

            /// <summary>
            /// Enum ValidateShelveset for value: validateShelveset
            /// </summary>
            [EnumMember(Value = "validateShelveset")]
            ValidateShelveset = 8,

            /// <summary>
            /// Enum CheckInShelveset for value: checkInShelveset
            /// </summary>
            [EnumMember(Value = "checkInShelveset")]
            CheckInShelveset = 9,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 10,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 11,

            /// <summary>
            /// Enum ResourceTrigger for value: resourceTrigger
            /// </summary>
            [EnumMember(Value = "resourceTrigger")]
            ResourceTrigger = 12,

            /// <summary>
            /// Enum Triggered for value: triggered
            /// </summary>
            [EnumMember(Value = "triggered")]
            Triggered = 13,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 14

        }


        /// <summary>
        /// The reasons supported by the template
        /// </summary>
        /// <value>The reasons supported by the template</value>
        [DataMember(Name = "supportedReasons", EmitDefaultValue = false)]
        public SupportedReasonsEnum? SupportedReasons { get; set; }
        /// <summary>
        /// How builds are triggered from this definition
        /// </summary>
        /// <value>How builds are triggered from this definition</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum ContinuousIntegration for value: continuousIntegration
            /// </summary>
            [EnumMember(Value = "continuousIntegration")]
            ContinuousIntegration = 2,

            /// <summary>
            /// Enum BatchedContinuousIntegration for value: batchedContinuousIntegration
            /// </summary>
            [EnumMember(Value = "batchedContinuousIntegration")]
            BatchedContinuousIntegration = 3,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 4,

            /// <summary>
            /// Enum GatedCheckIn for value: gatedCheckIn
            /// </summary>
            [EnumMember(Value = "gatedCheckIn")]
            GatedCheckIn = 5,

            /// <summary>
            /// Enum BatchedGatedCheckIn for value: batchedGatedCheckIn
            /// </summary>
            [EnumMember(Value = "batchedGatedCheckIn")]
            BatchedGatedCheckIn = 6,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 7,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 8,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 9

        }


        /// <summary>
        /// How builds are triggered from this definition
        /// </summary>
        /// <value>How builds are triggered from this definition</value>
        [DataMember(Name = "triggerType", EmitDefaultValue = false)]
        public TriggerTypeEnum? TriggerType { get; set; }
        /// <summary>
        /// A value that indicates whether builds can be queued against this definition.
        /// </summary>
        /// <value>A value that indicates whether builds can be queued against this definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueueStatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled = 1,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 2,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 3

        }


        /// <summary>
        /// A value that indicates whether builds can be queued against this definition.
        /// </summary>
        /// <value>A value that indicates whether builds can be queued against this definition.</value>
        [DataMember(Name = "queueStatus", EmitDefaultValue = false)]
        public QueueStatusEnum? QueueStatus { get; set; }
        /// <summary>
        /// The type of the definition.
        /// </summary>
        /// <value>The type of the definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Xaml for value: xaml
            /// </summary>
            [EnumMember(Value = "xaml")]
            Xaml = 1,

            /// <summary>
            /// Enum Build for value: build
            /// </summary>
            [EnumMember(Value = "build")]
            Build = 2

        }


        /// <summary>
        /// The type of the definition.
        /// </summary>
        /// <value>The type of the definition.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="XamlBuildDefinition" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="batchSize">Batch size of the definition.</param>
        /// <param name="buildArgs">buildArgs.</param>
        /// <param name="continuousIntegrationQuietPeriod">The continuous integration quiet period.</param>
        /// <param name="controller">controller.</param>
        /// <param name="createdOn">The date this definition was created.</param>
        /// <param name="defaultDropLocation">Default drop location for builds from this definition.</param>
        /// <param name="description">Description of the definition.</param>
        /// <param name="lastBuild">lastBuild.</param>
        /// <param name="repository">repository.</param>
        /// <param name="supportedReasons">The reasons supported by the template.</param>
        /// <param name="triggerType">How builds are triggered from this definition.</param>
        /// <param name="createdDate">The date this version of the definition was created..</param>
        /// <param name="id">The ID of the referenced definition..</param>
        /// <param name="name">The name of the referenced definition..</param>
        /// <param name="path">The folder path of the definition..</param>
        /// <param name="project">project.</param>
        /// <param name="queueStatus">A value that indicates whether builds can be queued against this definition..</param>
        /// <param name="revision">The definition revision number..</param>
        /// <param name="type">The type of the definition..</param>
        /// <param name="uri">The definition&#39;s URI..</param>
        /// <param name="url">The REST URL of the definition..</param>
        public XamlBuildDefinition(ReferenceLinks links = default(ReferenceLinks), int batchSize = default(int), string buildArgs = default(string), int continuousIntegrationQuietPeriod = default(int), BuildController controller = default(BuildController), DateTime createdOn = default(DateTime), string defaultDropLocation = default(string), string description = default(string), XamlBuildReference lastBuild = default(XamlBuildReference), BuildRepository repository = default(BuildRepository), SupportedReasonsEnum? supportedReasons = default(SupportedReasonsEnum?), TriggerTypeEnum? triggerType = default(TriggerTypeEnum?), DateTime createdDate = default(DateTime), int id = default(int), string name = default(string), string path = default(string), TeamProjectReference project = default(TeamProjectReference), QueueStatusEnum? queueStatus = default(QueueStatusEnum?), int revision = default(int), TypeEnum? type = default(TypeEnum?), string uri = default(string), string url = default(string))
        {
            this.Links = links;
            this.BatchSize = batchSize;
            this.BuildArgs = buildArgs;
            this.ContinuousIntegrationQuietPeriod = continuousIntegrationQuietPeriod;
            this.Controller = controller;
            this.CreatedOn = createdOn;
            this.DefaultDropLocation = defaultDropLocation;
            this.Description = description;
            this.LastBuild = lastBuild;
            this.Repository = repository;
            this.SupportedReasons = supportedReasons;
            this.TriggerType = triggerType;
            this.CreatedDate = createdDate;
            this.Id = id;
            this.Name = name;
            this.Path = path;
            this.Project = project;
            this.QueueStatus = queueStatus;
            this.Revision = revision;
            this.Type = type;
            this.Uri = uri;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public ReferenceLinks Links { get; set; }

        /// <summary>
        /// Batch size of the definition
        /// </summary>
        /// <value>Batch size of the definition</value>
        [DataMember(Name = "batchSize", EmitDefaultValue = false)]
        public int BatchSize { get; set; }

        /// <summary>
        /// Gets or Sets BuildArgs
        /// </summary>
        [DataMember(Name = "buildArgs", EmitDefaultValue = false)]
        public string BuildArgs { get; set; }

        /// <summary>
        /// The continuous integration quiet period
        /// </summary>
        /// <value>The continuous integration quiet period</value>
        [DataMember(Name = "continuousIntegrationQuietPeriod", EmitDefaultValue = false)]
        public int ContinuousIntegrationQuietPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Controller
        /// </summary>
        [DataMember(Name = "controller", EmitDefaultValue = false)]
        public BuildController Controller { get; set; }

        /// <summary>
        /// The date this definition was created
        /// </summary>
        /// <value>The date this definition was created</value>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Default drop location for builds from this definition
        /// </summary>
        /// <value>Default drop location for builds from this definition</value>
        [DataMember(Name = "defaultDropLocation", EmitDefaultValue = false)]
        public string DefaultDropLocation { get; set; }

        /// <summary>
        /// Description of the definition
        /// </summary>
        /// <value>Description of the definition</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LastBuild
        /// </summary>
        [DataMember(Name = "lastBuild", EmitDefaultValue = false)]
        public XamlBuildReference LastBuild { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public BuildRepository Repository { get; set; }

        /// <summary>
        /// The date this version of the definition was created.
        /// </summary>
        /// <value>The date this version of the definition was created.</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// The ID of the referenced definition.
        /// </summary>
        /// <value>The ID of the referenced definition.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the referenced definition.
        /// </summary>
        /// <value>The name of the referenced definition.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The folder path of the definition.
        /// </summary>
        /// <value>The folder path of the definition.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public TeamProjectReference Project { get; set; }

        /// <summary>
        /// The definition revision number.
        /// </summary>
        /// <value>The definition revision number.</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// The definition&#39;s URI.
        /// </summary>
        /// <value>The definition&#39;s URI.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The REST URL of the definition.
        /// </summary>
        /// <value>The REST URL of the definition.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class XamlBuildDefinition {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  BuildArgs: ").Append(BuildArgs).Append("\n");
            sb.Append("  ContinuousIntegrationQuietPeriod: ").Append(ContinuousIntegrationQuietPeriod).Append("\n");
            sb.Append("  Controller: ").Append(Controller).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DefaultDropLocation: ").Append(DefaultDropLocation).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LastBuild: ").Append(LastBuild).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  SupportedReasons: ").Append(SupportedReasons).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  QueueStatus: ").Append(QueueStatus).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XamlBuildDefinition);
        }

        /// <summary>
        /// Returns true if XamlBuildDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of XamlBuildDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XamlBuildDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    this.BatchSize.Equals(input.BatchSize)
                ) && 
                (
                    this.BuildArgs == input.BuildArgs ||
                    (this.BuildArgs != null &&
                    this.BuildArgs.Equals(input.BuildArgs))
                ) && 
                (
                    this.ContinuousIntegrationQuietPeriod == input.ContinuousIntegrationQuietPeriod ||
                    this.ContinuousIntegrationQuietPeriod.Equals(input.ContinuousIntegrationQuietPeriod)
                ) && 
                (
                    this.Controller == input.Controller ||
                    (this.Controller != null &&
                    this.Controller.Equals(input.Controller))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.DefaultDropLocation == input.DefaultDropLocation ||
                    (this.DefaultDropLocation != null &&
                    this.DefaultDropLocation.Equals(input.DefaultDropLocation))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LastBuild == input.LastBuild ||
                    (this.LastBuild != null &&
                    this.LastBuild.Equals(input.LastBuild))
                ) && 
                (
                    this.Repository == input.Repository ||
                    (this.Repository != null &&
                    this.Repository.Equals(input.Repository))
                ) && 
                (
                    this.SupportedReasons == input.SupportedReasons ||
                    this.SupportedReasons.Equals(input.SupportedReasons)
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    this.TriggerType.Equals(input.TriggerType)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.QueueStatus == input.QueueStatus ||
                    this.QueueStatus.Equals(input.QueueStatus)
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BatchSize.GetHashCode();
                if (this.BuildArgs != null)
                {
                    hashCode = (hashCode * 59) + this.BuildArgs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContinuousIntegrationQuietPeriod.GetHashCode();
                if (this.Controller != null)
                {
                    hashCode = (hashCode * 59) + this.Controller.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.DefaultDropLocation != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultDropLocation.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LastBuild != null)
                {
                    hashCode = (hashCode * 59) + this.LastBuild.GetHashCode();
                }
                if (this.Repository != null)
                {
                    hashCode = (hashCode * 59) + this.Repository.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportedReasons.GetHashCode();
                hashCode = (hashCode * 59) + this.TriggerType.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
