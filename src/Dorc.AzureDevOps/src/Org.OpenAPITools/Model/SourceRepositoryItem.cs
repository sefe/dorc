/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an item in a repository from a source provider.
    /// </summary>
    [DataContract(Name = "SourceRepositoryItem")]
    public partial class SourceRepositoryItem : IEquatable<SourceRepositoryItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceRepositoryItem" /> class.
        /// </summary>
        /// <param name="isContainer">Whether the item is able to have sub-items (e.g., is a folder)..</param>
        /// <param name="path">The full path of the item, relative to the root of the repository..</param>
        /// <param name="type">The type of the item (folder, file, etc)..</param>
        /// <param name="url">The URL of the item..</param>
        public SourceRepositoryItem(bool isContainer = default(bool), string path = default(string), string type = default(string), string url = default(string))
        {
            this.IsContainer = isContainer;
            this.Path = path;
            this.Type = type;
            this.Url = url;
        }

        /// <summary>
        /// Whether the item is able to have sub-items (e.g., is a folder).
        /// </summary>
        /// <value>Whether the item is able to have sub-items (e.g., is a folder).</value>
        [DataMember(Name = "isContainer", EmitDefaultValue = true)]
        public bool IsContainer { get; set; }

        /// <summary>
        /// The full path of the item, relative to the root of the repository.
        /// </summary>
        /// <value>The full path of the item, relative to the root of the repository.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The type of the item (folder, file, etc).
        /// </summary>
        /// <value>The type of the item (folder, file, etc).</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the item.
        /// </summary>
        /// <value>The URL of the item.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceRepositoryItem {\n");
            sb.Append("  IsContainer: ").Append(IsContainer).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceRepositoryItem);
        }

        /// <summary>
        /// Returns true if SourceRepositoryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceRepositoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceRepositoryItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsContainer == input.IsContainer ||
                    this.IsContainer.Equals(input.IsContainer)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsContainer.GetHashCode();
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
