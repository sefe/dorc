/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a reference to a build.
    /// </summary>
    [DataContract(Name = "BuildReference")]
    public partial class BuildReference : IEquatable<BuildReference>, IValidatableObject
    {
        /// <summary>
        /// The build result.
        /// </summary>
        /// <value>The build result.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum PartiallySucceeded for value: partiallySucceeded
            /// </summary>
            [EnumMember(Value = "partiallySucceeded")]
            PartiallySucceeded = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 5

        }


        /// <summary>
        /// The build result.
        /// </summary>
        /// <value>The build result.</value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public ResultEnum? Result { get; set; }
        /// <summary>
        /// The build status.
        /// </summary>
        /// <value>The build status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum InProgress for value: inProgress
            /// </summary>
            [EnumMember(Value = "inProgress")]
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3,

            /// <summary>
            /// Enum Cancelling for value: cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            Cancelling = 4,

            /// <summary>
            /// Enum Postponed for value: postponed
            /// </summary>
            [EnumMember(Value = "postponed")]
            Postponed = 5,

            /// <summary>
            /// Enum NotStarted for value: notStarted
            /// </summary>
            [EnumMember(Value = "notStarted")]
            NotStarted = 6,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 7

        }


        /// <summary>
        /// The build status.
        /// </summary>
        /// <value>The build status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildReference" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="buildNumber">The build number..</param>
        /// <param name="deleted">Indicates whether the build has been deleted..</param>
        /// <param name="finishTime">The time that the build was completed..</param>
        /// <param name="id">The ID of the build..</param>
        /// <param name="queueTime">The time that the build was queued..</param>
        /// <param name="requestedFor">requestedFor.</param>
        /// <param name="result">The build result..</param>
        /// <param name="startTime">The time that the build was started..</param>
        /// <param name="status">The build status..</param>
        public BuildReference(ReferenceLinks links = default(ReferenceLinks), string buildNumber = default(string), bool deleted = default(bool), DateTime finishTime = default(DateTime), int id = default(int), DateTime queueTime = default(DateTime), IdentityRef requestedFor = default(IdentityRef), ResultEnum? result = default(ResultEnum?), DateTime startTime = default(DateTime), StatusEnum? status = default(StatusEnum?))
        {
            this.Links = links;
            this.BuildNumber = buildNumber;
            this.Deleted = deleted;
            this.FinishTime = finishTime;
            this.Id = id;
            this.QueueTime = queueTime;
            this.RequestedFor = requestedFor;
            this.Result = result;
            this.StartTime = startTime;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public ReferenceLinks Links { get; set; }

        /// <summary>
        /// The build number.
        /// </summary>
        /// <value>The build number.</value>
        [DataMember(Name = "buildNumber", EmitDefaultValue = false)]
        public string BuildNumber { get; set; }

        /// <summary>
        /// Indicates whether the build has been deleted.
        /// </summary>
        /// <value>Indicates whether the build has been deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// The time that the build was completed.
        /// </summary>
        /// <value>The time that the build was completed.</value>
        [DataMember(Name = "finishTime", EmitDefaultValue = false)]
        public DateTime FinishTime { get; set; }

        /// <summary>
        /// The ID of the build.
        /// </summary>
        /// <value>The ID of the build.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The time that the build was queued.
        /// </summary>
        /// <value>The time that the build was queued.</value>
        [DataMember(Name = "queueTime", EmitDefaultValue = false)]
        public DateTime QueueTime { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFor
        /// </summary>
        [DataMember(Name = "requestedFor", EmitDefaultValue = false)]
        public IdentityRef RequestedFor { get; set; }

        /// <summary>
        /// The time that the build was started.
        /// </summary>
        /// <value>The time that the build was started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildReference {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  BuildNumber: ").Append(BuildNumber).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  FinishTime: ").Append(FinishTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QueueTime: ").Append(QueueTime).Append("\n");
            sb.Append("  RequestedFor: ").Append(RequestedFor).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildReference);
        }

        /// <summary>
        /// Returns true if BuildReference instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.BuildNumber == input.BuildNumber ||
                    (this.BuildNumber != null &&
                    this.BuildNumber.Equals(input.BuildNumber))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.FinishTime == input.FinishTime ||
                    (this.FinishTime != null &&
                    this.FinishTime.Equals(input.FinishTime))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.QueueTime == input.QueueTime ||
                    (this.QueueTime != null &&
                    this.QueueTime.Equals(input.QueueTime))
                ) && 
                (
                    this.RequestedFor == input.RequestedFor ||
                    (this.RequestedFor != null &&
                    this.RequestedFor.Equals(input.RequestedFor))
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.BuildNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BuildNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.FinishTime != null)
                {
                    hashCode = (hashCode * 59) + this.FinishTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.QueueTime != null)
                {
                    hashCode = (hashCode * 59) + this.QueueTime.GetHashCode();
                }
                if (this.RequestedFor != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedFor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Result.GetHashCode();
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
