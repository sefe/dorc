/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data representation of an information node associated with a build
    /// </summary>
    [DataContract(Name = "InformationNode")]
    public partial class InformationNode : IEquatable<InformationNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InformationNode" /> class.
        /// </summary>
        /// <param name="fields">Fields of the information node.</param>
        /// <param name="lastModifiedBy">Process or person that last modified this node.</param>
        /// <param name="lastModifiedDate">Date this node was last modified.</param>
        /// <param name="nodeId">Node Id of this information node.</param>
        /// <param name="parentId">Id of parent node (xml tree).</param>
        /// <param name="type">The type of the information node.</param>
        public InformationNode(Dictionary<string, string> fields = default(Dictionary<string, string>), string lastModifiedBy = default(string), DateTime lastModifiedDate = default(DateTime), int nodeId = default(int), int parentId = default(int), string type = default(string))
        {
            this.Fields = fields;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedDate = lastModifiedDate;
            this.NodeId = nodeId;
            this.ParentId = parentId;
            this.Type = type;
        }

        /// <summary>
        /// Fields of the information node
        /// </summary>
        /// <value>Fields of the information node</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Dictionary<string, string> Fields { get; set; }

        /// <summary>
        /// Process or person that last modified this node
        /// </summary>
        /// <value>Process or person that last modified this node</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Date this node was last modified
        /// </summary>
        /// <value>Date this node was last modified</value>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Node Id of this information node
        /// </summary>
        /// <value>Node Id of this information node</value>
        [DataMember(Name = "nodeId", EmitDefaultValue = false)]
        public int NodeId { get; set; }

        /// <summary>
        /// Id of parent node (xml tree)
        /// </summary>
        /// <value>Id of parent node (xml tree)</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public int ParentId { get; set; }

        /// <summary>
        /// The type of the information node
        /// </summary>
        /// <value>The type of the information node</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InformationNode {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InformationNode);
        }

        /// <summary>
        /// Returns true if InformationNode instances are equal
        /// </summary>
        /// <param name="input">Instance of InformationNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InformationNode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) && 
                (
                    this.NodeId == input.NodeId ||
                    this.NodeId.Equals(input.NodeId)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    this.ParentId.Equals(input.ParentId)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                if (this.LastModifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedBy.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NodeId.GetHashCode();
                hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
