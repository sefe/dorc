/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContinuousDeploymentDefinition
    /// </summary>
    [DataContract(Name = "ContinuousDeploymentDefinition")]
    public partial class ContinuousDeploymentDefinition : IEquatable<ContinuousDeploymentDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContinuousDeploymentDefinition" /> class.
        /// </summary>
        /// <param name="connectedService">connectedService.</param>
        /// <param name="definition">definition.</param>
        /// <param name="gitBranch">gitBranch.</param>
        /// <param name="hostedServiceName">hostedServiceName.</param>
        /// <param name="project">project.</param>
        /// <param name="repositoryId">repositoryId.</param>
        /// <param name="storageAccountName">storageAccountName.</param>
        /// <param name="subscriptionId">subscriptionId.</param>
        /// <param name="website">website.</param>
        /// <param name="webspace">webspace.</param>
        public ContinuousDeploymentDefinition(WebApiConnectedServiceRef connectedService = default(WebApiConnectedServiceRef), XamlDefinitionReference definition = default(XamlDefinitionReference), string gitBranch = default(string), string hostedServiceName = default(string), TeamProjectReference project = default(TeamProjectReference), string repositoryId = default(string), string storageAccountName = default(string), string subscriptionId = default(string), string website = default(string), string webspace = default(string))
        {
            this.ConnectedService = connectedService;
            this.Definition = definition;
            this.GitBranch = gitBranch;
            this.HostedServiceName = hostedServiceName;
            this.Project = project;
            this.RepositoryId = repositoryId;
            this.StorageAccountName = storageAccountName;
            this.SubscriptionId = subscriptionId;
            this.Website = website;
            this.Webspace = webspace;
        }

        /// <summary>
        /// Gets or Sets ConnectedService
        /// </summary>
        [DataMember(Name = "connectedService", EmitDefaultValue = false)]
        public WebApiConnectedServiceRef ConnectedService { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public XamlDefinitionReference Definition { get; set; }

        /// <summary>
        /// Gets or Sets GitBranch
        /// </summary>
        [DataMember(Name = "gitBranch", EmitDefaultValue = false)]
        public string GitBranch { get; set; }

        /// <summary>
        /// Gets or Sets HostedServiceName
        /// </summary>
        [DataMember(Name = "hostedServiceName", EmitDefaultValue = false)]
        public string HostedServiceName { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public TeamProjectReference Project { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryId
        /// </summary>
        [DataMember(Name = "repositoryId", EmitDefaultValue = false)]
        public string RepositoryId { get; set; }

        /// <summary>
        /// Gets or Sets StorageAccountName
        /// </summary>
        [DataMember(Name = "storageAccountName", EmitDefaultValue = false)]
        public string StorageAccountName { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name = "subscriptionId", EmitDefaultValue = false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Webspace
        /// </summary>
        [DataMember(Name = "webspace", EmitDefaultValue = false)]
        public string Webspace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContinuousDeploymentDefinition {\n");
            sb.Append("  ConnectedService: ").Append(ConnectedService).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  GitBranch: ").Append(GitBranch).Append("\n");
            sb.Append("  HostedServiceName: ").Append(HostedServiceName).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  RepositoryId: ").Append(RepositoryId).Append("\n");
            sb.Append("  StorageAccountName: ").Append(StorageAccountName).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Webspace: ").Append(Webspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContinuousDeploymentDefinition);
        }

        /// <summary>
        /// Returns true if ContinuousDeploymentDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ContinuousDeploymentDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContinuousDeploymentDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectedService == input.ConnectedService ||
                    (this.ConnectedService != null &&
                    this.ConnectedService.Equals(input.ConnectedService))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.GitBranch == input.GitBranch ||
                    (this.GitBranch != null &&
                    this.GitBranch.Equals(input.GitBranch))
                ) && 
                (
                    this.HostedServiceName == input.HostedServiceName ||
                    (this.HostedServiceName != null &&
                    this.HostedServiceName.Equals(input.HostedServiceName))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.RepositoryId == input.RepositoryId ||
                    (this.RepositoryId != null &&
                    this.RepositoryId.Equals(input.RepositoryId))
                ) && 
                (
                    this.StorageAccountName == input.StorageAccountName ||
                    (this.StorageAccountName != null &&
                    this.StorageAccountName.Equals(input.StorageAccountName))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Webspace == input.Webspace ||
                    (this.Webspace != null &&
                    this.Webspace.Equals(input.Webspace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectedService != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectedService.GetHashCode();
                }
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                if (this.GitBranch != null)
                {
                    hashCode = (hashCode * 59) + this.GitBranch.GetHashCode();
                }
                if (this.HostedServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.HostedServiceName.GetHashCode();
                }
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                if (this.RepositoryId != null)
                {
                    hashCode = (hashCode * 59) + this.RepositoryId.GetHashCode();
                }
                if (this.StorageAccountName != null)
                {
                    hashCode = (hashCode * 59) + this.StorageAccountName.GetHashCode();
                }
                if (this.SubscriptionId != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionId.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.Webspace != null)
                {
                    hashCode = (hashCode * 59) + this.Webspace.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
