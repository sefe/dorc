/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents information about resources used by builds in the system.
    /// </summary>
    [DataContract(Name = "BuildResourceUsage")]
    public partial class BuildResourceUsage : IEquatable<BuildResourceUsage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildResourceUsage" /> class.
        /// </summary>
        /// <param name="distributedTaskAgents">The number of build agents..</param>
        /// <param name="paidPrivateAgentSlots">The number of paid private agent slots..</param>
        /// <param name="totalUsage">The total usage..</param>
        /// <param name="xamlControllers">The number of XAML controllers..</param>
        public BuildResourceUsage(int distributedTaskAgents = default(int), int paidPrivateAgentSlots = default(int), int totalUsage = default(int), int xamlControllers = default(int))
        {
            this.DistributedTaskAgents = distributedTaskAgents;
            this.PaidPrivateAgentSlots = paidPrivateAgentSlots;
            this.TotalUsage = totalUsage;
            this.XamlControllers = xamlControllers;
        }

        /// <summary>
        /// The number of build agents.
        /// </summary>
        /// <value>The number of build agents.</value>
        [DataMember(Name = "distributedTaskAgents", EmitDefaultValue = false)]
        public int DistributedTaskAgents { get; set; }

        /// <summary>
        /// The number of paid private agent slots.
        /// </summary>
        /// <value>The number of paid private agent slots.</value>
        [DataMember(Name = "paidPrivateAgentSlots", EmitDefaultValue = false)]
        public int PaidPrivateAgentSlots { get; set; }

        /// <summary>
        /// The total usage.
        /// </summary>
        /// <value>The total usage.</value>
        [DataMember(Name = "totalUsage", EmitDefaultValue = false)]
        public int TotalUsage { get; set; }

        /// <summary>
        /// The number of XAML controllers.
        /// </summary>
        /// <value>The number of XAML controllers.</value>
        [DataMember(Name = "xamlControllers", EmitDefaultValue = false)]
        public int XamlControllers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildResourceUsage {\n");
            sb.Append("  DistributedTaskAgents: ").Append(DistributedTaskAgents).Append("\n");
            sb.Append("  PaidPrivateAgentSlots: ").Append(PaidPrivateAgentSlots).Append("\n");
            sb.Append("  TotalUsage: ").Append(TotalUsage).Append("\n");
            sb.Append("  XamlControllers: ").Append(XamlControllers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildResourceUsage);
        }

        /// <summary>
        /// Returns true if BuildResourceUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildResourceUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildResourceUsage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DistributedTaskAgents == input.DistributedTaskAgents ||
                    this.DistributedTaskAgents.Equals(input.DistributedTaskAgents)
                ) && 
                (
                    this.PaidPrivateAgentSlots == input.PaidPrivateAgentSlots ||
                    this.PaidPrivateAgentSlots.Equals(input.PaidPrivateAgentSlots)
                ) && 
                (
                    this.TotalUsage == input.TotalUsage ||
                    this.TotalUsage.Equals(input.TotalUsage)
                ) && 
                (
                    this.XamlControllers == input.XamlControllers ||
                    this.XamlControllers.Equals(input.XamlControllers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DistributedTaskAgents.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidPrivateAgentSlots.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalUsage.GetHashCode();
                hashCode = (hashCode * 59) + this.XamlControllers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
