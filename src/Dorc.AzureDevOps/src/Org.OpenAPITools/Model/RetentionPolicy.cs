/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a retention policy for a build definition.
    /// </summary>
    [DataContract(Name = "RetentionPolicy")]
    public partial class RetentionPolicy : IEquatable<RetentionPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicy" /> class.
        /// </summary>
        /// <param name="artifacts">artifacts.</param>
        /// <param name="artifactTypesToDelete">artifactTypesToDelete.</param>
        /// <param name="branches">branches.</param>
        /// <param name="daysToKeep">The number of days to keep builds..</param>
        /// <param name="deleteBuildRecord">Indicates whether the build record itself should be deleted..</param>
        /// <param name="deleteTestResults">Indicates whether to delete test results associated with the build..</param>
        /// <param name="minimumToKeep">The minimum number of builds to keep..</param>
        public RetentionPolicy(List<string> artifacts = default(List<string>), List<string> artifactTypesToDelete = default(List<string>), List<string> branches = default(List<string>), int daysToKeep = default(int), bool deleteBuildRecord = default(bool), bool deleteTestResults = default(bool), int minimumToKeep = default(int))
        {
            this.Artifacts = artifacts;
            this.ArtifactTypesToDelete = artifactTypesToDelete;
            this.Branches = branches;
            this.DaysToKeep = daysToKeep;
            this.DeleteBuildRecord = deleteBuildRecord;
            this.DeleteTestResults = deleteTestResults;
            this.MinimumToKeep = minimumToKeep;
        }

        /// <summary>
        /// Gets or Sets Artifacts
        /// </summary>
        [DataMember(Name = "artifacts", EmitDefaultValue = false)]
        public List<string> Artifacts { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactTypesToDelete
        /// </summary>
        [DataMember(Name = "artifactTypesToDelete", EmitDefaultValue = false)]
        public List<string> ArtifactTypesToDelete { get; set; }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name = "branches", EmitDefaultValue = false)]
        public List<string> Branches { get; set; }

        /// <summary>
        /// The number of days to keep builds.
        /// </summary>
        /// <value>The number of days to keep builds.</value>
        [DataMember(Name = "daysToKeep", EmitDefaultValue = false)]
        public int DaysToKeep { get; set; }

        /// <summary>
        /// Indicates whether the build record itself should be deleted.
        /// </summary>
        /// <value>Indicates whether the build record itself should be deleted.</value>
        [DataMember(Name = "deleteBuildRecord", EmitDefaultValue = true)]
        public bool DeleteBuildRecord { get; set; }

        /// <summary>
        /// Indicates whether to delete test results associated with the build.
        /// </summary>
        /// <value>Indicates whether to delete test results associated with the build.</value>
        [DataMember(Name = "deleteTestResults", EmitDefaultValue = true)]
        public bool DeleteTestResults { get; set; }

        /// <summary>
        /// The minimum number of builds to keep.
        /// </summary>
        /// <value>The minimum number of builds to keep.</value>
        [DataMember(Name = "minimumToKeep", EmitDefaultValue = false)]
        public int MinimumToKeep { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetentionPolicy {\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("  ArtifactTypesToDelete: ").Append(ArtifactTypesToDelete).Append("\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  DaysToKeep: ").Append(DaysToKeep).Append("\n");
            sb.Append("  DeleteBuildRecord: ").Append(DeleteBuildRecord).Append("\n");
            sb.Append("  DeleteTestResults: ").Append(DeleteTestResults).Append("\n");
            sb.Append("  MinimumToKeep: ").Append(MinimumToKeep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetentionPolicy);
        }

        /// <summary>
        /// Returns true if RetentionPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of RetentionPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetentionPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Artifacts == input.Artifacts ||
                    this.Artifacts != null &&
                    input.Artifacts != null &&
                    this.Artifacts.SequenceEqual(input.Artifacts)
                ) && 
                (
                    this.ArtifactTypesToDelete == input.ArtifactTypesToDelete ||
                    this.ArtifactTypesToDelete != null &&
                    input.ArtifactTypesToDelete != null &&
                    this.ArtifactTypesToDelete.SequenceEqual(input.ArtifactTypesToDelete)
                ) && 
                (
                    this.Branches == input.Branches ||
                    this.Branches != null &&
                    input.Branches != null &&
                    this.Branches.SequenceEqual(input.Branches)
                ) && 
                (
                    this.DaysToKeep == input.DaysToKeep ||
                    this.DaysToKeep.Equals(input.DaysToKeep)
                ) && 
                (
                    this.DeleteBuildRecord == input.DeleteBuildRecord ||
                    this.DeleteBuildRecord.Equals(input.DeleteBuildRecord)
                ) && 
                (
                    this.DeleteTestResults == input.DeleteTestResults ||
                    this.DeleteTestResults.Equals(input.DeleteTestResults)
                ) && 
                (
                    this.MinimumToKeep == input.MinimumToKeep ||
                    this.MinimumToKeep.Equals(input.MinimumToKeep)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Artifacts != null)
                {
                    hashCode = (hashCode * 59) + this.Artifacts.GetHashCode();
                }
                if (this.ArtifactTypesToDelete != null)
                {
                    hashCode = (hashCode * 59) + this.ArtifactTypesToDelete.GetHashCode();
                }
                if (this.Branches != null)
                {
                    hashCode = (hashCode * 59) + this.Branches.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DaysToKeep.GetHashCode();
                hashCode = (hashCode * 59) + this.DeleteBuildRecord.GetHashCode();
                hashCode = (hashCode * 59) + this.DeleteTestResults.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumToKeep.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
