/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SourceProviderAttributes
    /// </summary>
    [DataContract(Name = "SourceProviderAttributes")]
    public partial class SourceProviderAttributes : IEquatable<SourceProviderAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceProviderAttributes" /> class.
        /// </summary>
        /// <param name="name">The name of the source provider..</param>
        /// <param name="supportedCapabilities">The capabilities supported by this source provider..</param>
        /// <param name="supportedTriggers">The types of triggers supported by this source provider..</param>
        public SourceProviderAttributes(string name = default(string), Dictionary<string, bool> supportedCapabilities = default(Dictionary<string, bool>), List<SupportedTrigger> supportedTriggers = default(List<SupportedTrigger>))
        {
            this.Name = name;
            this.SupportedCapabilities = supportedCapabilities;
            this.SupportedTriggers = supportedTriggers;
        }

        /// <summary>
        /// The name of the source provider.
        /// </summary>
        /// <value>The name of the source provider.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The capabilities supported by this source provider.
        /// </summary>
        /// <value>The capabilities supported by this source provider.</value>
        [DataMember(Name = "supportedCapabilities", EmitDefaultValue = false)]
        public Dictionary<string, bool> SupportedCapabilities { get; set; }

        /// <summary>
        /// The types of triggers supported by this source provider.
        /// </summary>
        /// <value>The types of triggers supported by this source provider.</value>
        [DataMember(Name = "supportedTriggers", EmitDefaultValue = false)]
        public List<SupportedTrigger> SupportedTriggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceProviderAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportedCapabilities: ").Append(SupportedCapabilities).Append("\n");
            sb.Append("  SupportedTriggers: ").Append(SupportedTriggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceProviderAttributes);
        }

        /// <summary>
        /// Returns true if SourceProviderAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceProviderAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceProviderAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupportedCapabilities == input.SupportedCapabilities ||
                    this.SupportedCapabilities != null &&
                    input.SupportedCapabilities != null &&
                    this.SupportedCapabilities.SequenceEqual(input.SupportedCapabilities)
                ) && 
                (
                    this.SupportedTriggers == input.SupportedTriggers ||
                    this.SupportedTriggers != null &&
                    input.SupportedTriggers != null &&
                    this.SupportedTriggers.SequenceEqual(input.SupportedTriggers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SupportedCapabilities != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedCapabilities.GetHashCode();
                }
                if (this.SupportedTriggers != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedTriggers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
