/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an input for a build option.
    /// </summary>
    [DataContract(Name = "BuildOptionInputDefinition")]
    public partial class BuildOptionInputDefinition : IEquatable<BuildOptionInputDefinition>, IValidatableObject
    {
        /// <summary>
        /// Indicates the type of the input value.
        /// </summary>
        /// <value>Indicates the type of the input value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 2,

            /// <summary>
            /// Enum StringList for value: stringList
            /// </summary>
            [EnumMember(Value = "stringList")]
            StringList = 3,

            /// <summary>
            /// Enum Radio for value: radio
            /// </summary>
            [EnumMember(Value = "radio")]
            Radio = 4,

            /// <summary>
            /// Enum PickList for value: pickList
            /// </summary>
            [EnumMember(Value = "pickList")]
            PickList = 5,

            /// <summary>
            /// Enum MultiLine for value: multiLine
            /// </summary>
            [EnumMember(Value = "multiLine")]
            MultiLine = 6,

            /// <summary>
            /// Enum BranchFilter for value: branchFilter
            /// </summary>
            [EnumMember(Value = "branchFilter")]
            BranchFilter = 7

        }


        /// <summary>
        /// Indicates the type of the input value.
        /// </summary>
        /// <value>Indicates the type of the input value.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildOptionInputDefinition" /> class.
        /// </summary>
        /// <param name="defaultValue">The default value..</param>
        /// <param name="groupName">The name of the input group that this input belongs to..</param>
        /// <param name="help">help.</param>
        /// <param name="label">The label for the input..</param>
        /// <param name="name">The name of the input..</param>
        /// <param name="options">options.</param>
        /// <param name="required">Indicates whether the input is required to have a value..</param>
        /// <param name="type">Indicates the type of the input value..</param>
        /// <param name="visibleRule">The rule that is applied to determine whether the input is visible in the UI..</param>
        public BuildOptionInputDefinition(string defaultValue = default(string), string groupName = default(string), Dictionary<string, string> help = default(Dictionary<string, string>), string label = default(string), string name = default(string), Dictionary<string, string> options = default(Dictionary<string, string>), bool required = default(bool), TypeEnum? type = default(TypeEnum?), string visibleRule = default(string))
        {
            this.DefaultValue = defaultValue;
            this.GroupName = groupName;
            this.Help = help;
            this.Label = label;
            this.Name = name;
            this.Options = options;
            this.Required = required;
            this.Type = type;
            this.VisibleRule = visibleRule;
        }

        /// <summary>
        /// The default value.
        /// </summary>
        /// <value>The default value.</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The name of the input group that this input belongs to.
        /// </summary>
        /// <value>The name of the input group that this input belongs to.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Help
        /// </summary>
        [DataMember(Name = "help", EmitDefaultValue = false)]
        public Dictionary<string, string> Help { get; set; }

        /// <summary>
        /// The label for the input.
        /// </summary>
        /// <value>The label for the input.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The name of the input.
        /// </summary>
        /// <value>The name of the input.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public Dictionary<string, string> Options { get; set; }

        /// <summary>
        /// Indicates whether the input is required to have a value.
        /// </summary>
        /// <value>Indicates whether the input is required to have a value.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// The rule that is applied to determine whether the input is visible in the UI.
        /// </summary>
        /// <value>The rule that is applied to determine whether the input is visible in the UI.</value>
        [DataMember(Name = "visibleRule", EmitDefaultValue = false)]
        public string VisibleRule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildOptionInputDefinition {\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VisibleRule: ").Append(VisibleRule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildOptionInputDefinition);
        }

        /// <summary>
        /// Returns true if BuildOptionInputDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildOptionInputDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildOptionInputDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Help == input.Help ||
                    this.Help != null &&
                    input.Help != null &&
                    this.Help.SequenceEqual(input.Help)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.VisibleRule == input.VisibleRule ||
                    (this.VisibleRule != null &&
                    this.VisibleRule.Equals(input.VisibleRule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Help != null)
                {
                    hashCode = (hashCode * 59) + this.Help.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.VisibleRule != null)
                {
                    hashCode = (hashCode * 59) + this.VisibleRule.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
