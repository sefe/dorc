/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AggregatedResultsAnalysis
    /// </summary>
    [DataContract(Name = "AggregatedResultsAnalysis")]
    public partial class AggregatedResultsAnalysis : IEquatable<AggregatedResultsAnalysis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedResultsAnalysis" /> class.
        /// </summary>
        /// <param name="duration">duration.</param>
        /// <param name="notReportedResultsByOutcome">notReportedResultsByOutcome.</param>
        /// <param name="previousContext">previousContext.</param>
        /// <param name="resultsByOutcome">resultsByOutcome.</param>
        /// <param name="resultsDifference">resultsDifference.</param>
        /// <param name="runSummaryByOutcome">runSummaryByOutcome.</param>
        /// <param name="runSummaryByState">runSummaryByState.</param>
        /// <param name="totalTests">totalTests.</param>
        public AggregatedResultsAnalysis(string duration = default(string), Dictionary<string, AggregatedResultsByOutcome> notReportedResultsByOutcome = default(Dictionary<string, AggregatedResultsByOutcome>), TestResultsContext previousContext = default(TestResultsContext), Dictionary<string, AggregatedResultsByOutcome> resultsByOutcome = default(Dictionary<string, AggregatedResultsByOutcome>), AggregatedResultsDifference resultsDifference = default(AggregatedResultsDifference), Dictionary<string, AggregatedRunsByOutcome> runSummaryByOutcome = default(Dictionary<string, AggregatedRunsByOutcome>), Dictionary<string, AggregatedRunsByState> runSummaryByState = default(Dictionary<string, AggregatedRunsByState>), int totalTests = default(int))
        {
            this.Duration = duration;
            this.NotReportedResultsByOutcome = notReportedResultsByOutcome;
            this.PreviousContext = previousContext;
            this.ResultsByOutcome = resultsByOutcome;
            this.ResultsDifference = resultsDifference;
            this.RunSummaryByOutcome = runSummaryByOutcome;
            this.RunSummaryByState = runSummaryByState;
            this.TotalTests = totalTests;
        }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets NotReportedResultsByOutcome
        /// </summary>
        [DataMember(Name = "notReportedResultsByOutcome", EmitDefaultValue = false)]
        public Dictionary<string, AggregatedResultsByOutcome> NotReportedResultsByOutcome { get; set; }

        /// <summary>
        /// Gets or Sets PreviousContext
        /// </summary>
        [DataMember(Name = "previousContext", EmitDefaultValue = false)]
        public TestResultsContext PreviousContext { get; set; }

        /// <summary>
        /// Gets or Sets ResultsByOutcome
        /// </summary>
        [DataMember(Name = "resultsByOutcome", EmitDefaultValue = false)]
        public Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }

        /// <summary>
        /// Gets or Sets ResultsDifference
        /// </summary>
        [DataMember(Name = "resultsDifference", EmitDefaultValue = false)]
        public AggregatedResultsDifference ResultsDifference { get; set; }

        /// <summary>
        /// Gets or Sets RunSummaryByOutcome
        /// </summary>
        [DataMember(Name = "runSummaryByOutcome", EmitDefaultValue = false)]
        public Dictionary<string, AggregatedRunsByOutcome> RunSummaryByOutcome { get; set; }

        /// <summary>
        /// Gets or Sets RunSummaryByState
        /// </summary>
        [DataMember(Name = "runSummaryByState", EmitDefaultValue = false)]
        public Dictionary<string, AggregatedRunsByState> RunSummaryByState { get; set; }

        /// <summary>
        /// Gets or Sets TotalTests
        /// </summary>
        [DataMember(Name = "totalTests", EmitDefaultValue = false)]
        public int TotalTests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedResultsAnalysis {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  NotReportedResultsByOutcome: ").Append(NotReportedResultsByOutcome).Append("\n");
            sb.Append("  PreviousContext: ").Append(PreviousContext).Append("\n");
            sb.Append("  ResultsByOutcome: ").Append(ResultsByOutcome).Append("\n");
            sb.Append("  ResultsDifference: ").Append(ResultsDifference).Append("\n");
            sb.Append("  RunSummaryByOutcome: ").Append(RunSummaryByOutcome).Append("\n");
            sb.Append("  RunSummaryByState: ").Append(RunSummaryByState).Append("\n");
            sb.Append("  TotalTests: ").Append(TotalTests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedResultsAnalysis);
        }

        /// <summary>
        /// Returns true if AggregatedResultsAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedResultsAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedResultsAnalysis input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.NotReportedResultsByOutcome == input.NotReportedResultsByOutcome ||
                    this.NotReportedResultsByOutcome != null &&
                    input.NotReportedResultsByOutcome != null &&
                    this.NotReportedResultsByOutcome.SequenceEqual(input.NotReportedResultsByOutcome)
                ) && 
                (
                    this.PreviousContext == input.PreviousContext ||
                    (this.PreviousContext != null &&
                    this.PreviousContext.Equals(input.PreviousContext))
                ) && 
                (
                    this.ResultsByOutcome == input.ResultsByOutcome ||
                    this.ResultsByOutcome != null &&
                    input.ResultsByOutcome != null &&
                    this.ResultsByOutcome.SequenceEqual(input.ResultsByOutcome)
                ) && 
                (
                    this.ResultsDifference == input.ResultsDifference ||
                    (this.ResultsDifference != null &&
                    this.ResultsDifference.Equals(input.ResultsDifference))
                ) && 
                (
                    this.RunSummaryByOutcome == input.RunSummaryByOutcome ||
                    this.RunSummaryByOutcome != null &&
                    input.RunSummaryByOutcome != null &&
                    this.RunSummaryByOutcome.SequenceEqual(input.RunSummaryByOutcome)
                ) && 
                (
                    this.RunSummaryByState == input.RunSummaryByState ||
                    this.RunSummaryByState != null &&
                    input.RunSummaryByState != null &&
                    this.RunSummaryByState.SequenceEqual(input.RunSummaryByState)
                ) && 
                (
                    this.TotalTests == input.TotalTests ||
                    this.TotalTests.Equals(input.TotalTests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.NotReportedResultsByOutcome != null)
                {
                    hashCode = (hashCode * 59) + this.NotReportedResultsByOutcome.GetHashCode();
                }
                if (this.PreviousContext != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousContext.GetHashCode();
                }
                if (this.ResultsByOutcome != null)
                {
                    hashCode = (hashCode * 59) + this.ResultsByOutcome.GetHashCode();
                }
                if (this.ResultsDifference != null)
                {
                    hashCode = (hashCode * 59) + this.ResultsDifference.GetHashCode();
                }
                if (this.RunSummaryByOutcome != null)
                {
                    hashCode = (hashCode * 59) + this.RunSummaryByOutcome.GetHashCode();
                }
                if (this.RunSummaryByState != null)
                {
                    hashCode = (hashCode * 59) + this.RunSummaryByState.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalTests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
