/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NewRetentionLease
    /// </summary>
    [DataContract(Name = "NewRetentionLease")]
    public partial class NewRetentionLease : IEquatable<NewRetentionLease>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewRetentionLease" /> class.
        /// </summary>
        /// <param name="daysValid">The number of days to consider the lease valid..</param>
        /// <param name="definitionId">The pipeline definition of the run..</param>
        /// <param name="ownerId">User-provided string that identifies the owner of a retention lease..</param>
        /// <param name="protectPipeline">If set, this lease will also prevent the pipeline from being deleted while the lease is still valid..</param>
        /// <param name="runId">The pipeline run to protect..</param>
        public NewRetentionLease(int daysValid = default(int), int definitionId = default(int), string ownerId = default(string), bool protectPipeline = default(bool), int runId = default(int))
        {
            this.DaysValid = daysValid;
            this.DefinitionId = definitionId;
            this.OwnerId = ownerId;
            this.ProtectPipeline = protectPipeline;
            this.RunId = runId;
        }

        /// <summary>
        /// The number of days to consider the lease valid.
        /// </summary>
        /// <value>The number of days to consider the lease valid.</value>
        [DataMember(Name = "daysValid", EmitDefaultValue = false)]
        public int DaysValid { get; set; }

        /// <summary>
        /// The pipeline definition of the run.
        /// </summary>
        /// <value>The pipeline definition of the run.</value>
        [DataMember(Name = "definitionId", EmitDefaultValue = false)]
        public int DefinitionId { get; set; }

        /// <summary>
        /// User-provided string that identifies the owner of a retention lease.
        /// </summary>
        /// <value>User-provided string that identifies the owner of a retention lease.</value>
        [DataMember(Name = "ownerId", EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.
        /// </summary>
        /// <value>If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.</value>
        [DataMember(Name = "protectPipeline", EmitDefaultValue = true)]
        public bool ProtectPipeline { get; set; }

        /// <summary>
        /// The pipeline run to protect.
        /// </summary>
        /// <value>The pipeline run to protect.</value>
        [DataMember(Name = "runId", EmitDefaultValue = false)]
        public int RunId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NewRetentionLease {\n");
            sb.Append("  DaysValid: ").Append(DaysValid).Append("\n");
            sb.Append("  DefinitionId: ").Append(DefinitionId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ProtectPipeline: ").Append(ProtectPipeline).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewRetentionLease);
        }

        /// <summary>
        /// Returns true if NewRetentionLease instances are equal
        /// </summary>
        /// <param name="input">Instance of NewRetentionLease to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewRetentionLease input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DaysValid == input.DaysValid ||
                    this.DaysValid.Equals(input.DaysValid)
                ) && 
                (
                    this.DefinitionId == input.DefinitionId ||
                    this.DefinitionId.Equals(input.DefinitionId)
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.ProtectPipeline == input.ProtectPipeline ||
                    this.ProtectPipeline.Equals(input.ProtectPipeline)
                ) && 
                (
                    this.RunId == input.RunId ||
                    this.RunId.Equals(input.RunId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DaysValid.GetHashCode();
                hashCode = (hashCode * 59) + this.DefinitionId.GetHashCode();
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProtectPipeline.GetHashCode();
                hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
