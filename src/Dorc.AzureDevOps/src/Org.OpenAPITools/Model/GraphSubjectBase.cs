/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GraphSubjectBase
    /// </summary>
    [DataContract(Name = "GraphSubjectBase")]
    public partial class GraphSubjectBase : IEquatable<GraphSubjectBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphSubjectBase" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="descriptor">The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations..</param>
        /// <param name="displayName">This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider..</param>
        /// <param name="url">This url is the full route to the source resource of this graph subject..</param>
        public GraphSubjectBase(ReferenceLinks links = default(ReferenceLinks), string descriptor = default(string), string displayName = default(string), string url = default(string))
        {
            this.Links = links;
            this.Descriptor = descriptor;
            this.DisplayName = displayName;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public ReferenceLinks Links { get; set; }

        /// <summary>
        /// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
        /// </summary>
        /// <value>The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.</value>
        [DataMember(Name = "descriptor", EmitDefaultValue = false)]
        public string Descriptor { get; set; }

        /// <summary>
        /// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
        /// </summary>
        /// <value>This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// This url is the full route to the source resource of this graph subject.
        /// </summary>
        /// <value>This url is the full route to the source resource of this graph subject.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GraphSubjectBase {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraphSubjectBase);
        }

        /// <summary>
        /// Returns true if GraphSubjectBase instances are equal
        /// </summary>
        /// <param name="input">Instance of GraphSubjectBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraphSubjectBase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Descriptor == input.Descriptor ||
                    (this.Descriptor != null &&
                    this.Descriptor.Equals(input.Descriptor))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Descriptor != null)
                {
                    hashCode = (hashCode * 59) + this.Descriptor.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
