/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a template from which new build definitions can be created.
    /// </summary>
    [DataContract(Name = "BuildDefinitionTemplate")]
    public partial class BuildDefinitionTemplate : IEquatable<BuildDefinitionTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildDefinitionTemplate" /> class.
        /// </summary>
        /// <param name="canDelete">Indicates whether the template can be deleted..</param>
        /// <param name="category">The template category..</param>
        /// <param name="defaultHostedQueue">An optional hosted agent queue for the template to use by default..</param>
        /// <param name="description">A description of the template..</param>
        /// <param name="icons">icons.</param>
        /// <param name="iconTaskId">The ID of the task whose icon is used when showing this template in the UI..</param>
        /// <param name="id">The ID of the template..</param>
        /// <param name="name">The name of the template..</param>
        /// <param name="template">template.</param>
        public BuildDefinitionTemplate(bool canDelete = default(bool), string category = default(string), string defaultHostedQueue = default(string), string description = default(string), Dictionary<string, string> icons = default(Dictionary<string, string>), Guid iconTaskId = default(Guid), string id = default(string), string name = default(string), BuildDefinition template = default(BuildDefinition))
        {
            this.CanDelete = canDelete;
            this.Category = category;
            this.DefaultHostedQueue = defaultHostedQueue;
            this.Description = description;
            this.Icons = icons;
            this.IconTaskId = iconTaskId;
            this.Id = id;
            this.Name = name;
            this.Template = template;
        }

        /// <summary>
        /// Indicates whether the template can be deleted.
        /// </summary>
        /// <value>Indicates whether the template can be deleted.</value>
        [DataMember(Name = "canDelete", EmitDefaultValue = true)]
        public bool CanDelete { get; set; }

        /// <summary>
        /// The template category.
        /// </summary>
        /// <value>The template category.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// An optional hosted agent queue for the template to use by default.
        /// </summary>
        /// <value>An optional hosted agent queue for the template to use by default.</value>
        [DataMember(Name = "defaultHostedQueue", EmitDefaultValue = false)]
        public string DefaultHostedQueue { get; set; }

        /// <summary>
        /// A description of the template.
        /// </summary>
        /// <value>A description of the template.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Icons
        /// </summary>
        [DataMember(Name = "icons", EmitDefaultValue = false)]
        public Dictionary<string, string> Icons { get; set; }

        /// <summary>
        /// The ID of the task whose icon is used when showing this template in the UI.
        /// </summary>
        /// <value>The ID of the task whose icon is used when showing this template in the UI.</value>
        [DataMember(Name = "iconTaskId", EmitDefaultValue = false)]
        public Guid IconTaskId { get; set; }

        /// <summary>
        /// The ID of the template.
        /// </summary>
        /// <value>The ID of the template.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the template.
        /// </summary>
        /// <value>The name of the template.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public BuildDefinition Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildDefinitionTemplate {\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DefaultHostedQueue: ").Append(DefaultHostedQueue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Icons: ").Append(Icons).Append("\n");
            sb.Append("  IconTaskId: ").Append(IconTaskId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildDefinitionTemplate);
        }

        /// <summary>
        /// Returns true if BuildDefinitionTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildDefinitionTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildDefinitionTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CanDelete == input.CanDelete ||
                    this.CanDelete.Equals(input.CanDelete)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.DefaultHostedQueue == input.DefaultHostedQueue ||
                    (this.DefaultHostedQueue != null &&
                    this.DefaultHostedQueue.Equals(input.DefaultHostedQueue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Icons == input.Icons ||
                    this.Icons != null &&
                    input.Icons != null &&
                    this.Icons.SequenceEqual(input.Icons)
                ) && 
                (
                    this.IconTaskId == input.IconTaskId ||
                    (this.IconTaskId != null &&
                    this.IconTaskId.Equals(input.IconTaskId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CanDelete.GetHashCode();
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.DefaultHostedQueue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultHostedQueue.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Icons != null)
                {
                    hashCode = (hashCode * 59) + this.Icons.GetHashCode();
                }
                if (this.IconTaskId != null)
                {
                    hashCode = (hashCode * 59) + this.IconTaskId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
