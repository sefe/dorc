/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BuildProcessTemplate
    /// </summary>
    [DataContract(Name = "BuildProcessTemplate")]
    public partial class BuildProcessTemplate : IEquatable<BuildProcessTemplate>, IValidatableObject
    {
        /// <summary>
        /// Defines SupportedReasons
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportedReasonsEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 2,

            /// <summary>
            /// Enum IndividualCI for value: individualCI
            /// </summary>
            [EnumMember(Value = "individualCI")]
            IndividualCI = 3,

            /// <summary>
            /// Enum BatchedCI for value: batchedCI
            /// </summary>
            [EnumMember(Value = "batchedCI")]
            BatchedCI = 4,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 5,

            /// <summary>
            /// Enum ScheduleForced for value: scheduleForced
            /// </summary>
            [EnumMember(Value = "scheduleForced")]
            ScheduleForced = 6,

            /// <summary>
            /// Enum UserCreated for value: userCreated
            /// </summary>
            [EnumMember(Value = "userCreated")]
            UserCreated = 7,

            /// <summary>
            /// Enum ValidateShelveset for value: validateShelveset
            /// </summary>
            [EnumMember(Value = "validateShelveset")]
            ValidateShelveset = 8,

            /// <summary>
            /// Enum CheckInShelveset for value: checkInShelveset
            /// </summary>
            [EnumMember(Value = "checkInShelveset")]
            CheckInShelveset = 9,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 10,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 11,

            /// <summary>
            /// Enum ResourceTrigger for value: resourceTrigger
            /// </summary>
            [EnumMember(Value = "resourceTrigger")]
            ResourceTrigger = 12,

            /// <summary>
            /// Enum Triggered for value: triggered
            /// </summary>
            [EnumMember(Value = "triggered")]
            Triggered = 13,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 14

        }


        /// <summary>
        /// Gets or Sets SupportedReasons
        /// </summary>
        [DataMember(Name = "supportedReasons", EmitDefaultValue = false)]
        public SupportedReasonsEnum? SupportedReasons { get; set; }
        /// <summary>
        /// Defines TemplateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TemplateTypeEnum
        {
            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 1,

            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 2,

            /// <summary>
            /// Enum Upgrade for value: upgrade
            /// </summary>
            [EnumMember(Value = "upgrade")]
            Upgrade = 3

        }


        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "templateType", EmitDefaultValue = false)]
        public TemplateTypeEnum? TemplateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildProcessTemplate" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="fileExists">fileExists.</param>
        /// <param name="id">id.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="serverPath">serverPath.</param>
        /// <param name="supportedReasons">supportedReasons.</param>
        /// <param name="teamProject">teamProject.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="url">url.</param>
        /// <param name="version">version.</param>
        public BuildProcessTemplate(string description = default(string), bool fileExists = default(bool), int id = default(int), string parameters = default(string), string serverPath = default(string), SupportedReasonsEnum? supportedReasons = default(SupportedReasonsEnum?), string teamProject = default(string), TemplateTypeEnum? templateType = default(TemplateTypeEnum?), string url = default(string), string version = default(string))
        {
            this.Description = description;
            this.FileExists = fileExists;
            this.Id = id;
            this.Parameters = parameters;
            this.ServerPath = serverPath;
            this.SupportedReasons = supportedReasons;
            this.TeamProject = teamProject;
            this.TemplateType = templateType;
            this.Url = url;
            this._Version = version;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FileExists
        /// </summary>
        [DataMember(Name = "fileExists", EmitDefaultValue = true)]
        public bool FileExists { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public string Parameters { get; set; }

        /// <summary>
        /// Gets or Sets ServerPath
        /// </summary>
        [DataMember(Name = "serverPath", EmitDefaultValue = false)]
        public string ServerPath { get; set; }

        /// <summary>
        /// Gets or Sets TeamProject
        /// </summary>
        [DataMember(Name = "teamProject", EmitDefaultValue = false)]
        public string TeamProject { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildProcessTemplate {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileExists: ").Append(FileExists).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ServerPath: ").Append(ServerPath).Append("\n");
            sb.Append("  SupportedReasons: ").Append(SupportedReasons).Append("\n");
            sb.Append("  TeamProject: ").Append(TeamProject).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildProcessTemplate);
        }

        /// <summary>
        /// Returns true if BuildProcessTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildProcessTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildProcessTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FileExists == input.FileExists ||
                    this.FileExists.Equals(input.FileExists)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.ServerPath == input.ServerPath ||
                    (this.ServerPath != null &&
                    this.ServerPath.Equals(input.ServerPath))
                ) && 
                (
                    this.SupportedReasons == input.SupportedReasons ||
                    this.SupportedReasons.Equals(input.SupportedReasons)
                ) && 
                (
                    this.TeamProject == input.TeamProject ||
                    (this.TeamProject != null &&
                    this.TeamProject.Equals(input.TeamProject))
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    this.TemplateType.Equals(input.TemplateType)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileExists.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.ServerPath != null)
                {
                    hashCode = (hashCode * 59) + this.ServerPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportedReasons.GetHashCode();
                if (this.TeamProject != null)
                {
                    hashCode = (hashCode * 59) + this.TeamProject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TemplateType.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
