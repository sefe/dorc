/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a change associated with a build.
    /// </summary>
    [DataContract(Name = "Change")]
    public partial class Change : IEquatable<Change>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="displayUri">The location of a user-friendly representation of the resource..</param>
        /// <param name="id">The identifier for the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset ID..</param>
        /// <param name="location">The location of the full representation of the resource..</param>
        /// <param name="message">The description of the change. This might be a commit message or changeset description..</param>
        /// <param name="messageTruncated">Indicates whether the message was truncated..</param>
        /// <param name="pusher">The person or process that pushed the change..</param>
        /// <param name="timestamp">The timestamp for the change..</param>
        /// <param name="type">The type of change. \&quot;commit\&quot;, \&quot;changeset\&quot;, etc..</param>
        public Change(IdentityRef author = default(IdentityRef), string displayUri = default(string), string id = default(string), string location = default(string), string message = default(string), bool messageTruncated = default(bool), string pusher = default(string), DateTime timestamp = default(DateTime), string type = default(string))
        {
            this.Author = author;
            this.DisplayUri = displayUri;
            this.Id = id;
            this.Location = location;
            this.Message = message;
            this.MessageTruncated = messageTruncated;
            this.Pusher = pusher;
            this.Timestamp = timestamp;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public IdentityRef Author { get; set; }

        /// <summary>
        /// The location of a user-friendly representation of the resource.
        /// </summary>
        /// <value>The location of a user-friendly representation of the resource.</value>
        [DataMember(Name = "displayUri", EmitDefaultValue = false)]
        public string DisplayUri { get; set; }

        /// <summary>
        /// The identifier for the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset ID.
        /// </summary>
        /// <value>The identifier for the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The location of the full representation of the resource.
        /// </summary>
        /// <value>The location of the full representation of the resource.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// The description of the change. This might be a commit message or changeset description.
        /// </summary>
        /// <value>The description of the change. This might be a commit message or changeset description.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Indicates whether the message was truncated.
        /// </summary>
        /// <value>Indicates whether the message was truncated.</value>
        [DataMember(Name = "messageTruncated", EmitDefaultValue = true)]
        public bool MessageTruncated { get; set; }

        /// <summary>
        /// The person or process that pushed the change.
        /// </summary>
        /// <value>The person or process that pushed the change.</value>
        [DataMember(Name = "pusher", EmitDefaultValue = false)]
        public string Pusher { get; set; }

        /// <summary>
        /// The timestamp for the change.
        /// </summary>
        /// <value>The timestamp for the change.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// The type of change. \&quot;commit\&quot;, \&quot;changeset\&quot;, etc.
        /// </summary>
        /// <value>The type of change. \&quot;commit\&quot;, \&quot;changeset\&quot;, etc.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Change {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  DisplayUri: ").Append(DisplayUri).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageTruncated: ").Append(MessageTruncated).Append("\n");
            sb.Append("  Pusher: ").Append(Pusher).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Change);
        }

        /// <summary>
        /// Returns true if Change instances are equal
        /// </summary>
        /// <param name="input">Instance of Change to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Change input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.DisplayUri == input.DisplayUri ||
                    (this.DisplayUri != null &&
                    this.DisplayUri.Equals(input.DisplayUri))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessageTruncated == input.MessageTruncated ||
                    this.MessageTruncated.Equals(input.MessageTruncated)
                ) && 
                (
                    this.Pusher == input.Pusher ||
                    (this.Pusher != null &&
                    this.Pusher.Equals(input.Pusher))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.DisplayUri != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayUri.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageTruncated.GetHashCode();
                if (this.Pusher != null)
                {
                    hashCode = (hashCode * 59) + this.Pusher.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
