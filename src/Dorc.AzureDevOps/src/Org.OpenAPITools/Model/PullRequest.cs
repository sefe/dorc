/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a pull request object.  These are retrieved from Source Providers.
    /// </summary>
    [DataContract(Name = "PullRequest")]
    public partial class PullRequest : IEquatable<PullRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PullRequest" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="author">author.</param>
        /// <param name="currentState">Current state of the pull request, e.g. open, merged, closed, conflicts, etc..</param>
        /// <param name="description">Description for the pull request..</param>
        /// <param name="id">Unique identifier for the pull request.</param>
        /// <param name="providerName">The name of the provider this pull request is associated with..</param>
        /// <param name="sourceBranchRef">Source branch ref of this pull request.</param>
        /// <param name="sourceRepositoryOwner">Owner of the source repository of this pull request.</param>
        /// <param name="targetBranchRef">Target branch ref of this pull request.</param>
        /// <param name="targetRepositoryOwner">Owner of the target repository of this pull request.</param>
        /// <param name="title">Title of the pull request..</param>
        public PullRequest(ReferenceLinks links = default(ReferenceLinks), IdentityRef author = default(IdentityRef), string currentState = default(string), string description = default(string), string id = default(string), string providerName = default(string), string sourceBranchRef = default(string), string sourceRepositoryOwner = default(string), string targetBranchRef = default(string), string targetRepositoryOwner = default(string), string title = default(string))
        {
            this.Links = links;
            this.Author = author;
            this.CurrentState = currentState;
            this.Description = description;
            this.Id = id;
            this.ProviderName = providerName;
            this.SourceBranchRef = sourceBranchRef;
            this.SourceRepositoryOwner = sourceRepositoryOwner;
            this.TargetBranchRef = targetBranchRef;
            this.TargetRepositoryOwner = targetRepositoryOwner;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public ReferenceLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public IdentityRef Author { get; set; }

        /// <summary>
        /// Current state of the pull request, e.g. open, merged, closed, conflicts, etc.
        /// </summary>
        /// <value>Current state of the pull request, e.g. open, merged, closed, conflicts, etc.</value>
        [DataMember(Name = "currentState", EmitDefaultValue = false)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Description for the pull request.
        /// </summary>
        /// <value>Description for the pull request.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier for the pull request
        /// </summary>
        /// <value>Unique identifier for the pull request</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the provider this pull request is associated with.
        /// </summary>
        /// <value>The name of the provider this pull request is associated with.</value>
        [DataMember(Name = "providerName", EmitDefaultValue = false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Source branch ref of this pull request
        /// </summary>
        /// <value>Source branch ref of this pull request</value>
        [DataMember(Name = "sourceBranchRef", EmitDefaultValue = false)]
        public string SourceBranchRef { get; set; }

        /// <summary>
        /// Owner of the source repository of this pull request
        /// </summary>
        /// <value>Owner of the source repository of this pull request</value>
        [DataMember(Name = "sourceRepositoryOwner", EmitDefaultValue = false)]
        public string SourceRepositoryOwner { get; set; }

        /// <summary>
        /// Target branch ref of this pull request
        /// </summary>
        /// <value>Target branch ref of this pull request</value>
        [DataMember(Name = "targetBranchRef", EmitDefaultValue = false)]
        public string TargetBranchRef { get; set; }

        /// <summary>
        /// Owner of the target repository of this pull request
        /// </summary>
        /// <value>Owner of the target repository of this pull request</value>
        [DataMember(Name = "targetRepositoryOwner", EmitDefaultValue = false)]
        public string TargetRepositoryOwner { get; set; }

        /// <summary>
        /// Title of the pull request.
        /// </summary>
        /// <value>Title of the pull request.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PullRequest {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  SourceBranchRef: ").Append(SourceBranchRef).Append("\n");
            sb.Append("  SourceRepositoryOwner: ").Append(SourceRepositoryOwner).Append("\n");
            sb.Append("  TargetBranchRef: ").Append(TargetBranchRef).Append("\n");
            sb.Append("  TargetRepositoryOwner: ").Append(TargetRepositoryOwner).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PullRequest);
        }

        /// <summary>
        /// Returns true if PullRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PullRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PullRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.CurrentState == input.CurrentState ||
                    (this.CurrentState != null &&
                    this.CurrentState.Equals(input.CurrentState))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.SourceBranchRef == input.SourceBranchRef ||
                    (this.SourceBranchRef != null &&
                    this.SourceBranchRef.Equals(input.SourceBranchRef))
                ) && 
                (
                    this.SourceRepositoryOwner == input.SourceRepositoryOwner ||
                    (this.SourceRepositoryOwner != null &&
                    this.SourceRepositoryOwner.Equals(input.SourceRepositoryOwner))
                ) && 
                (
                    this.TargetBranchRef == input.TargetBranchRef ||
                    (this.TargetBranchRef != null &&
                    this.TargetBranchRef.Equals(input.TargetBranchRef))
                ) && 
                (
                    this.TargetRepositoryOwner == input.TargetRepositoryOwner ||
                    (this.TargetRepositoryOwner != null &&
                    this.TargetRepositoryOwner.Equals(input.TargetRepositoryOwner))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.CurrentState != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentState.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ProviderName != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderName.GetHashCode();
                }
                if (this.SourceBranchRef != null)
                {
                    hashCode = (hashCode * 59) + this.SourceBranchRef.GetHashCode();
                }
                if (this.SourceRepositoryOwner != null)
                {
                    hashCode = (hashCode * 59) + this.SourceRepositoryOwner.GetHashCode();
                }
                if (this.TargetBranchRef != null)
                {
                    hashCode = (hashCode * 59) + this.TargetBranchRef.GetHashCode();
                }
                if (this.TargetRepositoryOwner != null)
                {
                    hashCode = (hashCode * 59) + this.TargetRepositoryOwner.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
