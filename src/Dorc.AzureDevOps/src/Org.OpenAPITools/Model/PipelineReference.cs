/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Pipeline reference
    /// </summary>
    [DataContract(Name = "PipelineReference")]
    public partial class PipelineReference : IEquatable<PipelineReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineReference" /> class.
        /// </summary>
        /// <param name="jobReference">jobReference.</param>
        /// <param name="phaseReference">phaseReference.</param>
        /// <param name="pipelineId">Reference of the pipeline with which this pipeline instance is related..</param>
        /// <param name="stageReference">stageReference.</param>
        public PipelineReference(JobReference jobReference = default(JobReference), PhaseReference phaseReference = default(PhaseReference), int pipelineId = default(int), StageReference stageReference = default(StageReference))
        {
            this.JobReference = jobReference;
            this.PhaseReference = phaseReference;
            this.PipelineId = pipelineId;
            this.StageReference = stageReference;
        }

        /// <summary>
        /// Gets or Sets JobReference
        /// </summary>
        [DataMember(Name = "jobReference", EmitDefaultValue = false)]
        public JobReference JobReference { get; set; }

        /// <summary>
        /// Gets or Sets PhaseReference
        /// </summary>
        [DataMember(Name = "phaseReference", EmitDefaultValue = false)]
        public PhaseReference PhaseReference { get; set; }

        /// <summary>
        /// Reference of the pipeline with which this pipeline instance is related.
        /// </summary>
        /// <value>Reference of the pipeline with which this pipeline instance is related.</value>
        [DataMember(Name = "pipelineId", EmitDefaultValue = false)]
        public int PipelineId { get; set; }

        /// <summary>
        /// Gets or Sets StageReference
        /// </summary>
        [DataMember(Name = "stageReference", EmitDefaultValue = false)]
        public StageReference StageReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineReference {\n");
            sb.Append("  JobReference: ").Append(JobReference).Append("\n");
            sb.Append("  PhaseReference: ").Append(PhaseReference).Append("\n");
            sb.Append("  PipelineId: ").Append(PipelineId).Append("\n");
            sb.Append("  StageReference: ").Append(StageReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipelineReference);
        }

        /// <summary>
        /// Returns true if PipelineReference instances are equal
        /// </summary>
        /// <param name="input">Instance of PipelineReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelineReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobReference == input.JobReference ||
                    (this.JobReference != null &&
                    this.JobReference.Equals(input.JobReference))
                ) && 
                (
                    this.PhaseReference == input.PhaseReference ||
                    (this.PhaseReference != null &&
                    this.PhaseReference.Equals(input.PhaseReference))
                ) && 
                (
                    this.PipelineId == input.PipelineId ||
                    this.PipelineId.Equals(input.PipelineId)
                ) && 
                (
                    this.StageReference == input.StageReference ||
                    (this.StageReference != null &&
                    this.StageReference.Equals(input.StageReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobReference != null)
                {
                    hashCode = (hashCode * 59) + this.JobReference.GetHashCode();
                }
                if (this.PhaseReference != null)
                {
                    hashCode = (hashCode * 59) + this.PhaseReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PipelineId.GetHashCode();
                if (this.StageReference != null)
                {
                    hashCode = (hashCode * 59) + this.StageReference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
