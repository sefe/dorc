/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a reference to a definition.
    /// </summary>
    [DataContract(Name = "DefinitionReference")]
    public partial class DefinitionReference : IEquatable<DefinitionReference>, IValidatableObject
    {
        /// <summary>
        /// A value that indicates whether builds can be queued against this definition.
        /// </summary>
        /// <value>A value that indicates whether builds can be queued against this definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueueStatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled = 1,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 2,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 3

        }


        /// <summary>
        /// A value that indicates whether builds can be queued against this definition.
        /// </summary>
        /// <value>A value that indicates whether builds can be queued against this definition.</value>
        [DataMember(Name = "queueStatus", EmitDefaultValue = false)]
        public QueueStatusEnum? QueueStatus { get; set; }
        /// <summary>
        /// The type of the definition.
        /// </summary>
        /// <value>The type of the definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Xaml for value: xaml
            /// </summary>
            [EnumMember(Value = "xaml")]
            Xaml = 1,

            /// <summary>
            /// Enum Build for value: build
            /// </summary>
            [EnumMember(Value = "build")]
            Build = 2

        }


        /// <summary>
        /// The type of the definition.
        /// </summary>
        /// <value>The type of the definition.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionReference" /> class.
        /// </summary>
        /// <param name="createdDate">The date this version of the definition was created..</param>
        /// <param name="id">The ID of the referenced definition..</param>
        /// <param name="name">The name of the referenced definition..</param>
        /// <param name="path">The folder path of the definition..</param>
        /// <param name="project">project.</param>
        /// <param name="queueStatus">A value that indicates whether builds can be queued against this definition..</param>
        /// <param name="revision">The definition revision number..</param>
        /// <param name="type">The type of the definition..</param>
        /// <param name="uri">The definition&#39;s URI..</param>
        /// <param name="url">The REST URL of the definition..</param>
        public DefinitionReference(DateTime createdDate = default(DateTime), int id = default(int), string name = default(string), string path = default(string), TeamProjectReference project = default(TeamProjectReference), QueueStatusEnum? queueStatus = default(QueueStatusEnum?), int revision = default(int), TypeEnum? type = default(TypeEnum?), string uri = default(string), string url = default(string))
        {
            this.CreatedDate = createdDate;
            this.Id = id;
            this.Name = name;
            this.Path = path;
            this.Project = project;
            this.QueueStatus = queueStatus;
            this.Revision = revision;
            this.Type = type;
            this.Uri = uri;
            this.Url = url;
        }

        /// <summary>
        /// The date this version of the definition was created.
        /// </summary>
        /// <value>The date this version of the definition was created.</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// The ID of the referenced definition.
        /// </summary>
        /// <value>The ID of the referenced definition.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the referenced definition.
        /// </summary>
        /// <value>The name of the referenced definition.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The folder path of the definition.
        /// </summary>
        /// <value>The folder path of the definition.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public TeamProjectReference Project { get; set; }

        /// <summary>
        /// The definition revision number.
        /// </summary>
        /// <value>The definition revision number.</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// The definition&#39;s URI.
        /// </summary>
        /// <value>The definition&#39;s URI.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The REST URL of the definition.
        /// </summary>
        /// <value>The REST URL of the definition.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DefinitionReference {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  QueueStatus: ").Append(QueueStatus).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefinitionReference);
        }

        /// <summary>
        /// Returns true if DefinitionReference instances are equal
        /// </summary>
        /// <param name="input">Instance of DefinitionReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefinitionReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.QueueStatus == input.QueueStatus ||
                    this.QueueStatus.Equals(input.QueueStatus)
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
