/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BuildsDeletedEvent
    /// </summary>
    [DataContract(Name = "BuildsDeletedEvent")]
    public partial class BuildsDeletedEvent : IEquatable<BuildsDeletedEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsDeletedEvent" /> class.
        /// </summary>
        /// <param name="buildIds">buildIds.</param>
        /// <param name="definitionId">The ID of the definition..</param>
        /// <param name="projectId">The ID of the project..</param>
        public BuildsDeletedEvent(List<int> buildIds = default(List<int>), int definitionId = default(int), Guid projectId = default(Guid))
        {
            this.BuildIds = buildIds;
            this.DefinitionId = definitionId;
            this.ProjectId = projectId;
        }

        /// <summary>
        /// Gets or Sets BuildIds
        /// </summary>
        [DataMember(Name = "buildIds", EmitDefaultValue = false)]
        public List<int> BuildIds { get; set; }

        /// <summary>
        /// The ID of the definition.
        /// </summary>
        /// <value>The ID of the definition.</value>
        [DataMember(Name = "definitionId", EmitDefaultValue = false)]
        public int DefinitionId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public Guid ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildsDeletedEvent {\n");
            sb.Append("  BuildIds: ").Append(BuildIds).Append("\n");
            sb.Append("  DefinitionId: ").Append(DefinitionId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildsDeletedEvent);
        }

        /// <summary>
        /// Returns true if BuildsDeletedEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildsDeletedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildsDeletedEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuildIds == input.BuildIds ||
                    this.BuildIds != null &&
                    input.BuildIds != null &&
                    this.BuildIds.SequenceEqual(input.BuildIds)
                ) && 
                (
                    this.DefinitionId == input.DefinitionId ||
                    this.DefinitionId.Equals(input.DefinitionId)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuildIds != null)
                {
                    hashCode = (hashCode * 59) + this.BuildIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefinitionId.GetHashCode();
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
