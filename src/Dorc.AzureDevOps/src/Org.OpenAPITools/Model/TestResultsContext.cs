/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TestResultsContext
    /// </summary>
    [DataContract(Name = "TestResultsContext")]
    public partial class TestResultsContext : IEquatable<TestResultsContext>, IValidatableObject
    {
        /// <summary>
        /// Defines ContextType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContextTypeEnum
        {
            /// <summary>
            /// Enum Build for value: build
            /// </summary>
            [EnumMember(Value = "build")]
            Build = 1,

            /// <summary>
            /// Enum Release for value: release
            /// </summary>
            [EnumMember(Value = "release")]
            Release = 2,

            /// <summary>
            /// Enum Pipeline for value: pipeline
            /// </summary>
            [EnumMember(Value = "pipeline")]
            Pipeline = 3

        }


        /// <summary>
        /// Gets or Sets ContextType
        /// </summary>
        [DataMember(Name = "contextType", EmitDefaultValue = false)]
        public ContextTypeEnum? ContextType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestResultsContext" /> class.
        /// </summary>
        /// <param name="build">build.</param>
        /// <param name="contextType">contextType.</param>
        /// <param name="pipelineReference">pipelineReference.</param>
        /// <param name="release">release.</param>
        public TestResultsContext(BuildReference build = default(BuildReference), ContextTypeEnum? contextType = default(ContextTypeEnum?), PipelineReference pipelineReference = default(PipelineReference), ReleaseReference release = default(ReleaseReference))
        {
            this.Build = build;
            this.ContextType = contextType;
            this.PipelineReference = pipelineReference;
            this.Release = release;
        }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name = "build", EmitDefaultValue = false)]
        public BuildReference Build { get; set; }

        /// <summary>
        /// Gets or Sets PipelineReference
        /// </summary>
        [DataMember(Name = "pipelineReference", EmitDefaultValue = false)]
        public PipelineReference PipelineReference { get; set; }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        [DataMember(Name = "release", EmitDefaultValue = false)]
        public ReleaseReference Release { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestResultsContext {\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  ContextType: ").Append(ContextType).Append("\n");
            sb.Append("  PipelineReference: ").Append(PipelineReference).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestResultsContext);
        }

        /// <summary>
        /// Returns true if TestResultsContext instances are equal
        /// </summary>
        /// <param name="input">Instance of TestResultsContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestResultsContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.ContextType == input.ContextType ||
                    this.ContextType.Equals(input.ContextType)
                ) && 
                (
                    this.PipelineReference == input.PipelineReference ||
                    (this.PipelineReference != null &&
                    this.PipelineReference.Equals(input.PipelineReference))
                ) && 
                (
                    this.Release == input.Release ||
                    (this.Release != null &&
                    this.Release.Equals(input.Release))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Build != null)
                {
                    hashCode = (hashCode * 59) + this.Build.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContextType.GetHashCode();
                if (this.PipelineReference != null)
                {
                    hashCode = (hashCode * 59) + this.PipelineReference.GetHashCode();
                }
                if (this.Release != null)
                {
                    hashCode = (hashCode * 59) + this.Release.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
