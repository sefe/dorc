/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a step in a build phase.
    /// </summary>
    [DataContract(Name = "BuildDefinitionStep")]
    public partial class BuildDefinitionStep : IEquatable<BuildDefinitionStep>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildDefinitionStep" /> class.
        /// </summary>
        /// <param name="alwaysRun">Indicates whether this step should run even if a previous step fails..</param>
        /// <param name="condition">A condition that determines whether this step should run..</param>
        /// <param name="continueOnError">Indicates whether the phase should continue even if this step fails..</param>
        /// <param name="displayName">The display name for this step..</param>
        /// <param name="enabled">Indicates whether the step is enabled..</param>
        /// <param name="environment">environment.</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="refName">The reference name for this step..</param>
        /// <param name="task">task.</param>
        /// <param name="timeoutInMinutes">The time, in minutes, that this step is allowed to run..</param>
        public BuildDefinitionStep(bool alwaysRun = default(bool), string condition = default(string), bool continueOnError = default(bool), string displayName = default(string), bool enabled = default(bool), Dictionary<string, string> environment = default(Dictionary<string, string>), Dictionary<string, string> inputs = default(Dictionary<string, string>), string refName = default(string), TaskDefinitionReference task = default(TaskDefinitionReference), int timeoutInMinutes = default(int))
        {
            this.AlwaysRun = alwaysRun;
            this.Condition = condition;
            this.ContinueOnError = continueOnError;
            this.DisplayName = displayName;
            this.Enabled = enabled;
            this.Environment = environment;
            this.Inputs = inputs;
            this.RefName = refName;
            this.Task = task;
            this.TimeoutInMinutes = timeoutInMinutes;
        }

        /// <summary>
        /// Indicates whether this step should run even if a previous step fails.
        /// </summary>
        /// <value>Indicates whether this step should run even if a previous step fails.</value>
        [DataMember(Name = "alwaysRun", EmitDefaultValue = true)]
        public bool AlwaysRun { get; set; }

        /// <summary>
        /// A condition that determines whether this step should run.
        /// </summary>
        /// <value>A condition that determines whether this step should run.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// Indicates whether the phase should continue even if this step fails.
        /// </summary>
        /// <value>Indicates whether the phase should continue even if this step fails.</value>
        [DataMember(Name = "continueOnError", EmitDefaultValue = true)]
        public bool ContinueOnError { get; set; }

        /// <summary>
        /// The display name for this step.
        /// </summary>
        /// <value>The display name for this step.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Indicates whether the step is enabled.
        /// </summary>
        /// <value>Indicates whether the step is enabled.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public Dictionary<string, string> Environment { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public Dictionary<string, string> Inputs { get; set; }

        /// <summary>
        /// The reference name for this step.
        /// </summary>
        /// <value>The reference name for this step.</value>
        [DataMember(Name = "refName", EmitDefaultValue = false)]
        public string RefName { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name = "task", EmitDefaultValue = false)]
        public TaskDefinitionReference Task { get; set; }

        /// <summary>
        /// The time, in minutes, that this step is allowed to run.
        /// </summary>
        /// <value>The time, in minutes, that this step is allowed to run.</value>
        [DataMember(Name = "timeoutInMinutes", EmitDefaultValue = false)]
        public int TimeoutInMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildDefinitionStep {\n");
            sb.Append("  AlwaysRun: ").Append(AlwaysRun).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ContinueOnError: ").Append(ContinueOnError).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  RefName: ").Append(RefName).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  TimeoutInMinutes: ").Append(TimeoutInMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildDefinitionStep);
        }

        /// <summary>
        /// Returns true if BuildDefinitionStep instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildDefinitionStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildDefinitionStep input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AlwaysRun == input.AlwaysRun ||
                    this.AlwaysRun.Equals(input.AlwaysRun)
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.ContinueOnError == input.ContinueOnError ||
                    this.ContinueOnError.Equals(input.ContinueOnError)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Environment == input.Environment ||
                    this.Environment != null &&
                    input.Environment != null &&
                    this.Environment.SequenceEqual(input.Environment)
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.RefName == input.RefName ||
                    (this.RefName != null &&
                    this.RefName.Equals(input.RefName))
                ) && 
                (
                    this.Task == input.Task ||
                    (this.Task != null &&
                    this.Task.Equals(input.Task))
                ) && 
                (
                    this.TimeoutInMinutes == input.TimeoutInMinutes ||
                    this.TimeoutInMinutes.Equals(input.TimeoutInMinutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AlwaysRun.GetHashCode();
                if (this.Condition != null)
                {
                    hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContinueOnError.GetHashCode();
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.Environment != null)
                {
                    hashCode = (hashCode * 59) + this.Environment.GetHashCode();
                }
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                if (this.RefName != null)
                {
                    hashCode = (hashCode * 59) + this.RefName.GetHashCode();
                }
                if (this.Task != null)
                {
                    hashCode = (hashCode * 59) + this.Task.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeoutInMinutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
