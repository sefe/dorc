/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a pull request trigger.
    /// </summary>
    [DataContract(Name = "PullRequestTrigger")]
    public partial class PullRequestTrigger : IEquatable<PullRequestTrigger>, IValidatableObject
    {
        /// <summary>
        /// The type of the trigger.
        /// </summary>
        /// <value>The type of the trigger.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum ContinuousIntegration for value: continuousIntegration
            /// </summary>
            [EnumMember(Value = "continuousIntegration")]
            ContinuousIntegration = 2,

            /// <summary>
            /// Enum BatchedContinuousIntegration for value: batchedContinuousIntegration
            /// </summary>
            [EnumMember(Value = "batchedContinuousIntegration")]
            BatchedContinuousIntegration = 3,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 4,

            /// <summary>
            /// Enum GatedCheckIn for value: gatedCheckIn
            /// </summary>
            [EnumMember(Value = "gatedCheckIn")]
            GatedCheckIn = 5,

            /// <summary>
            /// Enum BatchedGatedCheckIn for value: batchedGatedCheckIn
            /// </summary>
            [EnumMember(Value = "batchedGatedCheckIn")]
            BatchedGatedCheckIn = 6,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 7,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 8,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 9

        }


        /// <summary>
        /// The type of the trigger.
        /// </summary>
        /// <value>The type of the trigger.</value>
        [DataMember(Name = "triggerType", EmitDefaultValue = false)]
        public TriggerTypeEnum? TriggerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PullRequestTrigger" /> class.
        /// </summary>
        /// <param name="autoCancel">Indicates if an update to a PR should delete current in-progress builds..</param>
        /// <param name="branchFilters">branchFilters.</param>
        /// <param name="forks">forks.</param>
        /// <param name="isCommentRequiredForPullRequest">isCommentRequiredForPullRequest.</param>
        /// <param name="pathFilters">pathFilters.</param>
        /// <param name="requireCommentsForNonTeamMembersOnly">requireCommentsForNonTeamMembersOnly.</param>
        /// <param name="settingsSourceType">settingsSourceType.</param>
        /// <param name="triggerType">The type of the trigger..</param>
        public PullRequestTrigger(bool autoCancel = default(bool), List<string> branchFilters = default(List<string>), Forks forks = default(Forks), bool isCommentRequiredForPullRequest = default(bool), List<string> pathFilters = default(List<string>), bool requireCommentsForNonTeamMembersOnly = default(bool), int settingsSourceType = default(int), TriggerTypeEnum? triggerType = default(TriggerTypeEnum?))
        {
            this.AutoCancel = autoCancel;
            this.BranchFilters = branchFilters;
            this.Forks = forks;
            this.IsCommentRequiredForPullRequest = isCommentRequiredForPullRequest;
            this.PathFilters = pathFilters;
            this.RequireCommentsForNonTeamMembersOnly = requireCommentsForNonTeamMembersOnly;
            this.SettingsSourceType = settingsSourceType;
            this.TriggerType = triggerType;
        }

        /// <summary>
        /// Indicates if an update to a PR should delete current in-progress builds.
        /// </summary>
        /// <value>Indicates if an update to a PR should delete current in-progress builds.</value>
        [DataMember(Name = "autoCancel", EmitDefaultValue = true)]
        public bool AutoCancel { get; set; }

        /// <summary>
        /// Gets or Sets BranchFilters
        /// </summary>
        [DataMember(Name = "branchFilters", EmitDefaultValue = false)]
        public List<string> BranchFilters { get; set; }

        /// <summary>
        /// Gets or Sets Forks
        /// </summary>
        [DataMember(Name = "forks", EmitDefaultValue = false)]
        public Forks Forks { get; set; }

        /// <summary>
        /// Gets or Sets IsCommentRequiredForPullRequest
        /// </summary>
        [DataMember(Name = "isCommentRequiredForPullRequest", EmitDefaultValue = true)]
        public bool IsCommentRequiredForPullRequest { get; set; }

        /// <summary>
        /// Gets or Sets PathFilters
        /// </summary>
        [DataMember(Name = "pathFilters", EmitDefaultValue = false)]
        public List<string> PathFilters { get; set; }

        /// <summary>
        /// Gets or Sets RequireCommentsForNonTeamMembersOnly
        /// </summary>
        [DataMember(Name = "requireCommentsForNonTeamMembersOnly", EmitDefaultValue = true)]
        public bool RequireCommentsForNonTeamMembersOnly { get; set; }

        /// <summary>
        /// Gets or Sets SettingsSourceType
        /// </summary>
        [DataMember(Name = "settingsSourceType", EmitDefaultValue = false)]
        public int SettingsSourceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PullRequestTrigger {\n");
            sb.Append("  AutoCancel: ").Append(AutoCancel).Append("\n");
            sb.Append("  BranchFilters: ").Append(BranchFilters).Append("\n");
            sb.Append("  Forks: ").Append(Forks).Append("\n");
            sb.Append("  IsCommentRequiredForPullRequest: ").Append(IsCommentRequiredForPullRequest).Append("\n");
            sb.Append("  PathFilters: ").Append(PathFilters).Append("\n");
            sb.Append("  RequireCommentsForNonTeamMembersOnly: ").Append(RequireCommentsForNonTeamMembersOnly).Append("\n");
            sb.Append("  SettingsSourceType: ").Append(SettingsSourceType).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PullRequestTrigger);
        }

        /// <summary>
        /// Returns true if PullRequestTrigger instances are equal
        /// </summary>
        /// <param name="input">Instance of PullRequestTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PullRequestTrigger input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AutoCancel == input.AutoCancel ||
                    this.AutoCancel.Equals(input.AutoCancel)
                ) && 
                (
                    this.BranchFilters == input.BranchFilters ||
                    this.BranchFilters != null &&
                    input.BranchFilters != null &&
                    this.BranchFilters.SequenceEqual(input.BranchFilters)
                ) && 
                (
                    this.Forks == input.Forks ||
                    (this.Forks != null &&
                    this.Forks.Equals(input.Forks))
                ) && 
                (
                    this.IsCommentRequiredForPullRequest == input.IsCommentRequiredForPullRequest ||
                    this.IsCommentRequiredForPullRequest.Equals(input.IsCommentRequiredForPullRequest)
                ) && 
                (
                    this.PathFilters == input.PathFilters ||
                    this.PathFilters != null &&
                    input.PathFilters != null &&
                    this.PathFilters.SequenceEqual(input.PathFilters)
                ) && 
                (
                    this.RequireCommentsForNonTeamMembersOnly == input.RequireCommentsForNonTeamMembersOnly ||
                    this.RequireCommentsForNonTeamMembersOnly.Equals(input.RequireCommentsForNonTeamMembersOnly)
                ) && 
                (
                    this.SettingsSourceType == input.SettingsSourceType ||
                    this.SettingsSourceType.Equals(input.SettingsSourceType)
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    this.TriggerType.Equals(input.TriggerType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AutoCancel.GetHashCode();
                if (this.BranchFilters != null)
                {
                    hashCode = (hashCode * 59) + this.BranchFilters.GetHashCode();
                }
                if (this.Forks != null)
                {
                    hashCode = (hashCode * 59) + this.Forks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCommentRequiredForPullRequest.GetHashCode();
                if (this.PathFilters != null)
                {
                    hashCode = (hashCode * 59) + this.PathFilters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequireCommentsForNonTeamMembersOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.SettingsSourceType.GetHashCode();
                hashCode = (hashCode * 59) + this.TriggerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
