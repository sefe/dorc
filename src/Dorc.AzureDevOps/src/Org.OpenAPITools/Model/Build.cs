/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data representation of a build.
    /// </summary>
    [DataContract(Name = "Build")]
    public partial class Build : IEquatable<Build>, IValidatableObject
    {
        /// <summary>
        /// The build&#39;s priority.
        /// </summary>
        /// <value>The build&#39;s priority.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 1,

            /// <summary>
            /// Enum BelowNormal for value: belowNormal
            /// </summary>
            [EnumMember(Value = "belowNormal")]
            BelowNormal = 2,

            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 3,

            /// <summary>
            /// Enum AboveNormal for value: aboveNormal
            /// </summary>
            [EnumMember(Value = "aboveNormal")]
            AboveNormal = 4,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 5

        }


        /// <summary>
        /// The build&#39;s priority.
        /// </summary>
        /// <value>The build&#39;s priority.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Additional options for queueing the build.
        /// </summary>
        /// <value>Additional options for queueing the build.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueueOptionsEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum DoNotRun for value: doNotRun
            /// </summary>
            [EnumMember(Value = "doNotRun")]
            DoNotRun = 2

        }


        /// <summary>
        /// Additional options for queueing the build.
        /// </summary>
        /// <value>Additional options for queueing the build.</value>
        [DataMember(Name = "queueOptions", EmitDefaultValue = false)]
        public QueueOptionsEnum? QueueOptions { get; set; }
        /// <summary>
        /// The reason that the build was created.
        /// </summary>
        /// <value>The reason that the build was created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 2,

            /// <summary>
            /// Enum IndividualCI for value: individualCI
            /// </summary>
            [EnumMember(Value = "individualCI")]
            IndividualCI = 3,

            /// <summary>
            /// Enum BatchedCI for value: batchedCI
            /// </summary>
            [EnumMember(Value = "batchedCI")]
            BatchedCI = 4,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 5,

            /// <summary>
            /// Enum ScheduleForced for value: scheduleForced
            /// </summary>
            [EnumMember(Value = "scheduleForced")]
            ScheduleForced = 6,

            /// <summary>
            /// Enum UserCreated for value: userCreated
            /// </summary>
            [EnumMember(Value = "userCreated")]
            UserCreated = 7,

            /// <summary>
            /// Enum ValidateShelveset for value: validateShelveset
            /// </summary>
            [EnumMember(Value = "validateShelveset")]
            ValidateShelveset = 8,

            /// <summary>
            /// Enum CheckInShelveset for value: checkInShelveset
            /// </summary>
            [EnumMember(Value = "checkInShelveset")]
            CheckInShelveset = 9,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 10,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 11,

            /// <summary>
            /// Enum ResourceTrigger for value: resourceTrigger
            /// </summary>
            [EnumMember(Value = "resourceTrigger")]
            ResourceTrigger = 12,

            /// <summary>
            /// Enum Triggered for value: triggered
            /// </summary>
            [EnumMember(Value = "triggered")]
            Triggered = 13,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 14

        }


        /// <summary>
        /// The reason that the build was created.
        /// </summary>
        /// <value>The reason that the build was created.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// The build result.
        /// </summary>
        /// <value>The build result.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum PartiallySucceeded for value: partiallySucceeded
            /// </summary>
            [EnumMember(Value = "partiallySucceeded")]
            PartiallySucceeded = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 5

        }


        /// <summary>
        /// The build result.
        /// </summary>
        /// <value>The build result.</value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public ResultEnum? Result { get; set; }
        /// <summary>
        /// The status of the build.
        /// </summary>
        /// <value>The status of the build.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum InProgress for value: inProgress
            /// </summary>
            [EnumMember(Value = "inProgress")]
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3,

            /// <summary>
            /// Enum Cancelling for value: cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            Cancelling = 4,

            /// <summary>
            /// Enum Postponed for value: postponed
            /// </summary>
            [EnumMember(Value = "postponed")]
            Postponed = 5,

            /// <summary>
            /// Enum NotStarted for value: notStarted
            /// </summary>
            [EnumMember(Value = "notStarted")]
            NotStarted = 6,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 7

        }


        /// <summary>
        /// The status of the build.
        /// </summary>
        /// <value>The status of the build.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Build" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="agentSpecification">agentSpecification.</param>
        /// <param name="buildNumber">The build number/name of the build..</param>
        /// <param name="buildNumberRevision">The build number revision..</param>
        /// <param name="controller">controller.</param>
        /// <param name="definition">definition.</param>
        /// <param name="deleted">Indicates whether the build has been deleted..</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deletedDate">The date the build was deleted..</param>
        /// <param name="deletedReason">The description of how the build was deleted..</param>
        /// <param name="demands">A list of demands that represents the agent capabilities required by this build..</param>
        /// <param name="finishTime">The time that the build was completed..</param>
        /// <param name="id">The ID of the build..</param>
        /// <param name="keepForever">Indicates whether the build should be skipped by retention policies..</param>
        /// <param name="lastChangedBy">lastChangedBy.</param>
        /// <param name="lastChangedDate">The date the build was last changed..</param>
        /// <param name="logs">logs.</param>
        /// <param name="orchestrationPlan">orchestrationPlan.</param>
        /// <param name="parameters">The parameters for the build..</param>
        /// <param name="plans">Orchestration plans associated with the build (build, cleanup).</param>
        /// <param name="priority">The build&#39;s priority..</param>
        /// <param name="project">project.</param>
        /// <param name="properties">properties.</param>
        /// <param name="quality">The quality of the xaml build (good, bad, etc.).</param>
        /// <param name="queue">queue.</param>
        /// <param name="queueOptions">Additional options for queueing the build..</param>
        /// <param name="queuePosition">The current position of the build in the queue..</param>
        /// <param name="queueTime">The time that the build was queued..</param>
        /// <param name="reason">The reason that the build was created..</param>
        /// <param name="repository">repository.</param>
        /// <param name="requestedBy">requestedBy.</param>
        /// <param name="requestedFor">requestedFor.</param>
        /// <param name="result">The build result..</param>
        /// <param name="retainedByRelease">Indicates whether the build is retained by a release..</param>
        /// <param name="sourceBranch">The source branch..</param>
        /// <param name="sourceVersion">The source version..</param>
        /// <param name="startTime">The time that the build was started..</param>
        /// <param name="status">The status of the build..</param>
        /// <param name="tags">tags.</param>
        /// <param name="triggeredByBuild">triggeredByBuild.</param>
        /// <param name="triggerInfo">Sourceprovider-specific information about what triggered the build.</param>
        /// <param name="uri">The URI of the build..</param>
        /// <param name="url">The REST URL of the build..</param>
        /// <param name="validationResults">validationResults.</param>
        public Build(ReferenceLinks links = default(ReferenceLinks), AgentSpecification agentSpecification = default(AgentSpecification), string buildNumber = default(string), int buildNumberRevision = default(int), BuildController controller = default(BuildController), DefinitionReference definition = default(DefinitionReference), bool deleted = default(bool), IdentityRef deletedBy = default(IdentityRef), DateTime deletedDate = default(DateTime), string deletedReason = default(string), List<Demand> demands = default(List<Demand>), DateTime finishTime = default(DateTime), int id = default(int), bool keepForever = default(bool), IdentityRef lastChangedBy = default(IdentityRef), DateTime lastChangedDate = default(DateTime), BuildLogReference logs = default(BuildLogReference), TaskOrchestrationPlanReference orchestrationPlan = default(TaskOrchestrationPlanReference), string parameters = default(string), List<TaskOrchestrationPlanReference> plans = default(List<TaskOrchestrationPlanReference>), PriorityEnum? priority = default(PriorityEnum?), TeamProjectReference project = default(TeamProjectReference), PropertiesCollection properties = default(PropertiesCollection), string quality = default(string), AgentPoolQueue queue = default(AgentPoolQueue), QueueOptionsEnum? queueOptions = default(QueueOptionsEnum?), int queuePosition = default(int), DateTime queueTime = default(DateTime), ReasonEnum? reason = default(ReasonEnum?), BuildRepository repository = default(BuildRepository), IdentityRef requestedBy = default(IdentityRef), IdentityRef requestedFor = default(IdentityRef), ResultEnum? result = default(ResultEnum?), bool retainedByRelease = default(bool), string sourceBranch = default(string), string sourceVersion = default(string), DateTime startTime = default(DateTime), StatusEnum? status = default(StatusEnum?), List<string> tags = default(List<string>), Build triggeredByBuild = default(Build), Dictionary<string, string> triggerInfo = default(Dictionary<string, string>), string uri = default(string), string url = default(string), List<BuildRequestValidationResult> validationResults = default(List<BuildRequestValidationResult>))
        {
            this.Links = links;
            this.AgentSpecification = agentSpecification;
            this.BuildNumber = buildNumber;
            this.BuildNumberRevision = buildNumberRevision;
            this.Controller = controller;
            this.Definition = definition;
            this.Deleted = deleted;
            this.DeletedBy = deletedBy;
            this.DeletedDate = deletedDate;
            this.DeletedReason = deletedReason;
            this.Demands = demands;
            this.FinishTime = finishTime;
            this.Id = id;
            this.KeepForever = keepForever;
            this.LastChangedBy = lastChangedBy;
            this.LastChangedDate = lastChangedDate;
            this.Logs = logs;
            this.OrchestrationPlan = orchestrationPlan;
            this.Parameters = parameters;
            this.Plans = plans;
            this.Priority = priority;
            this.Project = project;
            this.Properties = properties;
            this.Quality = quality;
            this.Queue = queue;
            this.QueueOptions = queueOptions;
            this.QueuePosition = queuePosition;
            this.QueueTime = queueTime;
            this.Reason = reason;
            this.Repository = repository;
            this.RequestedBy = requestedBy;
            this.RequestedFor = requestedFor;
            this.Result = result;
            this.RetainedByRelease = retainedByRelease;
            this.SourceBranch = sourceBranch;
            this.SourceVersion = sourceVersion;
            this.StartTime = startTime;
            this.Status = status;
            this.Tags = tags;
            this.TriggeredByBuild = triggeredByBuild;
            this.TriggerInfo = triggerInfo;
            this.Uri = uri;
            this.Url = url;
            this.ValidationResults = validationResults;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public ReferenceLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets AgentSpecification
        /// </summary>
        [DataMember(Name = "agentSpecification", EmitDefaultValue = false)]
        public AgentSpecification AgentSpecification { get; set; }

        /// <summary>
        /// The build number/name of the build.
        /// </summary>
        /// <value>The build number/name of the build.</value>
        [DataMember(Name = "buildNumber", EmitDefaultValue = false)]
        public string BuildNumber { get; set; }

        /// <summary>
        /// The build number revision.
        /// </summary>
        /// <value>The build number revision.</value>
        [DataMember(Name = "buildNumberRevision", EmitDefaultValue = false)]
        public int BuildNumberRevision { get; set; }

        /// <summary>
        /// Gets or Sets Controller
        /// </summary>
        [DataMember(Name = "controller", EmitDefaultValue = false)]
        public BuildController Controller { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public DefinitionReference Definition { get; set; }

        /// <summary>
        /// Indicates whether the build has been deleted.
        /// </summary>
        /// <value>Indicates whether the build has been deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name = "deletedBy", EmitDefaultValue = false)]
        public IdentityRef DeletedBy { get; set; }

        /// <summary>
        /// The date the build was deleted.
        /// </summary>
        /// <value>The date the build was deleted.</value>
        [DataMember(Name = "deletedDate", EmitDefaultValue = false)]
        public DateTime DeletedDate { get; set; }

        /// <summary>
        /// The description of how the build was deleted.
        /// </summary>
        /// <value>The description of how the build was deleted.</value>
        [DataMember(Name = "deletedReason", EmitDefaultValue = false)]
        public string DeletedReason { get; set; }

        /// <summary>
        /// A list of demands that represents the agent capabilities required by this build.
        /// </summary>
        /// <value>A list of demands that represents the agent capabilities required by this build.</value>
        [DataMember(Name = "demands", EmitDefaultValue = false)]
        public List<Demand> Demands { get; set; }

        /// <summary>
        /// The time that the build was completed.
        /// </summary>
        /// <value>The time that the build was completed.</value>
        [DataMember(Name = "finishTime", EmitDefaultValue = false)]
        public DateTime FinishTime { get; set; }

        /// <summary>
        /// The ID of the build.
        /// </summary>
        /// <value>The ID of the build.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Indicates whether the build should be skipped by retention policies.
        /// </summary>
        /// <value>Indicates whether the build should be skipped by retention policies.</value>
        [DataMember(Name = "keepForever", EmitDefaultValue = true)]
        public bool KeepForever { get; set; }

        /// <summary>
        /// Gets or Sets LastChangedBy
        /// </summary>
        [DataMember(Name = "lastChangedBy", EmitDefaultValue = false)]
        public IdentityRef LastChangedBy { get; set; }

        /// <summary>
        /// The date the build was last changed.
        /// </summary>
        /// <value>The date the build was last changed.</value>
        [DataMember(Name = "lastChangedDate", EmitDefaultValue = false)]
        public DateTime LastChangedDate { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [DataMember(Name = "logs", EmitDefaultValue = false)]
        public BuildLogReference Logs { get; set; }

        /// <summary>
        /// Gets or Sets OrchestrationPlan
        /// </summary>
        [DataMember(Name = "orchestrationPlan", EmitDefaultValue = false)]
        public TaskOrchestrationPlanReference OrchestrationPlan { get; set; }

        /// <summary>
        /// The parameters for the build.
        /// </summary>
        /// <value>The parameters for the build.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public string Parameters { get; set; }

        /// <summary>
        /// Orchestration plans associated with the build (build, cleanup)
        /// </summary>
        /// <value>Orchestration plans associated with the build (build, cleanup)</value>
        [DataMember(Name = "plans", EmitDefaultValue = false)]
        public List<TaskOrchestrationPlanReference> Plans { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public TeamProjectReference Project { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public PropertiesCollection Properties { get; set; }

        /// <summary>
        /// The quality of the xaml build (good, bad, etc.)
        /// </summary>
        /// <value>The quality of the xaml build (good, bad, etc.)</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public string Quality { get; set; }

        /// <summary>
        /// Gets or Sets Queue
        /// </summary>
        [DataMember(Name = "queue", EmitDefaultValue = false)]
        public AgentPoolQueue Queue { get; set; }

        /// <summary>
        /// The current position of the build in the queue.
        /// </summary>
        /// <value>The current position of the build in the queue.</value>
        [DataMember(Name = "queuePosition", EmitDefaultValue = false)]
        public int QueuePosition { get; set; }

        /// <summary>
        /// The time that the build was queued.
        /// </summary>
        /// <value>The time that the build was queued.</value>
        [DataMember(Name = "queueTime", EmitDefaultValue = false)]
        public DateTime QueueTime { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public BuildRepository Repository { get; set; }

        /// <summary>
        /// Gets or Sets RequestedBy
        /// </summary>
        [DataMember(Name = "requestedBy", EmitDefaultValue = false)]
        public IdentityRef RequestedBy { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFor
        /// </summary>
        [DataMember(Name = "requestedFor", EmitDefaultValue = false)]
        public IdentityRef RequestedFor { get; set; }

        /// <summary>
        /// Indicates whether the build is retained by a release.
        /// </summary>
        /// <value>Indicates whether the build is retained by a release.</value>
        [DataMember(Name = "retainedByRelease", EmitDefaultValue = true)]
        public bool RetainedByRelease { get; set; }

        /// <summary>
        /// The source branch.
        /// </summary>
        /// <value>The source branch.</value>
        [DataMember(Name = "sourceBranch", EmitDefaultValue = false)]
        public string SourceBranch { get; set; }

        /// <summary>
        /// The source version.
        /// </summary>
        /// <value>The source version.</value>
        [DataMember(Name = "sourceVersion", EmitDefaultValue = false)]
        public string SourceVersion { get; set; }

        /// <summary>
        /// The time that the build was started.
        /// </summary>
        /// <value>The time that the build was started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TriggeredByBuild
        /// </summary>
        [DataMember(Name = "triggeredByBuild", EmitDefaultValue = false)]
        public Build TriggeredByBuild { get; set; }

        /// <summary>
        /// Sourceprovider-specific information about what triggered the build
        /// </summary>
        /// <value>Sourceprovider-specific information about what triggered the build</value>
        [DataMember(Name = "triggerInfo", EmitDefaultValue = false)]
        public Dictionary<string, string> TriggerInfo { get; set; }

        /// <summary>
        /// The URI of the build.
        /// </summary>
        /// <value>The URI of the build.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The REST URL of the build.
        /// </summary>
        /// <value>The REST URL of the build.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ValidationResults
        /// </summary>
        [DataMember(Name = "validationResults", EmitDefaultValue = false)]
        public List<BuildRequestValidationResult> ValidationResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Build {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  AgentSpecification: ").Append(AgentSpecification).Append("\n");
            sb.Append("  BuildNumber: ").Append(BuildNumber).Append("\n");
            sb.Append("  BuildNumberRevision: ").Append(BuildNumberRevision).Append("\n");
            sb.Append("  Controller: ").Append(Controller).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedDate: ").Append(DeletedDate).Append("\n");
            sb.Append("  DeletedReason: ").Append(DeletedReason).Append("\n");
            sb.Append("  Demands: ").Append(Demands).Append("\n");
            sb.Append("  FinishTime: ").Append(FinishTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeepForever: ").Append(KeepForever).Append("\n");
            sb.Append("  LastChangedBy: ").Append(LastChangedBy).Append("\n");
            sb.Append("  LastChangedDate: ").Append(LastChangedDate).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  OrchestrationPlan: ").Append(OrchestrationPlan).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  QueueOptions: ").Append(QueueOptions).Append("\n");
            sb.Append("  QueuePosition: ").Append(QueuePosition).Append("\n");
            sb.Append("  QueueTime: ").Append(QueueTime).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  RequestedBy: ").Append(RequestedBy).Append("\n");
            sb.Append("  RequestedFor: ").Append(RequestedFor).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  RetainedByRelease: ").Append(RetainedByRelease).Append("\n");
            sb.Append("  SourceBranch: ").Append(SourceBranch).Append("\n");
            sb.Append("  SourceVersion: ").Append(SourceVersion).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TriggeredByBuild: ").Append(TriggeredByBuild).Append("\n");
            sb.Append("  TriggerInfo: ").Append(TriggerInfo).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ValidationResults: ").Append(ValidationResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Build);
        }

        /// <summary>
        /// Returns true if Build instances are equal
        /// </summary>
        /// <param name="input">Instance of Build to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Build input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.AgentSpecification == input.AgentSpecification ||
                    (this.AgentSpecification != null &&
                    this.AgentSpecification.Equals(input.AgentSpecification))
                ) && 
                (
                    this.BuildNumber == input.BuildNumber ||
                    (this.BuildNumber != null &&
                    this.BuildNumber.Equals(input.BuildNumber))
                ) && 
                (
                    this.BuildNumberRevision == input.BuildNumberRevision ||
                    this.BuildNumberRevision.Equals(input.BuildNumberRevision)
                ) && 
                (
                    this.Controller == input.Controller ||
                    (this.Controller != null &&
                    this.Controller.Equals(input.Controller))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeletedDate == input.DeletedDate ||
                    (this.DeletedDate != null &&
                    this.DeletedDate.Equals(input.DeletedDate))
                ) && 
                (
                    this.DeletedReason == input.DeletedReason ||
                    (this.DeletedReason != null &&
                    this.DeletedReason.Equals(input.DeletedReason))
                ) && 
                (
                    this.Demands == input.Demands ||
                    this.Demands != null &&
                    input.Demands != null &&
                    this.Demands.SequenceEqual(input.Demands)
                ) && 
                (
                    this.FinishTime == input.FinishTime ||
                    (this.FinishTime != null &&
                    this.FinishTime.Equals(input.FinishTime))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.KeepForever == input.KeepForever ||
                    this.KeepForever.Equals(input.KeepForever)
                ) && 
                (
                    this.LastChangedBy == input.LastChangedBy ||
                    (this.LastChangedBy != null &&
                    this.LastChangedBy.Equals(input.LastChangedBy))
                ) && 
                (
                    this.LastChangedDate == input.LastChangedDate ||
                    (this.LastChangedDate != null &&
                    this.LastChangedDate.Equals(input.LastChangedDate))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                ) && 
                (
                    this.OrchestrationPlan == input.OrchestrationPlan ||
                    (this.OrchestrationPlan != null &&
                    this.OrchestrationPlan.Equals(input.OrchestrationPlan))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Plans == input.Plans ||
                    this.Plans != null &&
                    input.Plans != null &&
                    this.Plans.SequenceEqual(input.Plans)
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.Queue == input.Queue ||
                    (this.Queue != null &&
                    this.Queue.Equals(input.Queue))
                ) && 
                (
                    this.QueueOptions == input.QueueOptions ||
                    this.QueueOptions.Equals(input.QueueOptions)
                ) && 
                (
                    this.QueuePosition == input.QueuePosition ||
                    this.QueuePosition.Equals(input.QueuePosition)
                ) && 
                (
                    this.QueueTime == input.QueueTime ||
                    (this.QueueTime != null &&
                    this.QueueTime.Equals(input.QueueTime))
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                ) && 
                (
                    this.Repository == input.Repository ||
                    (this.Repository != null &&
                    this.Repository.Equals(input.Repository))
                ) && 
                (
                    this.RequestedBy == input.RequestedBy ||
                    (this.RequestedBy != null &&
                    this.RequestedBy.Equals(input.RequestedBy))
                ) && 
                (
                    this.RequestedFor == input.RequestedFor ||
                    (this.RequestedFor != null &&
                    this.RequestedFor.Equals(input.RequestedFor))
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.RetainedByRelease == input.RetainedByRelease ||
                    this.RetainedByRelease.Equals(input.RetainedByRelease)
                ) && 
                (
                    this.SourceBranch == input.SourceBranch ||
                    (this.SourceBranch != null &&
                    this.SourceBranch.Equals(input.SourceBranch))
                ) && 
                (
                    this.SourceVersion == input.SourceVersion ||
                    (this.SourceVersion != null &&
                    this.SourceVersion.Equals(input.SourceVersion))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TriggeredByBuild == input.TriggeredByBuild ||
                    (this.TriggeredByBuild != null &&
                    this.TriggeredByBuild.Equals(input.TriggeredByBuild))
                ) && 
                (
                    this.TriggerInfo == input.TriggerInfo ||
                    this.TriggerInfo != null &&
                    input.TriggerInfo != null &&
                    this.TriggerInfo.SequenceEqual(input.TriggerInfo)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ValidationResults == input.ValidationResults ||
                    this.ValidationResults != null &&
                    input.ValidationResults != null &&
                    this.ValidationResults.SequenceEqual(input.ValidationResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.AgentSpecification != null)
                {
                    hashCode = (hashCode * 59) + this.AgentSpecification.GetHashCode();
                }
                if (this.BuildNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BuildNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuildNumberRevision.GetHashCode();
                if (this.Controller != null)
                {
                    hashCode = (hashCode * 59) + this.Controller.GetHashCode();
                }
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.DeletedBy != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedBy.GetHashCode();
                }
                if (this.DeletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedDate.GetHashCode();
                }
                if (this.DeletedReason != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedReason.GetHashCode();
                }
                if (this.Demands != null)
                {
                    hashCode = (hashCode * 59) + this.Demands.GetHashCode();
                }
                if (this.FinishTime != null)
                {
                    hashCode = (hashCode * 59) + this.FinishTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.KeepForever.GetHashCode();
                if (this.LastChangedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastChangedBy.GetHashCode();
                }
                if (this.LastChangedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastChangedDate.GetHashCode();
                }
                if (this.Logs != null)
                {
                    hashCode = (hashCode * 59) + this.Logs.GetHashCode();
                }
                if (this.OrchestrationPlan != null)
                {
                    hashCode = (hashCode * 59) + this.OrchestrationPlan.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Plans != null)
                {
                    hashCode = (hashCode * 59) + this.Plans.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Quality != null)
                {
                    hashCode = (hashCode * 59) + this.Quality.GetHashCode();
                }
                if (this.Queue != null)
                {
                    hashCode = (hashCode * 59) + this.Queue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueOptions.GetHashCode();
                hashCode = (hashCode * 59) + this.QueuePosition.GetHashCode();
                if (this.QueueTime != null)
                {
                    hashCode = (hashCode * 59) + this.QueueTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                if (this.Repository != null)
                {
                    hashCode = (hashCode * 59) + this.Repository.GetHashCode();
                }
                if (this.RequestedBy != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedBy.GetHashCode();
                }
                if (this.RequestedFor != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedFor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Result.GetHashCode();
                hashCode = (hashCode * 59) + this.RetainedByRelease.GetHashCode();
                if (this.SourceBranch != null)
                {
                    hashCode = (hashCode * 59) + this.SourceBranch.GetHashCode();
                }
                if (this.SourceVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SourceVersion.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TriggeredByBuild != null)
                {
                    hashCode = (hashCode * 59) + this.TriggeredByBuild.GetHashCode();
                }
                if (this.TriggerInfo != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerInfo.GetHashCode();
                }
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.ValidationResults != null)
                {
                    hashCode = (hashCode * 59) + this.ValidationResults.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
