/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Schedule
    /// </summary>
    [DataContract(Name = "Schedule")]
    public partial class Schedule : IEquatable<Schedule>, IValidatableObject
    {
        /// <summary>
        /// Days for a build (flags enum for days of the week)
        /// </summary>
        /// <value>Days for a build (flags enum for days of the week)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DaysToBuildEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Monday for value: monday
            /// </summary>
            [EnumMember(Value = "monday")]
            Monday = 2,

            /// <summary>
            /// Enum Tuesday for value: tuesday
            /// </summary>
            [EnumMember(Value = "tuesday")]
            Tuesday = 3,

            /// <summary>
            /// Enum Wednesday for value: wednesday
            /// </summary>
            [EnumMember(Value = "wednesday")]
            Wednesday = 4,

            /// <summary>
            /// Enum Thursday for value: thursday
            /// </summary>
            [EnumMember(Value = "thursday")]
            Thursday = 5,

            /// <summary>
            /// Enum Friday for value: friday
            /// </summary>
            [EnumMember(Value = "friday")]
            Friday = 6,

            /// <summary>
            /// Enum Saturday for value: saturday
            /// </summary>
            [EnumMember(Value = "saturday")]
            Saturday = 7,

            /// <summary>
            /// Enum Sunday for value: sunday
            /// </summary>
            [EnumMember(Value = "sunday")]
            Sunday = 8,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 9

        }


        /// <summary>
        /// Days for a build (flags enum for days of the week)
        /// </summary>
        /// <value>Days for a build (flags enum for days of the week)</value>
        [DataMember(Name = "daysToBuild", EmitDefaultValue = false)]
        public DaysToBuildEnum? DaysToBuild { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Schedule" /> class.
        /// </summary>
        /// <param name="branchFilters">branchFilters.</param>
        /// <param name="daysToBuild">Days for a build (flags enum for days of the week).</param>
        /// <param name="scheduleJobId">The Job Id of the Scheduled job that will queue the scheduled build. Since a single trigger can have multiple schedules and we want a single job to process a single schedule (since each schedule has a list of branches to build), the schedule itself needs to define the Job Id. This value will be filled in when a definition is added or updated.  The UI does not provide it or use it..</param>
        /// <param name="scheduleOnlyWithChanges">Flag to determine if this schedule should only build if the associated source has been changed..</param>
        /// <param name="startHours">Local timezone hour to start.</param>
        /// <param name="startMinutes">Local timezone minute to start.</param>
        /// <param name="timeZoneId">Time zone of the build schedule (String representation of the time zone ID).</param>
        public Schedule(List<string> branchFilters = default(List<string>), DaysToBuildEnum? daysToBuild = default(DaysToBuildEnum?), Guid scheduleJobId = default(Guid), bool scheduleOnlyWithChanges = default(bool), int startHours = default(int), int startMinutes = default(int), string timeZoneId = default(string))
        {
            this.BranchFilters = branchFilters;
            this.DaysToBuild = daysToBuild;
            this.ScheduleJobId = scheduleJobId;
            this.ScheduleOnlyWithChanges = scheduleOnlyWithChanges;
            this.StartHours = startHours;
            this.StartMinutes = startMinutes;
            this.TimeZoneId = timeZoneId;
        }

        /// <summary>
        /// Gets or Sets BranchFilters
        /// </summary>
        [DataMember(Name = "branchFilters", EmitDefaultValue = false)]
        public List<string> BranchFilters { get; set; }

        /// <summary>
        /// The Job Id of the Scheduled job that will queue the scheduled build. Since a single trigger can have multiple schedules and we want a single job to process a single schedule (since each schedule has a list of branches to build), the schedule itself needs to define the Job Id. This value will be filled in when a definition is added or updated.  The UI does not provide it or use it.
        /// </summary>
        /// <value>The Job Id of the Scheduled job that will queue the scheduled build. Since a single trigger can have multiple schedules and we want a single job to process a single schedule (since each schedule has a list of branches to build), the schedule itself needs to define the Job Id. This value will be filled in when a definition is added or updated.  The UI does not provide it or use it.</value>
        [DataMember(Name = "scheduleJobId", EmitDefaultValue = false)]
        public Guid ScheduleJobId { get; set; }

        /// <summary>
        /// Flag to determine if this schedule should only build if the associated source has been changed.
        /// </summary>
        /// <value>Flag to determine if this schedule should only build if the associated source has been changed.</value>
        [DataMember(Name = "scheduleOnlyWithChanges", EmitDefaultValue = true)]
        public bool ScheduleOnlyWithChanges { get; set; }

        /// <summary>
        /// Local timezone hour to start
        /// </summary>
        /// <value>Local timezone hour to start</value>
        [DataMember(Name = "startHours", EmitDefaultValue = false)]
        public int StartHours { get; set; }

        /// <summary>
        /// Local timezone minute to start
        /// </summary>
        /// <value>Local timezone minute to start</value>
        [DataMember(Name = "startMinutes", EmitDefaultValue = false)]
        public int StartMinutes { get; set; }

        /// <summary>
        /// Time zone of the build schedule (String representation of the time zone ID)
        /// </summary>
        /// <value>Time zone of the build schedule (String representation of the time zone ID)</value>
        [DataMember(Name = "timeZoneId", EmitDefaultValue = false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Schedule {\n");
            sb.Append("  BranchFilters: ").Append(BranchFilters).Append("\n");
            sb.Append("  DaysToBuild: ").Append(DaysToBuild).Append("\n");
            sb.Append("  ScheduleJobId: ").Append(ScheduleJobId).Append("\n");
            sb.Append("  ScheduleOnlyWithChanges: ").Append(ScheduleOnlyWithChanges).Append("\n");
            sb.Append("  StartHours: ").Append(StartHours).Append("\n");
            sb.Append("  StartMinutes: ").Append(StartMinutes).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Schedule);
        }

        /// <summary>
        /// Returns true if Schedule instances are equal
        /// </summary>
        /// <param name="input">Instance of Schedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Schedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BranchFilters == input.BranchFilters ||
                    this.BranchFilters != null &&
                    input.BranchFilters != null &&
                    this.BranchFilters.SequenceEqual(input.BranchFilters)
                ) && 
                (
                    this.DaysToBuild == input.DaysToBuild ||
                    this.DaysToBuild.Equals(input.DaysToBuild)
                ) && 
                (
                    this.ScheduleJobId == input.ScheduleJobId ||
                    (this.ScheduleJobId != null &&
                    this.ScheduleJobId.Equals(input.ScheduleJobId))
                ) && 
                (
                    this.ScheduleOnlyWithChanges == input.ScheduleOnlyWithChanges ||
                    this.ScheduleOnlyWithChanges.Equals(input.ScheduleOnlyWithChanges)
                ) && 
                (
                    this.StartHours == input.StartHours ||
                    this.StartHours.Equals(input.StartHours)
                ) && 
                (
                    this.StartMinutes == input.StartMinutes ||
                    this.StartMinutes.Equals(input.StartMinutes)
                ) && 
                (
                    this.TimeZoneId == input.TimeZoneId ||
                    (this.TimeZoneId != null &&
                    this.TimeZoneId.Equals(input.TimeZoneId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BranchFilters != null)
                {
                    hashCode = (hashCode * 59) + this.BranchFilters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DaysToBuild.GetHashCode();
                if (this.ScheduleJobId != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleJobId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScheduleOnlyWithChanges.GetHashCode();
                hashCode = (hashCode * 59) + this.StartHours.GetHashCode();
                hashCode = (hashCode * 59) + this.StartMinutes.GetHashCode();
                if (this.TimeZoneId != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
