/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AggregatedRunsByState
    /// </summary>
    [DataContract(Name = "AggregatedRunsByState")]
    public partial class AggregatedRunsByState : IEquatable<AggregatedRunsByState>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Unspecified for value: unspecified
            /// </summary>
            [EnumMember(Value = "unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum NotStarted for value: notStarted
            /// </summary>
            [EnumMember(Value = "notStarted")]
            NotStarted = 2,

            /// <summary>
            /// Enum InProgress for value: inProgress
            /// </summary>
            [EnumMember(Value = "inProgress")]
            InProgress = 3,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 4,

            /// <summary>
            /// Enum Aborted for value: aborted
            /// </summary>
            [EnumMember(Value = "aborted")]
            Aborted = 5,

            /// <summary>
            /// Enum Waiting for value: waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            Waiting = 6,

            /// <summary>
            /// Enum NeedsInvestigation for value: needsInvestigation
            /// </summary>
            [EnumMember(Value = "needsInvestigation")]
            NeedsInvestigation = 7

        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedRunsByState" /> class.
        /// </summary>
        /// <param name="resultsByOutcome">resultsByOutcome.</param>
        /// <param name="runsCount">runsCount.</param>
        /// <param name="state">state.</param>
        public AggregatedRunsByState(Dictionary<string, AggregatedResultsByOutcome> resultsByOutcome = default(Dictionary<string, AggregatedResultsByOutcome>), int runsCount = default(int), StateEnum? state = default(StateEnum?))
        {
            this.ResultsByOutcome = resultsByOutcome;
            this.RunsCount = runsCount;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets ResultsByOutcome
        /// </summary>
        [DataMember(Name = "resultsByOutcome", EmitDefaultValue = false)]
        public Dictionary<string, AggregatedResultsByOutcome> ResultsByOutcome { get; set; }

        /// <summary>
        /// Gets or Sets RunsCount
        /// </summary>
        [DataMember(Name = "runsCount", EmitDefaultValue = false)]
        public int RunsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedRunsByState {\n");
            sb.Append("  ResultsByOutcome: ").Append(ResultsByOutcome).Append("\n");
            sb.Append("  RunsCount: ").Append(RunsCount).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedRunsByState);
        }

        /// <summary>
        /// Returns true if AggregatedRunsByState instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedRunsByState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedRunsByState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ResultsByOutcome == input.ResultsByOutcome ||
                    this.ResultsByOutcome != null &&
                    input.ResultsByOutcome != null &&
                    this.ResultsByOutcome.SequenceEqual(input.ResultsByOutcome)
                ) && 
                (
                    this.RunsCount == input.RunsCount ||
                    this.RunsCount.Equals(input.RunsCount)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultsByOutcome != null)
                {
                    hashCode = (hashCode * 59) + this.ResultsByOutcome.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RunsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
