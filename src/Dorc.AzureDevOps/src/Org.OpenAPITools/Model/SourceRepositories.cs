/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A set of repositories returned from the source provider.
    /// </summary>
    [DataContract(Name = "SourceRepositories")]
    public partial class SourceRepositories : IEquatable<SourceRepositories>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceRepositories" /> class.
        /// </summary>
        /// <param name="continuationToken">A token used to continue this paged request; &#39;null&#39; if the request is complete.</param>
        /// <param name="pageLength">The number of repositories requested for each page.</param>
        /// <param name="repositories">A list of repositories.</param>
        /// <param name="totalPageCount">The total number of pages, or &#39;-1&#39; if unknown.</param>
        public SourceRepositories(string continuationToken = default(string), int pageLength = default(int), List<SourceRepository> repositories = default(List<SourceRepository>), int totalPageCount = default(int))
        {
            this.ContinuationToken = continuationToken;
            this.PageLength = pageLength;
            this.Repositories = repositories;
            this.TotalPageCount = totalPageCount;
        }

        /// <summary>
        /// A token used to continue this paged request; &#39;null&#39; if the request is complete
        /// </summary>
        /// <value>A token used to continue this paged request; &#39;null&#39; if the request is complete</value>
        [DataMember(Name = "continuationToken", EmitDefaultValue = false)]
        public string ContinuationToken { get; set; }

        /// <summary>
        /// The number of repositories requested for each page
        /// </summary>
        /// <value>The number of repositories requested for each page</value>
        [DataMember(Name = "pageLength", EmitDefaultValue = false)]
        public int PageLength { get; set; }

        /// <summary>
        /// A list of repositories
        /// </summary>
        /// <value>A list of repositories</value>
        [DataMember(Name = "repositories", EmitDefaultValue = false)]
        public List<SourceRepository> Repositories { get; set; }

        /// <summary>
        /// The total number of pages, or &#39;-1&#39; if unknown
        /// </summary>
        /// <value>The total number of pages, or &#39;-1&#39; if unknown</value>
        [DataMember(Name = "totalPageCount", EmitDefaultValue = false)]
        public int TotalPageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceRepositories {\n");
            sb.Append("  ContinuationToken: ").Append(ContinuationToken).Append("\n");
            sb.Append("  PageLength: ").Append(PageLength).Append("\n");
            sb.Append("  Repositories: ").Append(Repositories).Append("\n");
            sb.Append("  TotalPageCount: ").Append(TotalPageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceRepositories);
        }

        /// <summary>
        /// Returns true if SourceRepositories instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceRepositories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceRepositories input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContinuationToken == input.ContinuationToken ||
                    (this.ContinuationToken != null &&
                    this.ContinuationToken.Equals(input.ContinuationToken))
                ) && 
                (
                    this.PageLength == input.PageLength ||
                    this.PageLength.Equals(input.PageLength)
                ) && 
                (
                    this.Repositories == input.Repositories ||
                    this.Repositories != null &&
                    input.Repositories != null &&
                    this.Repositories.SequenceEqual(input.Repositories)
                ) && 
                (
                    this.TotalPageCount == input.TotalPageCount ||
                    this.TotalPageCount.Equals(input.TotalPageCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContinuationToken != null)
                {
                    hashCode = (hashCode * 59) + this.ContinuationToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PageLength.GetHashCode();
                if (this.Repositories != null)
                {
                    hashCode = (hashCode * 59) + this.Repositories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalPageCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
