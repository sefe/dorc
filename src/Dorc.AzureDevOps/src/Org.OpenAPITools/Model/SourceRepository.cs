/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a repository returned from a source provider.
    /// </summary>
    [DataContract(Name = "SourceRepository")]
    public partial class SourceRepository : IEquatable<SourceRepository>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceRepository" /> class.
        /// </summary>
        /// <param name="defaultBranch">The name of the default branch..</param>
        /// <param name="fullName">The full name of the repository..</param>
        /// <param name="id">The ID of the repository..</param>
        /// <param name="name">The friendly name of the repository..</param>
        /// <param name="properties">properties.</param>
        /// <param name="sourceProviderName">The name of the source provider the repository is from..</param>
        /// <param name="url">The URL of the repository..</param>
        public SourceRepository(string defaultBranch = default(string), string fullName = default(string), string id = default(string), string name = default(string), Dictionary<string, string> properties = default(Dictionary<string, string>), string sourceProviderName = default(string), string url = default(string))
        {
            this.DefaultBranch = defaultBranch;
            this.FullName = fullName;
            this.Id = id;
            this.Name = name;
            this.Properties = properties;
            this.SourceProviderName = sourceProviderName;
            this.Url = url;
        }

        /// <summary>
        /// The name of the default branch.
        /// </summary>
        /// <value>The name of the default branch.</value>
        [DataMember(Name = "defaultBranch", EmitDefaultValue = false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// The full name of the repository.
        /// </summary>
        /// <value>The full name of the repository.</value>
        [DataMember(Name = "fullName", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// The ID of the repository.
        /// </summary>
        /// <value>The ID of the repository.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The friendly name of the repository.
        /// </summary>
        /// <value>The friendly name of the repository.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The name of the source provider the repository is from.
        /// </summary>
        /// <value>The name of the source provider the repository is from.</value>
        [DataMember(Name = "sourceProviderName", EmitDefaultValue = false)]
        public string SourceProviderName { get; set; }

        /// <summary>
        /// The URL of the repository.
        /// </summary>
        /// <value>The URL of the repository.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceRepository {\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  SourceProviderName: ").Append(SourceProviderName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceRepository);
        }

        /// <summary>
        /// Returns true if SourceRepository instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceRepository to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceRepository input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefaultBranch == input.DefaultBranch ||
                    (this.DefaultBranch != null &&
                    this.DefaultBranch.Equals(input.DefaultBranch))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.SourceProviderName == input.SourceProviderName ||
                    (this.SourceProviderName != null &&
                    this.SourceProviderName.Equals(input.SourceProviderName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultBranch != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultBranch.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.SourceProviderName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceProviderName.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
