/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TaskInputDefinitionBase
    /// </summary>
    [DataContract(Name = "TaskInputDefinitionBase")]
    public partial class TaskInputDefinitionBase : IEquatable<TaskInputDefinitionBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskInputDefinitionBase" /> class.
        /// </summary>
        /// <param name="aliases">aliases.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="helpMarkDown">helpMarkDown.</param>
        /// <param name="label">label.</param>
        /// <param name="name">name.</param>
        /// <param name="options">options.</param>
        /// <param name="properties">properties.</param>
        /// <param name="required">required.</param>
        /// <param name="type">type.</param>
        /// <param name="validation">validation.</param>
        /// <param name="visibleRule">visibleRule.</param>
        public TaskInputDefinitionBase(List<string> aliases = default(List<string>), string defaultValue = default(string), string groupName = default(string), string helpMarkDown = default(string), string label = default(string), string name = default(string), Dictionary<string, string> options = default(Dictionary<string, string>), Dictionary<string, string> properties = default(Dictionary<string, string>), bool required = default(bool), string type = default(string), TaskInputValidation validation = default(TaskInputValidation), string visibleRule = default(string))
        {
            this.Aliases = aliases;
            this.DefaultValue = defaultValue;
            this.GroupName = groupName;
            this.HelpMarkDown = helpMarkDown;
            this.Label = label;
            this.Name = name;
            this.Options = options;
            this.Properties = properties;
            this.Required = required;
            this.Type = type;
            this.Validation = validation;
            this.VisibleRule = visibleRule;
        }

        /// <summary>
        /// Gets or Sets Aliases
        /// </summary>
        [DataMember(Name = "aliases", EmitDefaultValue = false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets HelpMarkDown
        /// </summary>
        [DataMember(Name = "helpMarkDown", EmitDefaultValue = false)]
        public string HelpMarkDown { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public Dictionary<string, string> Options { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        [DataMember(Name = "validation", EmitDefaultValue = false)]
        public TaskInputValidation Validation { get; set; }

        /// <summary>
        /// Gets or Sets VisibleRule
        /// </summary>
        [DataMember(Name = "visibleRule", EmitDefaultValue = false)]
        public string VisibleRule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskInputDefinitionBase {\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  HelpMarkDown: ").Append(HelpMarkDown).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  VisibleRule: ").Append(VisibleRule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskInputDefinitionBase);
        }

        /// <summary>
        /// Returns true if TaskInputDefinitionBase instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskInputDefinitionBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskInputDefinitionBase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Aliases == input.Aliases ||
                    this.Aliases != null &&
                    input.Aliases != null &&
                    this.Aliases.SequenceEqual(input.Aliases)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.HelpMarkDown == input.HelpMarkDown ||
                    (this.HelpMarkDown != null &&
                    this.HelpMarkDown.Equals(input.HelpMarkDown))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Validation == input.Validation ||
                    (this.Validation != null &&
                    this.Validation.Equals(input.Validation))
                ) && 
                (
                    this.VisibleRule == input.VisibleRule ||
                    (this.VisibleRule != null &&
                    this.VisibleRule.Equals(input.VisibleRule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aliases != null)
                {
                    hashCode = (hashCode * 59) + this.Aliases.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.HelpMarkDown != null)
                {
                    hashCode = (hashCode * 59) + this.HelpMarkDown.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Validation != null)
                {
                    hashCode = (hashCode * 59) + this.Validation.GetHashCode();
                }
                if (this.VisibleRule != null)
                {
                    hashCode = (hashCode * 59) + this.VisibleRule.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
