/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BuildDefinitionSourceProvider
    /// </summary>
    [DataContract(Name = "BuildDefinitionSourceProvider")]
    public partial class BuildDefinitionSourceProvider : IEquatable<BuildDefinitionSourceProvider>, IValidatableObject
    {
        /// <summary>
        /// Which trigger types are supported by this definition source provider
        /// </summary>
        /// <value>Which trigger types are supported by this definition source provider</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportedTriggerTypesEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum ContinuousIntegration for value: continuousIntegration
            /// </summary>
            [EnumMember(Value = "continuousIntegration")]
            ContinuousIntegration = 2,

            /// <summary>
            /// Enum BatchedContinuousIntegration for value: batchedContinuousIntegration
            /// </summary>
            [EnumMember(Value = "batchedContinuousIntegration")]
            BatchedContinuousIntegration = 3,

            /// <summary>
            /// Enum Schedule for value: schedule
            /// </summary>
            [EnumMember(Value = "schedule")]
            Schedule = 4,

            /// <summary>
            /// Enum GatedCheckIn for value: gatedCheckIn
            /// </summary>
            [EnumMember(Value = "gatedCheckIn")]
            GatedCheckIn = 5,

            /// <summary>
            /// Enum BatchedGatedCheckIn for value: batchedGatedCheckIn
            /// </summary>
            [EnumMember(Value = "batchedGatedCheckIn")]
            BatchedGatedCheckIn = 6,

            /// <summary>
            /// Enum PullRequest for value: pullRequest
            /// </summary>
            [EnumMember(Value = "pullRequest")]
            PullRequest = 7,

            /// <summary>
            /// Enum BuildCompletion for value: buildCompletion
            /// </summary>
            [EnumMember(Value = "buildCompletion")]
            BuildCompletion = 8,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 9

        }


        /// <summary>
        /// Which trigger types are supported by this definition source provider
        /// </summary>
        /// <value>Which trigger types are supported by this definition source provider</value>
        [DataMember(Name = "supportedTriggerTypes", EmitDefaultValue = false)]
        public SupportedTriggerTypesEnum? SupportedTriggerTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildDefinitionSourceProvider" /> class.
        /// </summary>
        /// <param name="definitionUri">Uri of the associated definition.</param>
        /// <param name="fields">fields associated with this build definition.</param>
        /// <param name="id">Id of this source provider.</param>
        /// <param name="lastModified">The lst time this source provider was modified.</param>
        /// <param name="name">Name of the source provider.</param>
        /// <param name="supportedTriggerTypes">Which trigger types are supported by this definition source provider.</param>
        public BuildDefinitionSourceProvider(string definitionUri = default(string), Dictionary<string, string> fields = default(Dictionary<string, string>), int id = default(int), DateTime lastModified = default(DateTime), string name = default(string), SupportedTriggerTypesEnum? supportedTriggerTypes = default(SupportedTriggerTypesEnum?))
        {
            this.DefinitionUri = definitionUri;
            this.Fields = fields;
            this.Id = id;
            this.LastModified = lastModified;
            this.Name = name;
            this.SupportedTriggerTypes = supportedTriggerTypes;
        }

        /// <summary>
        /// Uri of the associated definition
        /// </summary>
        /// <value>Uri of the associated definition</value>
        [DataMember(Name = "definitionUri", EmitDefaultValue = false)]
        public string DefinitionUri { get; set; }

        /// <summary>
        /// fields associated with this build definition
        /// </summary>
        /// <value>fields associated with this build definition</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Dictionary<string, string> Fields { get; set; }

        /// <summary>
        /// Id of this source provider
        /// </summary>
        /// <value>Id of this source provider</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The lst time this source provider was modified
        /// </summary>
        /// <value>The lst time this source provider was modified</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Name of the source provider
        /// </summary>
        /// <value>Name of the source provider</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildDefinitionSourceProvider {\n");
            sb.Append("  DefinitionUri: ").Append(DefinitionUri).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportedTriggerTypes: ").Append(SupportedTriggerTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildDefinitionSourceProvider);
        }

        /// <summary>
        /// Returns true if BuildDefinitionSourceProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildDefinitionSourceProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildDefinitionSourceProvider input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefinitionUri == input.DefinitionUri ||
                    (this.DefinitionUri != null &&
                    this.DefinitionUri.Equals(input.DefinitionUri))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupportedTriggerTypes == input.SupportedTriggerTypes ||
                    this.SupportedTriggerTypes.Equals(input.SupportedTriggerTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefinitionUri != null)
                {
                    hashCode = (hashCode * 59) + this.DefinitionUri.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.LastModified != null)
                {
                    hashCode = (hashCode * 59) + this.LastModified.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportedTriggerTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
