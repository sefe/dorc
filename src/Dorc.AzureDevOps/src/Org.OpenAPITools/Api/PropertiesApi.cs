/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        PropertiesCollection PropertiesGetBuildProperties(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        ApiResponse<PropertiesCollection> PropertiesGetBuildPropertiesWithHttpInfo(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        PropertiesCollection PropertiesGetDefinitionProperties(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        ApiResponse<PropertiesCollection> PropertiesGetDefinitionPropertiesWithHttpInfo(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        PropertiesCollection PropertiesUpdateBuildProperties(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        ApiResponse<PropertiesCollection> PropertiesUpdateBuildPropertiesWithHttpInfo(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        PropertiesCollection PropertiesUpdateDefinitionProperties(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        ApiResponse<PropertiesCollection> PropertiesUpdateDefinitionPropertiesWithHttpInfo(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        System.Threading.Tasks.Task<PropertiesCollection> PropertiesGetBuildPropertiesAsync(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesCollection>> PropertiesGetBuildPropertiesWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        System.Threading.Tasks.Task<PropertiesCollection> PropertiesGetDefinitionPropertiesAsync(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesCollection>> PropertiesGetDefinitionPropertiesWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        System.Threading.Tasks.Task<PropertiesCollection> PropertiesUpdateBuildPropertiesAsync(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesCollection>> PropertiesUpdateBuildPropertiesWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        System.Threading.Tasks.Task<PropertiesCollection> PropertiesUpdateDefinitionPropertiesAsync(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates properties for a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesCollection>> PropertiesUpdateDefinitionPropertiesWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertiesApi : IPropertiesApiSync, IPropertiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropertiesApi : IPropertiesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertiesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropertiesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PropertiesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        public PropertiesCollection PropertiesGetBuildProperties(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = PropertiesGetBuildPropertiesWithHttpInfo(organization, project, buildId, apiVersion, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        public Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> PropertiesGetBuildPropertiesWithHttpInfo(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesGetBuildProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesGetBuildProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesGetBuildProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesGetBuildProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PropertiesCollection>("/{organization}/{project}/_apis/build/builds/{buildId}/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesGetBuildProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        public async System.Threading.Tasks.Task<PropertiesCollection> PropertiesGetBuildPropertiesAsync(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = await PropertiesGetBuildPropertiesWithHttpInfoAsync(organization, project, buildId, apiVersion, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PropertiesCollection>> PropertiesGetBuildPropertiesWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesGetBuildProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesGetBuildProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesGetBuildProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesGetBuildProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PropertiesCollection>("/{organization}/{project}/_apis/build/builds/{buildId}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesGetBuildProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        public PropertiesCollection PropertiesGetDefinitionProperties(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = PropertiesGetDefinitionPropertiesWithHttpInfo(organization, project, definitionId, apiVersion, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        public Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> PropertiesGetDefinitionPropertiesWithHttpInfo(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesGetDefinitionProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesGetDefinitionProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesGetDefinitionProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesGetDefinitionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PropertiesCollection>("/{organization}/{project}/_apis/build/definitions/{definitionId}/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesGetDefinitionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        public async System.Threading.Tasks.Task<PropertiesCollection> PropertiesGetDefinitionPropertiesAsync(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = await PropertiesGetDefinitionPropertiesWithHttpInfoAsync(organization, project, definitionId, apiVersion, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="filter">A comma-delimited list of properties. If specified, filters to these specific properties. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PropertiesCollection>> PropertiesGetDefinitionPropertiesWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, string? filter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesGetDefinitionProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesGetDefinitionProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesGetDefinitionProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesGetDefinitionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PropertiesCollection>("/{organization}/{project}/_apis/build/definitions/{definitionId}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesGetDefinitionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        public PropertiesCollection PropertiesUpdateBuildProperties(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = PropertiesUpdateBuildPropertiesWithHttpInfo(organization, project, buildId, apiVersion, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        public Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> PropertiesUpdateBuildPropertiesWithHttpInfo(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesUpdateBuildProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<PropertiesCollection>("/{organization}/{project}/_apis/build/builds/{buildId}/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesUpdateBuildProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        public async System.Threading.Tasks.Task<PropertiesCollection> PropertiesUpdateBuildPropertiesAsync(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = await PropertiesUpdateBuildPropertiesWithHttpInfoAsync(organization, project, buildId, apiVersion, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates properties for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PropertiesCollection>> PropertiesUpdateBuildPropertiesWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PropertiesApi->PropertiesUpdateBuildProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesUpdateBuildProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PropertiesCollection>("/{organization}/{project}/_apis/build/builds/{buildId}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesUpdateBuildProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesCollection</returns>
        public PropertiesCollection PropertiesUpdateDefinitionProperties(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = PropertiesUpdateDefinitionPropertiesWithHttpInfo(organization, project, definitionId, apiVersion, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesCollection</returns>
        public Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> PropertiesUpdateDefinitionPropertiesWithHttpInfo(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesUpdateDefinitionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<PropertiesCollection>("/{organization}/{project}/_apis/build/definitions/{definitionId}/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesUpdateDefinitionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesCollection</returns>
        public async System.Threading.Tasks.Task<PropertiesCollection> PropertiesUpdateDefinitionPropertiesAsync(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PropertiesCollection> localVarResponse = await PropertiesUpdateDefinitionPropertiesWithHttpInfoAsync(organization, project, definitionId, apiVersion, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates properties for a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">A json-patch document describing the properties to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesCollection)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PropertiesCollection>> PropertiesUpdateDefinitionPropertiesWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, JsonPatchDocument body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PropertiesApi->PropertiesUpdateDefinitionProperties");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertiesApi.PropertiesUpdateDefinitionProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PropertiesCollection>("/{organization}/{project}/_apis/build/definitions/{definitionId}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertiesUpdateDefinitionProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
