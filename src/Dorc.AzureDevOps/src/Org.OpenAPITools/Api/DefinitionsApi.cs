/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefinitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        BuildDefinition DefinitionsCreate(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        ApiResponse<BuildDefinition> DefinitionsCreateWithHttpInfo(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition and all associated builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DefinitionsDelete(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition and all associated builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DefinitionsDeleteWithHttpInfo(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a definition, optionally at a specific revision.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        BuildDefinition DefinitionsGet(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a definition, optionally at a specific revision.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        ApiResponse<BuildDefinition> DefinitionsGetWithHttpInfo(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all revisions of a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuildDefinitionRevision&gt;</returns>
        List<BuildDefinitionRevision> DefinitionsGetDefinitionRevisions(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all revisions of a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuildDefinitionRevision&gt;</returns>
        ApiResponse<List<BuildDefinitionRevision>> DefinitionsGetDefinitionRevisionsWithHttpInfo(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuildDefinitionReference&gt;</returns>
        List<BuildDefinitionReference> DefinitionsList(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuildDefinitionReference&gt;</returns>
        ApiResponse<List<BuildDefinitionReference>> DefinitionsListWithHttpInfo(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restores a deleted definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        BuildDefinition DefinitionsRestoreDefinition(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restores a deleted definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        ApiResponse<BuildDefinition> DefinitionsRestoreDefinitionWithHttpInfo(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        BuildDefinition DefinitionsUpdate(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        ApiResponse<BuildDefinition> DefinitionsUpdateWithHttpInfo(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefinitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        System.Threading.Tasks.Task<BuildDefinition> DefinitionsCreateAsync(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDefinition>> DefinitionsCreateWithHttpInfoAsync(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition and all associated builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DefinitionsDeleteAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition and all associated builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DefinitionsDeleteWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a definition, optionally at a specific revision.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        System.Threading.Tasks.Task<BuildDefinition> DefinitionsGetAsync(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a definition, optionally at a specific revision.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDefinition>> DefinitionsGetWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all revisions of a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuildDefinitionRevision&gt;</returns>
        System.Threading.Tasks.Task<List<BuildDefinitionRevision>> DefinitionsGetDefinitionRevisionsAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all revisions of a definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildDefinitionRevision&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildDefinitionRevision>>> DefinitionsGetDefinitionRevisionsWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuildDefinitionReference&gt;</returns>
        System.Threading.Tasks.Task<List<BuildDefinitionReference>> DefinitionsListAsync(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildDefinitionReference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildDefinitionReference>>> DefinitionsListWithHttpInfoAsync(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restores a deleted definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        System.Threading.Tasks.Task<BuildDefinition> DefinitionsRestoreDefinitionAsync(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restores a deleted definition
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDefinition>> DefinitionsRestoreDefinitionWithHttpInfoAsync(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        System.Threading.Tasks.Task<BuildDefinition> DefinitionsUpdateAsync(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDefinition>> DefinitionsUpdateWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefinitionsApi : IDefinitionsApiSync, IDefinitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefinitionsApi : IDefinitionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefinitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefinitionsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefinitionsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefinitionsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a new definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        public BuildDefinition DefinitionsCreate(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = DefinitionsCreateWithHttpInfo(organization, project, apiVersion, body, definitionToCloneId, definitionToCloneRevision);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        public Org.OpenAPITools.Client.ApiResponse<BuildDefinition> DefinitionsCreateWithHttpInfo(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsCreate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsCreate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling DefinitionsApi->DefinitionsCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (definitionToCloneId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionToCloneId", definitionToCloneId));
            }
            if (definitionToCloneRevision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionToCloneRevision", definitionToCloneRevision));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BuildDefinition>("/{organization}/{project}/_apis/build/definitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        public async System.Threading.Tasks.Task<BuildDefinition> DefinitionsCreateAsync(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = await DefinitionsCreateWithHttpInfoAsync(organization, project, apiVersion, body, definitionToCloneId, definitionToCloneRevision, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The definition.</param>
        /// <param name="definitionToCloneId"> (optional)</param>
        /// <param name="definitionToCloneRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BuildDefinition>> DefinitionsCreateWithHttpInfoAsync(string organization, string project, string apiVersion, BuildDefinition body, int? definitionToCloneId = default(int?), int? definitionToCloneRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsCreate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsCreate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling DefinitionsApi->DefinitionsCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (definitionToCloneId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionToCloneId", definitionToCloneId));
            }
            if (definitionToCloneRevision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionToCloneRevision", definitionToCloneRevision));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BuildDefinition>("/{organization}/{project}/_apis/build/definitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a definition and all associated builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DefinitionsDelete(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0)
        {
            DefinitionsDeleteWithHttpInfo(organization, project, definitionId, apiVersion);
        }

        /// <summary>
        ///  Deletes a definition and all associated builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DefinitionsDeleteWithHttpInfo(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsDelete");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsDelete");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a definition and all associated builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DefinitionsDeleteAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DefinitionsDeleteWithHttpInfoAsync(organization, project, definitionId, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a definition and all associated builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DefinitionsDeleteWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsDelete");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsDelete");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a definition, optionally at a specific revision.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        public BuildDefinition DefinitionsGet(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = DefinitionsGetWithHttpInfo(organization, project, definitionId, apiVersion, revision, minMetricsTime, propertyFilters, includeLatestBuilds);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a definition, optionally at a specific revision.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        public Org.OpenAPITools.Client.ApiResponse<BuildDefinition> DefinitionsGetWithHttpInfo(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsGet");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsGet");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            if (revision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "revision", revision));
            }
            if (minMetricsTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minMetricsTime", minMetricsTime));
            }
            if (propertyFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "propertyFilters", propertyFilters));
            }
            if (includeLatestBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeLatestBuilds", includeLatestBuilds));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildDefinition>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a definition, optionally at a specific revision.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        public async System.Threading.Tasks.Task<BuildDefinition> DefinitionsGetAsync(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = await DefinitionsGetWithHttpInfoAsync(organization, project, definitionId, apiVersion, revision, minMetricsTime, propertyFilters, includeLatestBuilds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a definition, optionally at a specific revision.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="revision">The revision number to retrieve. If this is not specified, the latest version will be returned. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="propertyFilters">A comma-delimited list of properties to include in the results. (optional)</param>
        /// <param name="includeLatestBuilds"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BuildDefinition>> DefinitionsGetWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, int? revision = default(int?), DateTime? minMetricsTime = default(DateTime?), string? propertyFilters = default(string?), bool? includeLatestBuilds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsGet");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsGet");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            if (revision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "revision", revision));
            }
            if (minMetricsTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minMetricsTime", minMetricsTime));
            }
            if (propertyFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "propertyFilters", propertyFilters));
            }
            if (includeLatestBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeLatestBuilds", includeLatestBuilds));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildDefinition>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets all revisions of a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuildDefinitionRevision&gt;</returns>
        public List<BuildDefinitionRevision> DefinitionsGetDefinitionRevisions(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionRevision>> localVarResponse = DefinitionsGetDefinitionRevisionsWithHttpInfo(organization, project, definitionId, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all revisions of a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuildDefinitionRevision&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionRevision>> DefinitionsGetDefinitionRevisionsWithHttpInfo(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsGetDefinitionRevisions");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsGetDefinitionRevisions");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsGetDefinitionRevisions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsGetDefinitionRevisions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BuildDefinitionRevision>>("/{organization}/{project}/_apis/build/definitions/{definitionId}/revisions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsGetDefinitionRevisions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets all revisions of a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuildDefinitionRevision&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildDefinitionRevision>> DefinitionsGetDefinitionRevisionsAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionRevision>> localVarResponse = await DefinitionsGetDefinitionRevisionsWithHttpInfoAsync(organization, project, definitionId, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all revisions of a definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildDefinitionRevision&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionRevision>>> DefinitionsGetDefinitionRevisionsWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsGetDefinitionRevisions");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsGetDefinitionRevisions");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsGetDefinitionRevisions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsGetDefinitionRevisions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BuildDefinitionRevision>>("/{organization}/{project}/_apis/build/definitions/{definitionId}/revisions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsGetDefinitionRevisions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuildDefinitionReference&gt;</returns>
        public List<BuildDefinitionReference> DefinitionsList(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionReference>> localVarResponse = DefinitionsListWithHttpInfo(organization, project, apiVersion, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuildDefinitionReference&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionReference>> DefinitionsListWithHttpInfo(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryId", repositoryId));
            }
            if (repositoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryType", repositoryType));
            }
            if (queryOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queryOrder", queryOrder));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            if (minMetricsTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minMetricsTime", minMetricsTime));
            }
            if (definitionIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionIds", definitionIds));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (builtAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "builtAfter", builtAfter));
            }
            if (notBuiltAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "notBuiltAfter", notBuiltAfter));
            }
            if (includeAllProperties != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeAllProperties", includeAllProperties));
            }
            if (includeLatestBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeLatestBuilds", includeLatestBuilds));
            }
            if (taskIdFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "taskIdFilter", taskIdFilter));
            }
            if (processType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "processType", processType));
            }
            if (yamlFilename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yamlFilename", yamlFilename));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BuildDefinitionReference>>("/{organization}/{project}/_apis/build/definitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuildDefinitionReference&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildDefinitionReference>> DefinitionsListAsync(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionReference>> localVarResponse = await DefinitionsListWithHttpInfoAsync(organization, project, apiVersion, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="name">If specified, filters to definitions whose names match this pattern. (optional)</param>
        /// <param name="repositoryId">A repository ID. If specified, filters to definitions that use this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to definitions that have a repository of this type. (optional)</param>
        /// <param name="queryOrder">Indicates the order in which definitions should be returned. (optional)</param>
        /// <param name="top">The maximum number of definitions to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions. (optional)</param>
        /// <param name="minMetricsTime">If specified, indicates the date from which metrics should be included. (optional)</param>
        /// <param name="definitionIds">A comma-delimited list that specifies the IDs of definitions to retrieve. (optional)</param>
        /// <param name="path">If specified, filters to definitions under this folder. (optional)</param>
        /// <param name="builtAfter">If specified, filters to definitions that have builds after this date. (optional)</param>
        /// <param name="notBuiltAfter">If specified, filters to definitions that do not have builds after this date. (optional)</param>
        /// <param name="includeAllProperties">Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned. (optional)</param>
        /// <param name="includeLatestBuilds">Indicates whether to return the latest and latest completed builds for this definition. (optional)</param>
        /// <param name="taskIdFilter">If specified, filters to definitions that use the specified task. (optional)</param>
        /// <param name="processType">If specified, filters to definitions with the given process type. (optional)</param>
        /// <param name="yamlFilename">If specified, filters to YAML definitions that match the given filename. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildDefinitionReference&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<BuildDefinitionReference>>> DefinitionsListWithHttpInfoAsync(string organization, string project, string apiVersion, string? name = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), string? queryOrder = default(string?), int? top = default(int?), string? continuationToken = default(string?), DateTime? minMetricsTime = default(DateTime?), string? definitionIds = default(string?), string? path = default(string?), DateTime? builtAfter = default(DateTime?), DateTime? notBuiltAfter = default(DateTime?), bool? includeAllProperties = default(bool?), bool? includeLatestBuilds = default(bool?), Guid? taskIdFilter = default(Guid?), int? processType = default(int?), string? yamlFilename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryId", repositoryId));
            }
            if (repositoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryType", repositoryType));
            }
            if (queryOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queryOrder", queryOrder));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            if (minMetricsTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minMetricsTime", minMetricsTime));
            }
            if (definitionIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionIds", definitionIds));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (builtAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "builtAfter", builtAfter));
            }
            if (notBuiltAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "notBuiltAfter", notBuiltAfter));
            }
            if (includeAllProperties != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeAllProperties", includeAllProperties));
            }
            if (includeLatestBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeLatestBuilds", includeLatestBuilds));
            }
            if (taskIdFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "taskIdFilter", taskIdFilter));
            }
            if (processType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "processType", processType));
            }
            if (yamlFilename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yamlFilename", yamlFilename));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BuildDefinitionReference>>("/{organization}/{project}/_apis/build/definitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Restores a deleted definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        public BuildDefinition DefinitionsRestoreDefinition(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = DefinitionsRestoreDefinitionWithHttpInfo(organization, project, definitionId, deleted, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Restores a deleted definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        public Org.OpenAPITools.Client.ApiResponse<BuildDefinition> DefinitionsRestoreDefinitionWithHttpInfo(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsRestoreDefinition");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsRestoreDefinition");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsRestoreDefinition");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsRestoreDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<BuildDefinition>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsRestoreDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Restores a deleted definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        public async System.Threading.Tasks.Task<BuildDefinition> DefinitionsRestoreDefinitionAsync(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = await DefinitionsRestoreDefinitionWithHttpInfoAsync(organization, project, definitionId, deleted, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Restores a deleted definition
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The identifier of the definition to restore.</param>
        /// <param name="deleted">When false, restores a deleted definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BuildDefinition>> DefinitionsRestoreDefinitionWithHttpInfoAsync(string organization, string project, int definitionId, bool deleted, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsRestoreDefinition");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsRestoreDefinition");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsRestoreDefinition");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsRestoreDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<BuildDefinition>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsRestoreDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BuildDefinition</returns>
        public BuildDefinition DefinitionsUpdate(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = DefinitionsUpdateWithHttpInfo(organization, project, definitionId, apiVersion, body, secretsSourceDefinitionId, secretsSourceDefinitionRevision);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BuildDefinition</returns>
        public Org.OpenAPITools.Client.ApiResponse<BuildDefinition> DefinitionsUpdateWithHttpInfo(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsUpdate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsUpdate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling DefinitionsApi->DefinitionsUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            if (secretsSourceDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secretsSourceDefinitionId", secretsSourceDefinitionId));
            }
            if (secretsSourceDefinitionRevision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secretsSourceDefinitionRevision", secretsSourceDefinitionRevision));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<BuildDefinition>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildDefinition</returns>
        public async System.Threading.Tasks.Task<BuildDefinition> DefinitionsUpdateAsync(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BuildDefinition> localVarResponse = await DefinitionsUpdateWithHttpInfoAsync(organization, project, definitionId, apiVersion, body, secretsSourceDefinitionId, secretsSourceDefinitionRevision, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="definitionId">The ID of the definition.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the definition.</param>
        /// <param name="secretsSourceDefinitionId"> (optional)</param>
        /// <param name="secretsSourceDefinitionRevision"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildDefinition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BuildDefinition>> DefinitionsUpdateWithHttpInfoAsync(string organization, string project, int definitionId, string apiVersion, BuildDefinition body, int? secretsSourceDefinitionId = default(int?), int? secretsSourceDefinitionRevision = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling DefinitionsApi->DefinitionsUpdate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling DefinitionsApi->DefinitionsUpdate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling DefinitionsApi->DefinitionsUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling DefinitionsApi->DefinitionsUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("definitionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            if (secretsSourceDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secretsSourceDefinitionId", secretsSourceDefinitionId));
            }
            if (secretsSourceDefinitionRevision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secretsSourceDefinitionRevision", secretsSourceDefinitionRevision));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefinitionsApi.DefinitionsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BuildDefinition>("/{organization}/{project}/_apis/build/definitions/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefinitionsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
