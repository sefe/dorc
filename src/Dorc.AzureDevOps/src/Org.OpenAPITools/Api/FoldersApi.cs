/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new folder.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder FoldersCreate(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new folder.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> FoldersCreateWithHttpInfo(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FoldersDelete(string organization, string project, string path, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FoldersDeleteWithHttpInfo(string organization, string project, string path, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of build definition folders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Folder&gt;</returns>
        List<Folder> FoldersList(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of build definition folders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        ApiResponse<List<Folder>> FoldersListWithHttpInfo(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing folder at given  existing path
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder FoldersUpdate(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing folder at given  existing path
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> FoldersUpdateWithHttpInfo(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new folder.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> FoldersCreateAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new folder.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> FoldersCreateWithHttpInfoAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FoldersDeleteAsync(string organization, string project, string path, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FoldersDeleteWithHttpInfoAsync(string organization, string project, string path, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of build definition folders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        System.Threading.Tasks.Task<List<Folder>> FoldersListAsync(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of build definition folders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Folder>>> FoldersListWithHttpInfoAsync(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing folder at given  existing path
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> FoldersUpdateAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing folder at given  existing path
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> FoldersUpdateWithHttpInfoAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IFoldersApiSync, IFoldersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FoldersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a new folder.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder FoldersCreate(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Folder> localVarResponse = FoldersCreateWithHttpInfo(organization, project, path, apiVersion, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new folder.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public Org.OpenAPITools.Client.ApiResponse<Folder> FoldersCreateWithHttpInfo(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling FoldersApi->FoldersCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FoldersApi.FoldersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Folder>("/{organization}/{project}/_apis/build/folders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new folder.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> FoldersCreateAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Folder> localVarResponse = await FoldersCreateWithHttpInfoAsync(organization, project, path, apiVersion, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new folder.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path of the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Folder>> FoldersCreateWithHttpInfoAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling FoldersApi->FoldersCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FoldersApi.FoldersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Folder>("/{organization}/{project}/_apis/build/folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FoldersDelete(string organization, string project, string path, string apiVersion, int operationIndex = 0)
        {
            FoldersDeleteWithHttpInfo(organization, project, path, apiVersion);
        }

        /// <summary>
        ///  Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> FoldersDeleteWithHttpInfo(string organization, string project, string path, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersDelete");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersDelete");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersDelete");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "FoldersApi.FoldersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{organization}/{project}/_apis/build/folders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FoldersDeleteAsync(string organization, string project, string path, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FoldersDeleteWithHttpInfoAsync(organization, project, path, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a definition folder. Definitions and their corresponding builds will also be deleted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> FoldersDeleteWithHttpInfoAsync(string organization, string project, string path, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersDelete");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersDelete");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersDelete");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "FoldersApi.FoldersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{organization}/{project}/_apis/build/folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of build definition folders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Folder&gt;</returns>
        public List<Folder> FoldersList(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Folder>> localVarResponse = FoldersListWithHttpInfo(organization, project, path, apiVersion, queryOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of build definition folders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Folder>> FoldersListWithHttpInfo(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersList");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Org.OpenAPITools.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (queryOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queryOrder", queryOrder));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "FoldersApi.FoldersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Folder>>("/{organization}/{project}/_apis/build/folders/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of build definition folders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        public async System.Threading.Tasks.Task<List<Folder>> FoldersListAsync(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Folder>> localVarResponse = await FoldersListWithHttpInfoAsync(organization, project, path, apiVersion, queryOrder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of build definition folders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The path to start with.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="queryOrder">The order in which folders should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Folder>>> FoldersListWithHttpInfoAsync(string organization, string project, string path, string apiVersion, string? queryOrder = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersList");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Org.OpenAPITools.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (queryOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queryOrder", queryOrder));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "FoldersApi.FoldersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Folder>>("/{organization}/{project}/_apis/build/folders/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing folder at given  existing path
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder FoldersUpdate(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Folder> localVarResponse = FoldersUpdateWithHttpInfo(organization, project, path, apiVersion, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing folder at given  existing path
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public Org.OpenAPITools.Client.ApiResponse<Folder> FoldersUpdateWithHttpInfo(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling FoldersApi->FoldersUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FoldersApi.FoldersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Folder>("/{organization}/{project}/_apis/build/folders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing folder at given  existing path
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> FoldersUpdateAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Folder> localVarResponse = await FoldersUpdateWithHttpInfoAsync(organization, project, path, apiVersion, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing folder at given  existing path
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="path">The full path to the folder.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="body">The new version of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Folder>> FoldersUpdateWithHttpInfoAsync(string organization, string project, string path, string apiVersion, Folder body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'path' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling FoldersApi->FoldersUpdate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling FoldersApi->FoldersUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FoldersApi.FoldersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/{organization}/{project}/_apis/build/folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FoldersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
