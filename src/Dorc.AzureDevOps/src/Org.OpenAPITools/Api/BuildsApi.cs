/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BuildsDelete(string organization, string project, int buildId, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuildsDeleteWithHttpInfo(string organization, string project, int buildId, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Build</returns>
        Build BuildsGet(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Build</returns>
        ApiResponse<Build> BuildsGetWithHttpInfo(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes associated with a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Change&gt;</returns>
        List<Change> BuildsGetBuildChanges(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes associated with a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Change&gt;</returns>
        ApiResponse<List<Change>> BuildsGetBuildChangesWithHttpInfo(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an individual log file for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string BuildsGetBuildLog(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an individual log file for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> BuildsGetBuildLogWithHttpInfo(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the logs for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuildLog&gt;</returns>
        List<BuildLog> BuildsGetBuildLogs(string organization, string project, int buildId, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the logs for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuildLog&gt;</returns>
        ApiResponse<List<BuildLog>> BuildsGetBuildLogsWithHttpInfo(string organization, string project, int buildId, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceRef&gt;</returns>
        List<ResourceRef> BuildsGetBuildWorkItemsRefs(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceRef&gt;</returns>
        ApiResponse<List<ResourceRef>> BuildsGetBuildWorkItemsRefsWithHttpInfo(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build, filtered to specific commits.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceRef&gt;</returns>
        List<ResourceRef> BuildsGetBuildWorkItemsRefsFromCommits(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build, filtered to specific commits.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceRef&gt;</returns>
        ApiResponse<List<ResourceRef>> BuildsGetBuildWorkItemsRefsFromCommitsWithHttpInfo(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes made to the repository between two given builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Change&gt;</returns>
        List<Change> BuildsGetChangesBetweenBuilds(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes made to the repository between two given builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Change&gt;</returns>
        ApiResponse<List<Change>> BuildsGetChangesBetweenBuildsWithHttpInfo(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all the work items between two builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceRef&gt;</returns>
        List<ResourceRef> BuildsGetWorkItemsBetweenBuilds(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all the work items between two builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceRef&gt;</returns>
        ApiResponse<List<ResourceRef>> BuildsGetWorkItemsBetweenBuildsWithHttpInfo(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Build&gt;</returns>
        List<Build> BuildsList(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Build&gt;</returns>
        ApiResponse<List<Build>> BuildsListWithHttpInfo(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queues a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Build</returns>
        Build BuildsQueue(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queues a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Build</returns>
        ApiResponse<Build> BuildsQueueWithHttpInfo(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Build</returns>
        Build BuildsUpdateBuild(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Build</returns>
        ApiResponse<Build> BuildsUpdateBuildWithHttpInfo(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates multiple builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Build&gt;</returns>
        List<Build> BuildsUpdateBuilds(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates multiple builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Build&gt;</returns>
        ApiResponse<List<Build>> BuildsUpdateBuildsWithHttpInfo(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuildsDeleteAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildsDeleteWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Build</returns>
        System.Threading.Tasks.Task<Build> BuildsGetAsync(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Build)</returns>
        System.Threading.Tasks.Task<ApiResponse<Build>> BuildsGetWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes associated with a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Change&gt;</returns>
        System.Threading.Tasks.Task<List<Change>> BuildsGetBuildChangesAsync(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes associated with a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Change&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Change>>> BuildsGetBuildChangesWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an individual log file for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> BuildsGetBuildLogAsync(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an individual log file for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> BuildsGetBuildLogWithHttpInfoAsync(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the logs for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuildLog&gt;</returns>
        System.Threading.Tasks.Task<List<BuildLog>> BuildsGetBuildLogsAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the logs for a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildLog>>> BuildsGetBuildLogsWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceRef&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceRef>> BuildsGetBuildWorkItemsRefsAsync(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceRef&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceRef>>> BuildsGetBuildWorkItemsRefsWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build, filtered to specific commits.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceRef&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceRef>> BuildsGetBuildWorkItemsRefsFromCommitsAsync(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the work items associated with a build, filtered to specific commits.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceRef&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceRef>>> BuildsGetBuildWorkItemsRefsFromCommitsWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes made to the repository between two given builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Change&gt;</returns>
        System.Threading.Tasks.Task<List<Change>> BuildsGetChangesBetweenBuildsAsync(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the changes made to the repository between two given builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Change&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Change>>> BuildsGetChangesBetweenBuildsWithHttpInfoAsync(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all the work items between two builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceRef&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceRef>> BuildsGetWorkItemsBetweenBuildsAsync(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all the work items between two builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceRef&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceRef>>> BuildsGetWorkItemsBetweenBuildsWithHttpInfoAsync(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Build&gt;</returns>
        System.Threading.Tasks.Task<List<Build>> BuildsListAsync(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Build&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Build>>> BuildsListWithHttpInfoAsync(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queues a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Build</returns>
        System.Threading.Tasks.Task<Build> BuildsQueueAsync(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queues a build
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Build)</returns>
        System.Threading.Tasks.Task<ApiResponse<Build>> BuildsQueueWithHttpInfoAsync(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Build</returns>
        System.Threading.Tasks.Task<Build> BuildsUpdateBuildAsync(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a build.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Build)</returns>
        System.Threading.Tasks.Task<ApiResponse<Build>> BuildsUpdateBuildWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates multiple builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Build&gt;</returns>
        System.Threading.Tasks.Task<List<Build>> BuildsUpdateBuildsAsync(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates multiple builds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Build&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Build>>> BuildsUpdateBuildsWithHttpInfoAsync(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApi : IBuildsApiSync, IBuildsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildsApi : IBuildsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BuildsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Deletes a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BuildsDelete(string organization, string project, int buildId, string apiVersion, int operationIndex = 0)
        {
            BuildsDeleteWithHttpInfo(organization, project, buildId, apiVersion);
        }

        /// <summary>
        ///  Deletes a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> BuildsDeleteWithHttpInfo(string organization, string project, int buildId, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsDelete");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsDelete");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{organization}/{project}/_apis/build/builds/{buildId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuildsDeleteAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await BuildsDeleteWithHttpInfoAsync(organization, project, buildId, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> BuildsDeleteWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsDelete");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsDelete");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{organization}/{project}/_apis/build/builds/{buildId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Build</returns>
        public Build BuildsGet(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Build> localVarResponse = BuildsGetWithHttpInfo(organization, project, buildId, apiVersion, propertyFilters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Build</returns>
        public Org.OpenAPITools.Client.ApiResponse<Build> BuildsGetWithHttpInfo(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGet");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGet");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (propertyFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "propertyFilters", propertyFilters));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Build>("/{organization}/{project}/_apis/build/builds/{buildId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Build</returns>
        public async System.Threading.Tasks.Task<Build> BuildsGetAsync(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Build> localVarResponse = await BuildsGetWithHttpInfoAsync(organization, project, buildId, apiVersion, propertyFilters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="propertyFilters"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Build)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Build>> BuildsGetWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, string? propertyFilters = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGet");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGet");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (propertyFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "propertyFilters", propertyFilters));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Build>("/{organization}/{project}/_apis/build/builds/{buildId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the changes associated with a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Change&gt;</returns>
        public List<Change> BuildsGetBuildChanges(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Change>> localVarResponse = BuildsGetBuildChangesWithHttpInfo(organization, project, buildId, apiVersion, continuationToken, top, includeSourceChange);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the changes associated with a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Change&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Change>> BuildsGetBuildChangesWithHttpInfo(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildChanges");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildChanges");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildChanges");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (includeSourceChange != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeSourceChange", includeSourceChange));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildChanges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Change>>("/{organization}/{project}/_apis/build/builds/{buildId}/changes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildChanges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the changes associated with a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Change&gt;</returns>
        public async System.Threading.Tasks.Task<List<Change>> BuildsGetBuildChangesAsync(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Change>> localVarResponse = await BuildsGetBuildChangesWithHttpInfoAsync(organization, project, buildId, apiVersion, continuationToken, top, includeSourceChange, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the changes associated with a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId"></param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="continuationToken"> (optional)</param>
        /// <param name="top">The maximum number of changes to return (optional)</param>
        /// <param name="includeSourceChange"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Change&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Change>>> BuildsGetBuildChangesWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, string? continuationToken = default(string?), int? top = default(int?), bool? includeSourceChange = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildChanges");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildChanges");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildChanges");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (includeSourceChange != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeSourceChange", includeSourceChange));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildChanges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Change>>("/{organization}/{project}/_apis/build/builds/{buildId}/changes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildChanges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an individual log file for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string BuildsGetBuildLog(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = BuildsGetBuildLogWithHttpInfo(organization, project, buildId, logId, apiVersion, startLine, endLine);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an individual log file for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> BuildsGetBuildLogWithHttpInfo(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildLog");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildLog");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildLog");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip",
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(logId)); // path parameter
            if (startLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startLine", startLine));
            }
            if (endLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endLine", endLine));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{organization}/{project}/_apis/build/builds/{buildId}/logs/{logId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an individual log file for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> BuildsGetBuildLogAsync(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await BuildsGetBuildLogWithHttpInfoAsync(organization, project, buildId, logId, apiVersion, startLine, endLine, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an individual log file for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="logId">The ID of the log file.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="startLine">The start line. (optional)</param>
        /// <param name="endLine">The end line. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> BuildsGetBuildLogWithHttpInfoAsync(string organization, string project, int buildId, int logId, string apiVersion, long? startLine = default(long?), long? endLine = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildLog");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildLog");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildLog");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip",
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(logId)); // path parameter
            if (startLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startLine", startLine));
            }
            if (endLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endLine", endLine));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{organization}/{project}/_apis/build/builds/{buildId}/logs/{logId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the logs for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuildLog&gt;</returns>
        public List<BuildLog> BuildsGetBuildLogs(string organization, string project, int buildId, string apiVersion, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<BuildLog>> localVarResponse = BuildsGetBuildLogsWithHttpInfo(organization, project, buildId, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the logs for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuildLog&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<BuildLog>> BuildsGetBuildLogsWithHttpInfo(string organization, string project, int buildId, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildLogs");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildLogs");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildLogs");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BuildLog>>("/{organization}/{project}/_apis/build/builds/{buildId}/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the logs for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuildLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildLog>> BuildsGetBuildLogsAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<BuildLog>> localVarResponse = await BuildsGetBuildLogsWithHttpInfoAsync(organization, project, buildId, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the logs for a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildLog&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<BuildLog>>> BuildsGetBuildLogsWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildLogs");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildLogs");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildLogs");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BuildLog>>("/{organization}/{project}/_apis/build/builds/{buildId}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the work items associated with a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceRef&gt;</returns>
        public List<ResourceRef> BuildsGetBuildWorkItemsRefs(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> localVarResponse = BuildsGetBuildWorkItemsRefsWithHttpInfo(organization, project, buildId, apiVersion, top);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the work items associated with a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceRef&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> BuildsGetBuildWorkItemsRefsWithHttpInfo(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildWorkItemsRefs");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildWorkItemsRefs");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildWorkItemsRefs");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildWorkItemsRefs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResourceRef>>("/{organization}/{project}/_apis/build/builds/{buildId}/workitems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildWorkItemsRefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the work items associated with a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceRef&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceRef>> BuildsGetBuildWorkItemsRefsAsync(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> localVarResponse = await BuildsGetBuildWorkItemsRefsWithHttpInfoAsync(organization, project, buildId, apiVersion, top, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the work items associated with a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceRef&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>>> BuildsGetBuildWorkItemsRefsWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildWorkItemsRefs");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildWorkItemsRefs");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildWorkItemsRefs");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildWorkItemsRefs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResourceRef>>("/{organization}/{project}/_apis/build/builds/{buildId}/workitems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildWorkItemsRefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the work items associated with a build, filtered to specific commits.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceRef&gt;</returns>
        public List<ResourceRef> BuildsGetBuildWorkItemsRefsFromCommits(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> localVarResponse = BuildsGetBuildWorkItemsRefsFromCommitsWithHttpInfo(organization, project, buildId, apiVersion, body, top);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the work items associated with a build, filtered to specific commits.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceRef&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> BuildsGetBuildWorkItemsRefsFromCommitsWithHttpInfo(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildWorkItemsRefsFromCommits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ResourceRef>>("/{organization}/{project}/_apis/build/builds/{buildId}/workitems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildWorkItemsRefsFromCommits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the work items associated with a build, filtered to specific commits.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceRef&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceRef>> BuildsGetBuildWorkItemsRefsFromCommitsAsync(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> localVarResponse = await BuildsGetBuildWorkItemsRefsFromCommitsWithHttpInfoAsync(organization, project, buildId, apiVersion, body, top, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the work items associated with a build, filtered to specific commits.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">A comma-delimited list of commit IDs.</param>
        /// <param name="top">The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceRef&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>>> BuildsGetBuildWorkItemsRefsFromCommitsWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, List<string> body, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsGetBuildWorkItemsRefsFromCommits");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetBuildWorkItemsRefsFromCommits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ResourceRef>>("/{organization}/{project}/_apis/build/builds/{buildId}/workitems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetBuildWorkItemsRefsFromCommits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the changes made to the repository between two given builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Change&gt;</returns>
        public List<Change> BuildsGetChangesBetweenBuilds(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Change>> localVarResponse = BuildsGetChangesBetweenBuildsWithHttpInfo(organization, project, apiVersion, fromBuildId, toBuildId, top);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the changes made to the repository between two given builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Change&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Change>> BuildsGetChangesBetweenBuildsWithHttpInfo(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetChangesBetweenBuilds");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetChangesBetweenBuilds");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetChangesBetweenBuilds");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (fromBuildId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromBuildId", fromBuildId));
            }
            if (toBuildId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toBuildId", toBuildId));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetChangesBetweenBuilds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Change>>("/{organization}/{project}/_apis/build/changes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetChangesBetweenBuilds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the changes made to the repository between two given builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Change&gt;</returns>
        public async System.Threading.Tasks.Task<List<Change>> BuildsGetChangesBetweenBuildsAsync(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Change>> localVarResponse = await BuildsGetChangesBetweenBuildsWithHttpInfoAsync(organization, project, apiVersion, fromBuildId, toBuildId, top, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the changes made to the repository between two given builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="fromBuildId">The ID of the first build. (optional)</param>
        /// <param name="toBuildId">The ID of the last build. (optional)</param>
        /// <param name="top">The maximum number of changes to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Change&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Change>>> BuildsGetChangesBetweenBuildsWithHttpInfoAsync(string organization, string project, string apiVersion, int? fromBuildId = default(int?), int? toBuildId = default(int?), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetChangesBetweenBuilds");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetChangesBetweenBuilds");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetChangesBetweenBuilds");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (fromBuildId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromBuildId", fromBuildId));
            }
            if (toBuildId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toBuildId", toBuildId));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetChangesBetweenBuilds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Change>>("/{organization}/{project}/_apis/build/changes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetChangesBetweenBuilds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets all the work items between two builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceRef&gt;</returns>
        public List<ResourceRef> BuildsGetWorkItemsBetweenBuilds(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> localVarResponse = BuildsGetWorkItemsBetweenBuildsWithHttpInfo(organization, project, fromBuildId, toBuildId, apiVersion, top);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all the work items between two builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceRef&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> BuildsGetWorkItemsBetweenBuildsWithHttpInfo(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetWorkItemsBetweenBuilds");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetWorkItemsBetweenBuilds");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetWorkItemsBetweenBuilds");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromBuildId", fromBuildId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toBuildId", toBuildId));
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetWorkItemsBetweenBuilds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResourceRef>>("/{organization}/{project}/_apis/build/workitems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetWorkItemsBetweenBuilds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets all the work items between two builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceRef&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceRef>> BuildsGetWorkItemsBetweenBuildsAsync(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>> localVarResponse = await BuildsGetWorkItemsBetweenBuildsWithHttpInfoAsync(organization, project, fromBuildId, toBuildId, apiVersion, top, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all the work items between two builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="fromBuildId">The ID of the first build.</param>
        /// <param name="toBuildId">The ID of the last build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.2&#39; to use this version of the api.</param>
        /// <param name="top">The maximum number of work items to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceRef&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ResourceRef>>> BuildsGetWorkItemsBetweenBuildsWithHttpInfoAsync(string organization, string project, int fromBuildId, int toBuildId, string apiVersion, int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsGetWorkItemsBetweenBuilds");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsGetWorkItemsBetweenBuilds");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsGetWorkItemsBetweenBuilds");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromBuildId", fromBuildId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toBuildId", toBuildId));
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsGetWorkItemsBetweenBuilds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResourceRef>>("/{organization}/{project}/_apis/build/workitems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetWorkItemsBetweenBuilds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Build&gt;</returns>
        public List<Build> BuildsList(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Build>> localVarResponse = BuildsListWithHttpInfo(organization, project, apiVersion, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Build&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Build>> BuildsListWithHttpInfo(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (definitions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitions", definitions));
            }
            if (queues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queues", queues));
            }
            if (buildNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "buildNumber", buildNumber));
            }
            if (minTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minTime", minTime));
            }
            if (maxTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxTime", maxTime));
            }
            if (requestedFor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "requestedFor", requestedFor));
            }
            if (reasonFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reasonFilter", reasonFilter));
            }
            if (statusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statusFilter", statusFilter));
            }
            if (resultFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "resultFilter", resultFilter));
            }
            if (tagFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tagFilters", tagFilters));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            if (maxBuildsPerDefinition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxBuildsPerDefinition", maxBuildsPerDefinition));
            }
            if (deletedFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deletedFilter", deletedFilter));
            }
            if (queryOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queryOrder", queryOrder));
            }
            if (branchName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "branchName", branchName));
            }
            if (buildIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "buildIds", buildIds));
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryId", repositoryId));
            }
            if (repositoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryType", repositoryType));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Build>>("/{organization}/{project}/_apis/build/builds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Build&gt;</returns>
        public async System.Threading.Tasks.Task<List<Build>> BuildsListAsync(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Build>> localVarResponse = await BuildsListWithHttpInfoAsync(organization, project, apiVersion, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="definitions">A comma-delimited list of definition IDs. If specified, filters to builds for these definitions. (optional)</param>
        /// <param name="queues">A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues. (optional)</param>
        /// <param name="buildNumber">If specified, filters to builds that match this build number. Append * to do a prefix search. (optional)</param>
        /// <param name="minTime">If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified. (optional)</param>
        /// <param name="maxTime">If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified. (optional)</param>
        /// <param name="requestedFor">If specified, filters to builds requested for the specified user. (optional)</param>
        /// <param name="reasonFilter">If specified, filters to builds that match this reason. (optional)</param>
        /// <param name="statusFilter">If specified, filters to builds that match this status. (optional)</param>
        /// <param name="resultFilter">If specified, filters to builds that match this result. (optional)</param>
        /// <param name="tagFilters">A comma-delimited list of tags. If specified, filters to builds that have the specified tags. (optional)</param>
        /// <param name="properties">A comma-delimited list of properties to retrieve. (optional)</param>
        /// <param name="top">The maximum number of builds to return. (optional)</param>
        /// <param name="continuationToken">A continuation token, returned by a previous call to this method, that can be used to return the next set of builds. (optional)</param>
        /// <param name="maxBuildsPerDefinition">The maximum number of builds to return per definition. (optional)</param>
        /// <param name="deletedFilter">Indicates whether to exclude, include, or only return deleted builds. (optional)</param>
        /// <param name="queryOrder">The order in which builds should be returned. (optional)</param>
        /// <param name="branchName">If specified, filters to builds that built branches that built this branch. (optional)</param>
        /// <param name="buildIds">A comma-delimited list that specifies the IDs of builds to retrieve. (optional)</param>
        /// <param name="repositoryId">If specified, filters to builds that built from this repository. (optional)</param>
        /// <param name="repositoryType">If specified, filters to builds that built from repositories of this type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Build&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Build>>> BuildsListWithHttpInfoAsync(string organization, string project, string apiVersion, string? definitions = default(string?), string? queues = default(string?), string? buildNumber = default(string?), DateTime? minTime = default(DateTime?), DateTime? maxTime = default(DateTime?), string? requestedFor = default(string?), string? reasonFilter = default(string?), string? statusFilter = default(string?), string? resultFilter = default(string?), string? tagFilters = default(string?), string? properties = default(string?), int? top = default(int?), string? continuationToken = default(string?), int? maxBuildsPerDefinition = default(int?), string? deletedFilter = default(string?), string? queryOrder = default(string?), string? branchName = default(string?), string? buildIds = default(string?), string? repositoryId = default(string?), string? repositoryType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (definitions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitions", definitions));
            }
            if (queues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queues", queues));
            }
            if (buildNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "buildNumber", buildNumber));
            }
            if (minTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minTime", minTime));
            }
            if (maxTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxTime", maxTime));
            }
            if (requestedFor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "requestedFor", requestedFor));
            }
            if (reasonFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reasonFilter", reasonFilter));
            }
            if (statusFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statusFilter", statusFilter));
            }
            if (resultFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "resultFilter", resultFilter));
            }
            if (tagFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tagFilters", tagFilters));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            if (maxBuildsPerDefinition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxBuildsPerDefinition", maxBuildsPerDefinition));
            }
            if (deletedFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deletedFilter", deletedFilter));
            }
            if (queryOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queryOrder", queryOrder));
            }
            if (branchName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "branchName", branchName));
            }
            if (buildIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "buildIds", buildIds));
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryId", repositoryId));
            }
            if (repositoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryType", repositoryType));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "BuildsApi.BuildsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Build>>("/{organization}/{project}/_apis/build/builds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queues a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Build</returns>
        public Build BuildsQueue(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Build> localVarResponse = BuildsQueueWithHttpInfo(organization, project, apiVersion, body, ignoreWarnings, checkInTicket, sourceBuildId, definitionId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queues a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Build</returns>
        public Org.OpenAPITools.Client.ApiResponse<Build> BuildsQueueWithHttpInfo(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsQueue");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsQueue");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsQueue");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsQueue");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (ignoreWarnings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ignoreWarnings", ignoreWarnings));
            }
            if (checkInTicket != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "checkInTicket", checkInTicket));
            }
            if (sourceBuildId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceBuildId", sourceBuildId));
            }
            if (definitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionId", definitionId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsQueue";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Build>("/{organization}/{project}/_apis/build/builds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queues a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Build</returns>
        public async System.Threading.Tasks.Task<Build> BuildsQueueAsync(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Build> localVarResponse = await BuildsQueueWithHttpInfoAsync(organization, project, apiVersion, body, ignoreWarnings, checkInTicket, sourceBuildId, definitionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queues a build
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body"></param>
        /// <param name="ignoreWarnings"> (optional)</param>
        /// <param name="checkInTicket"> (optional)</param>
        /// <param name="sourceBuildId"> (optional)</param>
        /// <param name="definitionId">Optional definition id to queue a build without a body. Ignored if there&#39;s a valid body (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Build)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Build>> BuildsQueueWithHttpInfoAsync(string organization, string project, string apiVersion, Build body, bool? ignoreWarnings = default(bool?), string? checkInTicket = default(string?), int? sourceBuildId = default(int?), int? definitionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsQueue");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsQueue");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsQueue");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsQueue");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            if (ignoreWarnings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ignoreWarnings", ignoreWarnings));
            }
            if (checkInTicket != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "checkInTicket", checkInTicket));
            }
            if (sourceBuildId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceBuildId", sourceBuildId));
            }
            if (definitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "definitionId", definitionId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsQueue";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Build>("/{organization}/{project}/_apis/build/builds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Build</returns>
        public Build BuildsUpdateBuild(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Build> localVarResponse = BuildsUpdateBuildWithHttpInfo(organization, project, buildId, apiVersion, body, retry);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Build</returns>
        public Org.OpenAPITools.Client.ApiResponse<Build> BuildsUpdateBuildWithHttpInfo(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsUpdateBuild");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsUpdateBuild");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsUpdateBuild");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsUpdateBuild");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (retry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "retry", retry));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsUpdateBuild";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Build>("/{organization}/{project}/_apis/build/builds/{buildId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsUpdateBuild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Build</returns>
        public async System.Threading.Tasks.Task<Build> BuildsUpdateBuildAsync(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Build> localVarResponse = await BuildsUpdateBuildWithHttpInfoAsync(organization, project, buildId, apiVersion, body, retry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a build.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="buildId">The ID of the build.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The build.</param>
        /// <param name="retry"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Build)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Build>> BuildsUpdateBuildWithHttpInfoAsync(string organization, string project, int buildId, string apiVersion, Build body, bool? retry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsUpdateBuild");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsUpdateBuild");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsUpdateBuild");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsUpdateBuild");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("buildId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(buildId)); // path parameter
            if (retry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "retry", retry));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsUpdateBuild";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Build>("/{organization}/{project}/_apis/build/builds/{buildId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsUpdateBuild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates multiple builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Build&gt;</returns>
        public List<Build> BuildsUpdateBuilds(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Build>> localVarResponse = BuildsUpdateBuildsWithHttpInfo(organization, project, apiVersion, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates multiple builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Build&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Build>> BuildsUpdateBuildsWithHttpInfo(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsUpdateBuilds");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsUpdateBuilds");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsUpdateBuilds");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsUpdateBuilds");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsUpdateBuilds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<Build>>("/{organization}/{project}/_apis/build/builds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsUpdateBuilds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates multiple builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Build&gt;</returns>
        public async System.Threading.Tasks.Task<List<Build>> BuildsUpdateBuildsAsync(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Build>> localVarResponse = await BuildsUpdateBuildsWithHttpInfoAsync(organization, project, apiVersion, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates multiple builds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0&#39; to use this version of the api.</param>
        /// <param name="body">The builds to update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Build&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Build>>> BuildsUpdateBuildsWithHttpInfoAsync(string organization, string project, string apiVersion, List<Build> body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling BuildsApi->BuildsUpdateBuilds");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling BuildsApi->BuildsUpdateBuilds");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling BuildsApi->BuildsUpdateBuilds");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling BuildsApi->BuildsUpdateBuilds");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BuildsApi.BuildsUpdateBuilds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<Build>>("/{organization}/{project}/_apis/build/builds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsUpdateBuilds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
