/*
 * Build
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.0
 * Contact: nugetvss@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourceProvidersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a file in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string SourceProvidersGetFileContents(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a file in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SourceProvidersGetFileContentsWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a directory in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SourceRepositoryItem&gt;</returns>
        List<SourceRepositoryItem> SourceProvidersGetPathContents(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a directory in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SourceRepositoryItem&gt;</returns>
        ApiResponse<List<SourceRepositoryItem>> SourceProvidersGetPathContentsWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a pull request object from source provider.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PullRequest</returns>
        PullRequest SourceProvidersGetPullRequest(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a pull request object from source provider.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PullRequest</returns>
        ApiResponse<PullRequest> SourceProvidersGetPullRequestWithHttpInfo(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of source providers and their capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SourceProviderAttributes&gt;</returns>
        List<SourceProviderAttributes> SourceProvidersList(string organization, string project, string apiVersion, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of source providers and their capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SourceProviderAttributes&gt;</returns>
        ApiResponse<List<SourceProviderAttributes>> SourceProvidersListWithHttpInfo(string organization, string project, string apiVersion, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of branches for the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> SourceProvidersListBranches(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of branches for the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> SourceProvidersListBranchesWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of source code repositories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SourceRepositories</returns>
        SourceRepositories SourceProvidersListRepositories(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of source code repositories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SourceRepositories</returns>
        ApiResponse<SourceRepositories> SourceProvidersListRepositoriesWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of webhooks installed in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RepositoryWebhook&gt;</returns>
        List<RepositoryWebhook> SourceProvidersListWebhooks(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of webhooks installed in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RepositoryWebhook&gt;</returns>
        ApiResponse<List<RepositoryWebhook>> SourceProvidersListWebhooksWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recreates the webhooks for the specified triggers in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SourceProvidersRestoreWebhooks(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recreates the webhooks for the specified triggers in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SourceProvidersRestoreWebhooksWithHttpInfo(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourceProvidersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a file in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SourceProvidersGetFileContentsAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a file in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SourceProvidersGetFileContentsWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a directory in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SourceRepositoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<SourceRepositoryItem>> SourceProvidersGetPathContentsAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the contents of a directory in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SourceRepositoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SourceRepositoryItem>>> SourceProvidersGetPathContentsWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a pull request object from source provider.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PullRequest</returns>
        System.Threading.Tasks.Task<PullRequest> SourceProvidersGetPullRequestAsync(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a pull request object from source provider.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullRequest>> SourceProvidersGetPullRequestWithHttpInfoAsync(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of source providers and their capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SourceProviderAttributes&gt;</returns>
        System.Threading.Tasks.Task<List<SourceProviderAttributes>> SourceProvidersListAsync(string organization, string project, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of source providers and their capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SourceProviderAttributes&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SourceProviderAttributes>>> SourceProvidersListWithHttpInfoAsync(string organization, string project, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of branches for the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> SourceProvidersListBranchesAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of branches for the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> SourceProvidersListBranchesWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of source code repositories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SourceRepositories</returns>
        System.Threading.Tasks.Task<SourceRepositories> SourceProvidersListRepositoriesAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of source code repositories.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SourceRepositories)</returns>
        System.Threading.Tasks.Task<ApiResponse<SourceRepositories>> SourceProvidersListRepositoriesWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of webhooks installed in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RepositoryWebhook&gt;</returns>
        System.Threading.Tasks.Task<List<RepositoryWebhook>> SourceProvidersListWebhooksAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of webhooks installed in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryWebhook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RepositoryWebhook>>> SourceProvidersListWebhooksWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recreates the webhooks for the specified triggers in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SourceProvidersRestoreWebhooksAsync(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recreates the webhooks for the specified triggers in the given source code repository.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SourceProvidersRestoreWebhooksWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourceProvidersApi : ISourceProvidersApiSync, ISourceProvidersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SourceProvidersApi : ISourceProvidersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceProvidersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourceProvidersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceProvidersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourceProvidersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceProvidersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SourceProvidersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceProvidersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SourceProvidersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets the contents of a file in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string SourceProvidersGetFileContents(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = SourceProvidersGetFileContentsWithHttpInfo(organization, project, providerName, apiVersion, serviceEndpointId, repository, commitOrBranch, path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the contents of a file in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> SourceProvidersGetFileContentsWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (commitOrBranch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commitOrBranch", commitOrBranch));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersGetFileContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{organization}/{project}/_apis/sourceProviders/{providerName}/filecontents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersGetFileContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the contents of a file in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SourceProvidersGetFileContentsAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await SourceProvidersGetFileContentsWithHttpInfoAsync(organization, project, providerName, apiVersion, serviceEndpointId, repository, commitOrBranch, path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the contents of a file in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path to the file to retrieve, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> SourceProvidersGetFileContentsWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersGetFileContents");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (commitOrBranch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commitOrBranch", commitOrBranch));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersGetFileContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{organization}/{project}/_apis/sourceProviders/{providerName}/filecontents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersGetFileContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the contents of a directory in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SourceRepositoryItem&gt;</returns>
        public List<SourceRepositoryItem> SourceProvidersGetPathContents(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<SourceRepositoryItem>> localVarResponse = SourceProvidersGetPathContentsWithHttpInfo(organization, project, providerName, apiVersion, serviceEndpointId, repository, commitOrBranch, path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the contents of a directory in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SourceRepositoryItem&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<SourceRepositoryItem>> SourceProvidersGetPathContentsWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (commitOrBranch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commitOrBranch", commitOrBranch));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersGetPathContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SourceRepositoryItem>>("/{organization}/{project}/_apis/sourceProviders/{providerName}/pathcontents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersGetPathContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the contents of a directory in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SourceRepositoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SourceRepositoryItem>> SourceProvidersGetPathContentsAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<SourceRepositoryItem>> localVarResponse = await SourceProvidersGetPathContentsWithHttpInfoAsync(organization, project, providerName, apiVersion, serviceEndpointId, repository, commitOrBranch, path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the contents of a directory in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="commitOrBranch">The identifier of the commit or branch from which a file&#39;s contents are retrieved. (optional)</param>
        /// <param name="path">The path contents to list, relative to the root of the repository. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SourceRepositoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<SourceRepositoryItem>>> SourceProvidersGetPathContentsWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? commitOrBranch = default(string?), string? path = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersGetPathContents");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (commitOrBranch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commitOrBranch", commitOrBranch));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersGetPathContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SourceRepositoryItem>>("/{organization}/{project}/_apis/sourceProviders/{providerName}/pathcontents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersGetPathContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a pull request object from source provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PullRequest</returns>
        public PullRequest SourceProvidersGetPullRequest(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PullRequest> localVarResponse = SourceProvidersGetPullRequestWithHttpInfo(organization, project, providerName, pullRequestId, apiVersion, repositoryId, serviceEndpointId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a pull request object from source provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PullRequest</returns>
        public Org.OpenAPITools.Client.ApiResponse<PullRequest> SourceProvidersGetPullRequestWithHttpInfo(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'pullRequestId' is set
            if (pullRequestId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'pullRequestId' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            localVarRequestOptions.PathParameters.Add("pullRequestId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pullRequestId)); // path parameter
            if (repositoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryId", repositoryId));
            }
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersGetPullRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PullRequest>("/{organization}/{project}/_apis/sourceProviders/{providerName}/pullrequests/{pullRequestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersGetPullRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a pull request object from source provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PullRequest</returns>
        public async System.Threading.Tasks.Task<PullRequest> SourceProvidersGetPullRequestAsync(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PullRequest> localVarResponse = await SourceProvidersGetPullRequestWithHttpInfoAsync(organization, project, providerName, pullRequestId, apiVersion, repositoryId, serviceEndpointId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a pull request object from source provider.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="pullRequestId">Vendor-specific id of the pull request.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="repositoryId">Vendor-specific identifier or the name of the repository that contains the pull request. (optional)</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PullRequest>> SourceProvidersGetPullRequestWithHttpInfoAsync(string organization, string project, string providerName, string pullRequestId, string apiVersion, string? repositoryId = default(string?), Guid? serviceEndpointId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'pullRequestId' is set
            if (pullRequestId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'pullRequestId' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersGetPullRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            localVarRequestOptions.PathParameters.Add("pullRequestId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pullRequestId)); // path parameter
            if (repositoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repositoryId", repositoryId));
            }
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersGetPullRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PullRequest>("/{organization}/{project}/_apis/sourceProviders/{providerName}/pullrequests/{pullRequestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersGetPullRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of source providers and their capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SourceProviderAttributes&gt;</returns>
        public List<SourceProviderAttributes> SourceProvidersList(string organization, string project, string apiVersion, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<SourceProviderAttributes>> localVarResponse = SourceProvidersListWithHttpInfo(organization, project, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of source providers and their capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SourceProviderAttributes&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<SourceProviderAttributes>> SourceProvidersListWithHttpInfo(string organization, string project, string apiVersion, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SourceProviderAttributes>>("/{organization}/{project}/_apis/sourceproviders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of source providers and their capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SourceProviderAttributes&gt;</returns>
        public async System.Threading.Tasks.Task<List<SourceProviderAttributes>> SourceProvidersListAsync(string organization, string project, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<SourceProviderAttributes>> localVarResponse = await SourceProvidersListWithHttpInfoAsync(organization, project, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of source providers and their capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SourceProviderAttributes&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<SourceProviderAttributes>>> SourceProvidersListWithHttpInfoAsync(string organization, string project, string apiVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersList");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersList");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SourceProviderAttributes>>("/{organization}/{project}/_apis/sourceproviders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of branches for the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> SourceProvidersListBranches(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<string>> localVarResponse = SourceProvidersListBranchesWithHttpInfo(organization, project, providerName, apiVersion, serviceEndpointId, repository, branchName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of branches for the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<string>> SourceProvidersListBranchesWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (branchName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "branchName", branchName));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersListBranches";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/{organization}/{project}/_apis/sourceProviders/{providerName}/branches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersListBranches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of branches for the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> SourceProvidersListBranchesAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<string>> localVarResponse = await SourceProvidersListBranchesWithHttpInfoAsync(organization, project, providerName, apiVersion, serviceEndpointId, repository, branchName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of branches for the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="branchName">If supplied, the name of the branch to check for specifically. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<string>>> SourceProvidersListBranchesWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? branchName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersListBranches");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersListBranches");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (branchName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "branchName", branchName));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersListBranches";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/{organization}/{project}/_apis/sourceProviders/{providerName}/branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersListBranches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of source code repositories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SourceRepositories</returns>
        public SourceRepositories SourceProvidersListRepositories(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SourceRepositories> localVarResponse = SourceProvidersListRepositoriesWithHttpInfo(organization, project, providerName, apiVersion, serviceEndpointId, repository, resultSet, pageResults, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of source code repositories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SourceRepositories</returns>
        public Org.OpenAPITools.Client.ApiResponse<SourceRepositories> SourceProvidersListRepositoriesWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (resultSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "resultSet", resultSet));
            }
            if (pageResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageResults", pageResults));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersListRepositories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SourceRepositories>("/{organization}/{project}/_apis/sourceProviders/{providerName}/repositories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersListRepositories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of source code repositories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SourceRepositories</returns>
        public async System.Threading.Tasks.Task<SourceRepositories> SourceProvidersListRepositoriesAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SourceRepositories> localVarResponse = await SourceProvidersListRepositoriesWithHttpInfoAsync(organization, project, providerName, apiVersion, serviceEndpointId, repository, resultSet, pageResults, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of source code repositories.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of a single repository to get. (optional)</param>
        /// <param name="resultSet">&#39;top&#39; for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if &#39;repository&#39; is set. (optional)</param>
        /// <param name="pageResults">If set to true, this will limit the set of results and will return a continuation token to continue the query. (optional)</param>
        /// <param name="continuationToken">When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SourceRepositories)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SourceRepositories>> SourceProvidersListRepositoriesWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), string? resultSet = default(string?), bool? pageResults = default(bool?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersListRepositories");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (resultSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "resultSet", resultSet));
            }
            if (pageResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageResults", pageResults));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersListRepositories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SourceRepositories>("/{organization}/{project}/_apis/sourceProviders/{providerName}/repositories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersListRepositories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of webhooks installed in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RepositoryWebhook&gt;</returns>
        public List<RepositoryWebhook> SourceProvidersListWebhooks(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<RepositoryWebhook>> localVarResponse = SourceProvidersListWebhooksWithHttpInfo(organization, project, providerName, apiVersion, serviceEndpointId, repository);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of webhooks installed in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RepositoryWebhook&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<RepositoryWebhook>> SourceProvidersListWebhooksWithHttpInfo(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersListWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RepositoryWebhook>>("/{organization}/{project}/_apis/sourceProviders/{providerName}/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersListWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of webhooks installed in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RepositoryWebhook&gt;</returns>
        public async System.Threading.Tasks.Task<List<RepositoryWebhook>> SourceProvidersListWebhooksAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<RepositoryWebhook>> localVarResponse = await SourceProvidersListWebhooksWithHttpInfoAsync(organization, project, providerName, apiVersion, serviceEndpointId, repository, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of webhooks installed in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RepositoryWebhook&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<RepositoryWebhook>>> SourceProvidersListWebhooksWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersListWebhooks");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersListWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RepositoryWebhook>>("/{organization}/{project}/_apis/sourceProviders/{providerName}/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersListWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Recreates the webhooks for the specified triggers in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SourceProvidersRestoreWebhooks(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0)
        {
            SourceProvidersRestoreWebhooksWithHttpInfo(organization, project, providerName, apiVersion, body, serviceEndpointId, repository);
        }

        /// <summary>
        ///  Recreates the webhooks for the specified triggers in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> SourceProvidersRestoreWebhooksWithHttpInfo(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersRestoreWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{organization}/{project}/_apis/sourceProviders/{providerName}/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersRestoreWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Recreates the webhooks for the specified triggers in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SourceProvidersRestoreWebhooksAsync(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SourceProvidersRestoreWebhooksWithHttpInfoAsync(organization, project, providerName, apiVersion, body, serviceEndpointId, repository, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Recreates the webhooks for the specified triggers in the given source code repository.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">The name of the Azure DevOps organization.</param>
        /// <param name="project">Project ID or project name</param>
        /// <param name="providerName">The name of the source provider.</param>
        /// <param name="apiVersion">Version of the API to use.  This should be set to &#39;6.0-preview.1&#39; to use this version of the api.</param>
        /// <param name="body">The types of triggers to restore webhooks for.</param>
        /// <param name="serviceEndpointId">If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit. (optional)</param>
        /// <param name="repository">If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> SourceProvidersRestoreWebhooksWithHttpInfoAsync(string organization, string project, string providerName, string apiVersion, List<string> body, Guid? serviceEndpointId = default(Guid?), string? repository = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'organization' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'project' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerName' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiVersion' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling SourceProvidersApi->SourceProvidersRestoreWebhooks");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", Org.OpenAPITools.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerName)); // path parameter
            if (serviceEndpointId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "serviceEndpointId", serviceEndpointId));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SourceProvidersApi.SourceProvidersRestoreWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{organization}/{project}/_apis/sourceProviders/{providerName}/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SourceProvidersRestoreWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
